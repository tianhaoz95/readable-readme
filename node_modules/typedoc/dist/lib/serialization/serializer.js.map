{"version":3,"file":"serializer.js","sourceRoot":"","sources":["../../../src/lib/serialization/serializer.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventDispatcher } from \"../utils\";\nimport { ProjectReflection } from \"../models\";\n\nimport { SerializerComponent } from \"./components\";\nimport { SerializeEvent, SerializeEventData } from \"./events\";\nimport { ModelToObject } from \"./schema\";\nimport * as S from \"./serializers\";\n\nexport class Serializer extends EventDispatcher {\n    /**\n     * Triggered when the [[Serializer]] begins transforming a project.\n     * @event EVENT_BEGIN\n     */\n    static EVENT_BEGIN = \"begin\";\n\n    /**\n     * Triggered when the [[Serializer]] has finished transforming a project.\n     * @event EVENT_END\n     */\n    static EVENT_END = \"end\";\n\n    /**\n     * Serializers, sorted by their `serializeGroup` function to enable higher performance.\n     */\n    private serializers = new Map<\n        (instance: unknown) => boolean,\n        SerializerComponent<any>[]\n    >();\n\n    constructor() {\n        super();\n        addSerializers(this);\n    }\n\n    addSerializer(serializer: SerializerComponent<any>): void {\n        let group = this.serializers.get(serializer.serializeGroup);\n\n        if (!group) {\n            this.serializers.set(serializer.serializeGroup, (group = []));\n        }\n\n        group.push(serializer);\n        group.sort((a, b) => b.priority - a.priority);\n    }\n\n    toObject<T>(value: T, init?: object): ModelToObject<T>;\n    toObject(value: unknown, init: object = {}): unknown {\n        if (value == null || typeof value !== \"object\") {\n            return value; // Serializing some primitive\n        }\n\n        if (Array.isArray(value)) {\n            if (value.length === 0) {\n                return undefined;\n            }\n            return value.map((val) => this.toObject(val));\n        }\n\n        // Note: This type *could* potentially lie, if a serializer declares a partial type but fails to provide\n        // the defined property, but the benefit of being mostly typed is probably worth it.\n        // TypeScript errors out if init is correctly typed as `Partial<ModelToObject<T>>`\n        return this.findSerializers(value).reduce<any>(\n            (result, curr) => curr.toObject(value, result),\n            init\n        );\n    }\n\n    /**\n     * Same as toObject but emits [[ Serializer#EVENT_BEGIN ]] and [[ Serializer#EVENT_END ]] events.\n     * @param value\n     * @param eventData Partial information to set in the event\n     */\n    projectToObject(\n        value: ProjectReflection,\n        eventData: { begin?: SerializeEventData; end?: SerializeEventData } = {}\n    ): ModelToObject<ProjectReflection> {\n        const eventBegin = new SerializeEvent(\n            Serializer.EVENT_BEGIN,\n            value,\n            {}\n        );\n        if (eventData.begin) {\n            eventBegin.outputDirectory = eventData.begin.outputDirectory;\n            eventBegin.outputFile = eventData.begin.outputFile;\n        }\n        this.trigger(eventBegin);\n\n        const project = this.toObject(value, eventBegin.output);\n\n        const eventEnd = new SerializeEvent(\n            Serializer.EVENT_END,\n            value,\n            project\n        );\n        if (eventData.end) {\n            eventBegin.outputDirectory = eventData.end.outputDirectory;\n            eventBegin.outputFile = eventData.end.outputFile;\n        }\n        this.trigger(eventEnd);\n\n        return project;\n    }\n\n    private findSerializers<T>(value: T): SerializerComponent<T>[] {\n        const routes: SerializerComponent<any>[] = [];\n\n        for (const [groupSupports, components] of this.serializers.entries()) {\n            if (groupSupports(value)) {\n                for (const component of components) {\n                    if (component.supports(value)) {\n                        routes.push(component);\n                    }\n                }\n            }\n        }\n\n        return routes as any;\n    }\n}\n\nconst serializerComponents: (new (\n    owner: Serializer\n) => SerializerComponent<any>)[] = [\n    S.CommentTagSerializer,\n    S.CommentSerializer,\n\n    S.ReflectionSerializer,\n    S.ReferenceReflectionSerializer,\n    S.ContainerReflectionSerializer,\n    S.DeclarationReflectionSerializer,\n    S.ParameterReflectionSerializer,\n    S.SignatureReflectionSerializer,\n    S.TypeParameterReflectionSerializer,\n\n    S.SourceReferenceContainerSerializer,\n\n    S.TypeSerializer,\n    S.ArrayTypeSerializer,\n    S.ConditionalTypeSerializer,\n    S.IndexedAccessTypeSerializer,\n    S.InferredTypeSerializer,\n    S.IntersectionTypeSerializer,\n    S.IntrinsicTypeSerializer,\n    S.OptionalTypeSerializer,\n    S.PredicateTypeSerializer,\n    S.QueryTypeSerializer,\n    S.ReferenceTypeSerializer,\n    S.ReferenceTypeSerializer,\n    S.ReflectionTypeSerializer,\n    S.RestTypeSerializer,\n    S.LiteralTypeSerializer,\n    S.TupleTypeSerializer,\n    S.TemplateLiteralTypeSerializer,\n    S.NamedTupleMemberTypeSerializer,\n    S.MappedTypeSerializer,\n    S.TypeOperatorTypeSerializer,\n    S.TypeParameterTypeSerializer,\n    S.UnionTypeSerializer,\n    S.UnknownTypeSerializer,\n\n    S.DecoratorContainerSerializer,\n    S.ReflectionCategorySerializer,\n    S.ReflectionGroupSerializer,\n];\n\nfunction addSerializers(owner: Serializer) {\n    for (const component of serializerComponents) {\n        owner.addSerializer(new component(owner));\n    }\n}\n"]}