{"version":3,"file":"template-literal.js","sourceRoot":"","sources":["../../../../../src/lib/serialization/serializers/types/template-literal.ts"],"names":[],"mappings":";;;AAAA,4CAAsD;AACtD,iDAA2D;AAG3D,MAAa,6BAA8B,SAAQ,oCAA4C;IAC3F,QAAQ,CAAC,CAAU;QACf,OAAO,CAAC,YAAY,4BAAmB,CAAC;IAC5C,CAAC;IAED,QAAQ,CACJ,IAAyB,EACzB,GAA0C;QAE1C,OAAO;YACH,GAAG,GAAG;YACN,IAAI,EAAE,IAAI,CAAC,IAAI;YACf,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC;gBAClC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC;gBACzB,IAAI;aACP,CAAC;SACL,CAAC;IACN,CAAC;CACJ;AAlBD,sEAkBC","sourcesContent":["import { TemplateLiteralType } from \"../../../models\";\nimport { TypeSerializerComponent } from \"../../components\";\nimport { TemplateLiteralType as JSONTemplateLiteralType } from \"../../schema\";\n\nexport class TemplateLiteralTypeSerializer extends TypeSerializerComponent<TemplateLiteralType> {\n    supports(t: unknown) {\n        return t instanceof TemplateLiteralType;\n    }\n\n    toObject(\n        type: TemplateLiteralType,\n        obj: Pick<JSONTemplateLiteralType, \"type\">\n    ): JSONTemplateLiteralType {\n        return {\n            ...obj,\n            head: type.head,\n            tail: type.tail.map(([type, text]) => [\n                this.owner.toObject(type),\n                text,\n            ]),\n        };\n    }\n}\n"]}