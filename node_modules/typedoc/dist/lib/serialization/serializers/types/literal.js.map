{"version":3,"file":"literal.js","sourceRoot":"","sources":["../../../../../src/lib/serialization/serializers/types/literal.ts"],"names":[],"mappings":";;;AAAA,4CAA8C;AAE9C,iDAA2D;AAG3D,MAAa,qBAAsB,SAAQ,oCAAoC;IAC3E,QAAQ,CAAC,CAAU;QACf,OAAO,CAAC,YAAY,oBAAW,CAAC;IACpC,CAAC;IAED,QAAQ,CACJ,IAAiB,EACjB,GAAkC;QAElC,IAAI,OAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,EAAE;YAChC,OAAO;gBACH,GAAG,GAAG;gBACN,KAAK,EAAE;oBACH,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;oBAC7C,QAAQ,EAAE,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC;iBACrC;aACJ,CAAC;SACL;QAED,OAAO;YACH,GAAG,GAAG;YACN,KAAK,EAAE,IAAI,CAAC,KAAK;SACpB,CAAC;IACN,CAAC;CACJ;AAxBD,sDAwBC","sourcesContent":["import { LiteralType } from \"../../../models\";\n\nimport { TypeSerializerComponent } from \"../../components\";\nimport { LiteralType as JSONLiteralType } from \"../../schema\";\n\nexport class LiteralTypeSerializer extends TypeSerializerComponent<LiteralType> {\n    supports(t: unknown) {\n        return t instanceof LiteralType;\n    }\n\n    toObject(\n        type: LiteralType,\n        obj: Pick<JSONLiteralType, \"type\">\n    ): JSONLiteralType {\n        if (typeof type.value === \"bigint\") {\n            return {\n                ...obj,\n                value: {\n                    value: type.value.toString().replace(\"-\", \"\"),\n                    negative: type.value < BigInt(\"0\"),\n                },\n            };\n        }\n\n        return {\n            ...obj,\n            value: type.value,\n        };\n    }\n}\n"]}