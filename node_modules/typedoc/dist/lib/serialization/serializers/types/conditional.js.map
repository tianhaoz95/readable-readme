{"version":3,"file":"conditional.js","sourceRoot":"","sources":["../../../../../src/lib/serialization/serializers/types/conditional.ts"],"names":[],"mappings":";;;AAAA,4CAAkD;AAClD,iDAA2D;AAM3D,MAAa,yBAA0B,SAAQ,oCAAwC;IACnF,QAAQ,CAAC,IAAa;QAClB,OAAO,IAAI,YAAY,wBAAe,CAAC;IAC3C,CAAC;IAED,QAAQ,CACJ,WAA4B,EAC5B,GAAiD;QAEjD,OAAO;YACH,GAAG,GAAG;YACN,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC;YACrD,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,WAAW,CAAC;YACzD,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC;YACnD,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC;SACxD,CAAC;IACN,CAAC;CACJ;AAjBD,8DAiBC","sourcesContent":["import { ConditionalType } from \"../../../models\";\nimport { TypeSerializerComponent } from \"../../components\";\nimport {\n    Type as JSONType,\n    ConditionalType as JSONConditionalType,\n} from \"../../schema\";\n\nexport class ConditionalTypeSerializer extends TypeSerializerComponent<ConditionalType> {\n    supports(item: unknown): boolean {\n        return item instanceof ConditionalType;\n    }\n\n    toObject(\n        conditional: ConditionalType,\n        obj: Pick<JSONConditionalType, \"type\"> & JSONType\n    ): JSONConditionalType {\n        return {\n            ...obj,\n            checkType: this.owner.toObject(conditional.checkType),\n            extendsType: this.owner.toObject(conditional.extendsType),\n            trueType: this.owner.toObject(conditional.trueType),\n            falseType: this.owner.toObject(conditional.falseType),\n        };\n    }\n}\n"]}