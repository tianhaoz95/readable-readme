{"version":3,"file":"conditional.js","sourceRoot":"","sources":["../../../../../src/lib/serialization/serializers/types/conditional.ts"],"names":[],"mappings":";;AAAA,4CAAkD;AAClD,iDAA2D;AAM3D,MAAa,yBAA0B,SAAQ,oCAAwC;IACnF,QAAQ,CAAC,IAAa;QAClB,OAAO,IAAI,YAAY,wBAAe,CAAC;IAC3C,CAAC;IAED,QAAQ,CAAC,WAA4B,EAAE,GAAiD;QACpF,uCACO,GAAG,KACN,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,EACrD,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,WAAW,CAAC,EACzD,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC,EACnD,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,IACvD;IACN,CAAC;CACJ;AAdD,8DAcC","sourcesContent":["import { ConditionalType } from '../../../models';\nimport { TypeSerializerComponent } from '../../components';\nimport {\n    Type as JSONType,\n    ConditionalType as JSONConditionalType\n} from '../../schema';\n\nexport class ConditionalTypeSerializer extends TypeSerializerComponent<ConditionalType> {\n    supports(item: unknown): boolean {\n        return item instanceof ConditionalType;\n    }\n\n    toObject(conditional: ConditionalType, obj: Pick<JSONConditionalType, 'type'> & JSONType): JSONConditionalType {\n        return {\n            ...obj,\n            checkType: this.owner.toObject(conditional.checkType),\n            extendsType: this.owner.toObject(conditional.extendsType),\n            trueType: this.owner.toObject(conditional.trueType),\n            falseType: this.owner.toObject(conditional.falseType)\n        };\n    }\n}\n"]}