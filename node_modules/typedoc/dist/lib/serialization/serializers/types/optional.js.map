{"version":3,"file":"optional.js","sourceRoot":"","sources":["../../../../../src/lib/serialization/serializers/types/optional.ts"],"names":[],"mappings":";;;AAAA,4CAA+C;AAE/C,iDAA2D;AAG3D,MAAa,sBAAuB,SAAQ,oCAAqC;IAC7E,QAAQ,CAAC,CAAU;QACf,OAAO,CAAC,YAAY,qBAAY,CAAC;IACrC,CAAC;IAED;;;;OAIG;IACH,QAAQ,CACJ,IAAkB,EAClB,GAAmC;QAEnC,OAAO;YACH,GAAG,GAAG;YACN,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC;SACrD,CAAC;IACN,CAAC;CACJ;AAnBD,wDAmBC","sourcesContent":["import { OptionalType } from \"../../../models\";\n\nimport { TypeSerializerComponent } from \"../../components\";\nimport { OptionalType as JSONOptionalType } from \"../../schema\";\n\nexport class OptionalTypeSerializer extends TypeSerializerComponent<OptionalType> {\n    supports(t: unknown) {\n        return t instanceof OptionalType;\n    }\n\n    /**\n     * Will be run after [[TypeSerializer]] so `type` will already be set.\n     * @param type\n     * @param obj\n     */\n    toObject(\n        type: OptionalType,\n        obj: Pick<JSONOptionalType, \"type\">\n    ): JSONOptionalType {\n        return {\n            ...obj,\n            elementType: this.owner.toObject(type.elementType),\n        };\n    }\n}\n"]}