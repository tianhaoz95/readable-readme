{"version":3,"file":"intrinsic.js","sourceRoot":"","sources":["../../../../../src/lib/serialization/serializers/types/intrinsic.ts"],"names":[],"mappings":";;;AAAA,4CAAgD;AAEhD,iDAA2D;AAG3D,MAAa,uBAAwB,SAAQ,oCAAsC;IAC/E,QAAQ,CAAC,CAAU;QACf,OAAO,CAAC,YAAY,sBAAa,CAAC;IACtC,CAAC;IAED;;;;OAIG;IACH,QAAQ,CACJ,IAAmB,EACnB,GAAoC;QAEpC,OAAO;YACH,GAAG,GAAG;YACN,IAAI,EAAE,IAAI,CAAC,IAAI;SAClB,CAAC;IACN,CAAC;CACJ;AAnBD,0DAmBC","sourcesContent":["import { IntrinsicType } from \"../../../models\";\n\nimport { TypeSerializerComponent } from \"../../components\";\nimport { IntrinsicType as JSONIntrinsicType } from \"../../schema\";\n\nexport class IntrinsicTypeSerializer extends TypeSerializerComponent<IntrinsicType> {\n    supports(t: unknown) {\n        return t instanceof IntrinsicType;\n    }\n\n    /**\n     * Will be run after [[TypeSerializer]] so `type` will already be set.\n     * @param type\n     * @param obj\n     */\n    toObject(\n        type: IntrinsicType,\n        obj: Pick<JSONIntrinsicType, \"type\">\n    ): JSONIntrinsicType {\n        return {\n            ...obj,\n            name: type.name,\n        };\n    }\n}\n"]}