{"version":3,"file":"abstract.js","sourceRoot":"","sources":["../../../../../src/lib/serialization/serializers/reflections/abstract.ts"],"names":[],"mappings":";;;AAAA,4CAA6C;AAE7C,iDAAiE;AACjE,sCAA6C;AAG7C,MAAa,oBAAqB,SAAQ,0CAAyC;IAG/E,QAAQ,CAAC,CAAU;QACf,OAAO,CAAC,YAAY,mBAAU,CAAC;IACnC,CAAC;IAED,QAAQ,CACJ,UAAsB,EACtB,GAA6B;;QAE7B,MAAM,MAAM,GAAmB;YAC3B,GAAG,GAAG;YACN,EAAE,EAAE,UAAU,CAAC,EAAE;YACjB,IAAI,EAAE,UAAU,CAAC,IAAI;YACrB,IAAI,EAAE,UAAU,CAAC,IAAI;YACrB,UAAU,EAAE,UAAU,CAAC,UAAU;YACjC,KAAK,EAAE,EAAE;YACT,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC;YAChD,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,SAAS,CAAC;YACpD,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,OAC3B,UAAU,CAAC,UAAU,0CAAE,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,yBAAgB,CAAC,CAAC,CAAC,EAC5D;SACJ,CAAC;QAEF,IAAI,UAAU,CAAC,YAAY,KAAK,UAAU,CAAC,IAAI,EAAE;YAC7C,MAAM,CAAC,YAAY,GAAG,UAAU,CAAC,YAAY,CAAC;SACjD;QAED,MAAM,KAAK,GAAG;YACV,WAAW;YACX,aAAa;YACb,UAAU;YACV,UAAU;YACV,YAAY;YACZ,YAAY;YACZ,QAAQ;YACR,qBAAqB;YACrB,YAAY;YACZ,SAAS;YACT,OAAO;YACP,YAAY;SACN,CAAC;QAEX,KAAK,MAAM,GAAG,IAAI,KAAK,EAAE;YACrB,IAAI,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,IAAI,EAAE;gBAChC,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;aAC5B;SACJ;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;;AAnDL,oDAoDC;AAnDU,6BAAQ,GAAG,IAAI,CAAC","sourcesContent":["import { Reflection } from \"../../../models\";\n\nimport { ReflectionSerializerComponent } from \"../../components\";\nimport { DecoratorWrapper } from \"../models\";\nimport type { Reflection as JSONReflection } from \"../../schema\";\n\nexport class ReflectionSerializer extends ReflectionSerializerComponent<Reflection> {\n    static PRIORITY = 1000;\n\n    supports(t: unknown) {\n        return t instanceof Reflection;\n    }\n\n    toObject(\n        reflection: Reflection,\n        obj?: Partial<JSONReflection>\n    ): JSONReflection {\n        const result: JSONReflection = {\n            ...obj,\n            id: reflection.id,\n            name: reflection.name,\n            kind: reflection.kind,\n            kindString: reflection.kindString,\n            flags: {},\n            comment: this.owner.toObject(reflection.comment),\n            decorates: this.owner.toObject(reflection.decorates),\n            decorators: this.owner.toObject(\n                reflection.decorators?.map((d) => new DecoratorWrapper(d))\n            ),\n        };\n\n        if (reflection.originalName !== reflection.name) {\n            result.originalName = reflection.originalName;\n        }\n\n        const flags = [\n            \"isPrivate\",\n            \"isProtected\",\n            \"isPublic\",\n            \"isStatic\",\n            \"isExternal\",\n            \"isOptional\",\n            \"isRest\",\n            \"hasExportAssignment\",\n            \"isAbstract\",\n            \"isConst\",\n            \"isLet\",\n            \"isReadonly\",\n        ] as const;\n\n        for (const key of flags) {\n            if (reflection.flags[key] === true) {\n                result.flags[key] = true;\n            }\n        }\n\n        return result;\n    }\n}\n"]}