{"version":3,"file":"container.js","sourceRoot":"","sources":["../../../../../src/lib/serialization/serializers/reflections/container.ts"],"names":[],"mappings":";;AAAA,4CAAsD;AAEtD,iDAAiE;AACjE,sCAAmD;AAGnD,MAAa,6BAA8B,SAAQ,0CAAkD;IACjG,QAAQ,CAAC,CAAU;QACf,OAAO,CAAC,YAAY,4BAAmB,CAAC;IAC5C,CAAC;IAOD,QAAQ,CAAC,SAA8B,EAAE,GAAmB;QACxD,MAAM,MAAM,qBACL,GAAG,CACT,CAAC;QAEF,IAAI,SAAS,CAAC,MAAM,IAAI,SAAS,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YACjD,MAAM,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;SAC7E;QAED,IAAI,SAAS,CAAC,UAAU,IAAI,SAAS,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;YACzD,MAAM,CAAC,UAAU,GAAG,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;SAC3F;QAED,IAAI,SAAS,CAAC,OAAO,IAAI,SAAS,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YACnD,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAC5C,IAAI,CAAC,KAAK,CAAC,QAAQ,CACf,IAAI,+BAAsB,CAAC;gBACvB,QAAQ,EAAE,MAAM,CAAC,QAAQ;gBACzB,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,SAAS,EAAE,MAAM,CAAC,SAAS;aAC9B,CAAC,CACL,CACJ,CAAC;SACL;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;CACJ;AArCD,sEAqCC","sourcesContent":["import { ContainerReflection } from '../../../models';\n\nimport { ReflectionSerializerComponent } from '../../components';\nimport { SourceReferenceWrapper } from '../models';\nimport { ContainerReflection as JSONContainerReflection, Reflection as JSONReflection } from '../../schema';\n\nexport class ContainerReflectionSerializer extends ReflectionSerializerComponent<ContainerReflection> {\n    supports(t: unknown) {\n        return t instanceof ContainerReflection;\n    }\n\n    /**\n     * Will be run after [[ReflectionSerializer]] so will be passed the result of that serialization.\n     * @param container\n     * @param obj\n     */\n    toObject(container: ContainerReflection, obj: JSONReflection): JSONContainerReflection {\n        const result: JSONContainerReflection = {\n            ...obj\n        };\n\n        if (container.groups && container.groups.length > 0) {\n            result.groups = container.groups.map(group => this.owner.toObject(group));\n        }\n\n        if (container.categories && container.categories.length > 0) {\n            result.categories = container.categories.map(category => this.owner.toObject(category));\n        }\n\n        if (container.sources && container.sources.length > 0) {\n            result.sources = container.sources.map(source =>\n                this.owner.toObject(\n                    new SourceReferenceWrapper({\n                        fileName: source.fileName,\n                        line: source.line,\n                        character: source.character\n                    })\n                )\n            );\n        }\n\n        return result;\n    }\n}\n"]}