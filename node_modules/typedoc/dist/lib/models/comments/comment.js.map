{"version":3,"file":"comment.js","sourceRoot":"","sources":["../../../../src/lib/models/comments/comment.ts"],"names":[],"mappings":";;AAAA,+BAAmC;AAQnC,MAAa,OAAO;IAyBhB,YAAY,SAAkB,EAAE,IAAa;QACzC,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,EAAE,CAAC;QACjC,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;IAC3B,CAAC;IAOD,mBAAmB;QACf,OAAO,CAAC,CAAC,IAAI,CAAC,SAAS,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;IAC1D,CAAC;IAQD,MAAM,CAAC,OAAe;QAClB,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACZ,OAAO,KAAK,CAAC;SAChB;QACD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC9C,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,KAAK,OAAO,EAAE;gBAClC,OAAO,IAAI,CAAC;aACf;SACJ;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAWD,MAAM,CAAC,OAAe,EAAE,SAAkB;QACtC,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YAChC,OAAO,GAAG,CAAC,OAAO,KAAK,OAAO,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC,IAAI,GAAG,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC;QAC5F,CAAC,CAAC,CAAC;IACP,CAAC;IAMD,UAAU,CAAC,OAAe;;QACtB,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;YACZ,OAAO;SACV;QAED,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,SAAG,IAAI,CAAC,IAAI,CAAC,MAAM,uCAAI,CAAC,EAAA,CAAC;QACrC,OAAO,CAAC,GAAG,CAAC,EAAE;YACV,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,KAAK,OAAO,EAAE;gBAClC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBACvB,CAAC,EAAE,CAAC;aACP;iBAAM;gBACH,CAAC,EAAE,CAAC;aACP;SACJ;IACL,CAAC;IAOD,QAAQ,CAAC,OAAgB;QACrB,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;QACnC,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;QACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QAC/B,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,gBAAU,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,SAAS,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAC3H,CAAC;CACJ;AAvGD,0BAuGC","sourcesContent":["import { CommentTag } from './tag';\n\n/**\n * A model that represents a javadoc comment.\n *\n * Instances of this model are created by the [[CommentHandler]]. You can retrieve comments\n * through the [[BaseReflection.comment]] property.\n */\nexport class Comment {\n    /**\n     * The abstract of the comment. TypeDoc interprets the first paragraph of a comment\n     * as the abstract.\n     */\n    shortText: string;\n\n    /**\n     * The full body text of the comment. Excludes the [[shortText]].\n     */\n    text: string;\n\n    /**\n     * The text of the ```@returns``` tag if present.\n     */\n    returns?: string;\n\n    /**\n     * All associated javadoc tags.\n     */\n    tags?: CommentTag[];\n\n    /**\n     * Creates a new Comment instance.\n     */\n    constructor(shortText?: string, text?: string) {\n        this.shortText = shortText || '';\n        this.text = text || '';\n    }\n\n    /**\n     * Has this comment a visible component?\n     *\n     * @returns TRUE when this comment has a visible component.\n     */\n    hasVisibleComponent(): boolean {\n        return !!this.shortText || !!this.text || !!this.tags;\n    }\n\n    /**\n     * Test whether this comment contains a tag with the given name.\n     *\n     * @param tagName  The name of the tag to look for.\n     * @returns TRUE when this comment contains a tag with the given name, otherwise FALSE.\n     */\n    hasTag(tagName: string): boolean {\n        if (!this.tags) {\n            return false;\n        }\n        for (let i = 0, c = this.tags.length; i < c; i++) {\n            if (this.tags[i].tagName === tagName) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Return the first tag with the given name.\n     *\n     * You can optionally pass a parameter name that should be searched to.\n     *\n     * @param tagName  The name of the tag to look for.\n     * @param paramName  An optional parameter name to look for.\n     * @returns The found tag or undefined.\n     */\n    getTag(tagName: string, paramName?: string): CommentTag | undefined {\n        return (this.tags || []).find(tag => {\n            return tag.tagName === tagName && (paramName === void 0 || tag.paramName === paramName);\n        });\n    }\n\n    /**\n     * Removes all tags with the given tag name from teh comment.\n     * @param tagName\n     */\n    removeTags(tagName: string) {\n        if (!this.tags) {\n            return;\n        }\n\n        let i = 0, c = this.tags.length ?? 0;\n        while (i < c) {\n            if (this.tags[i].tagName === tagName) {\n                this.tags.splice(i, 1);\n                c--;\n            } else {\n                i++;\n            }\n        }\n    }\n\n    /**\n     * Copy the data of the given comment into this comment.\n     *\n     * @param comment\n     */\n    copyFrom(comment: Comment) {\n        this.shortText = comment.shortText;\n        this.text = comment.text;\n        this.returns = comment.returns;\n        this.tags = comment.tags ? comment.tags.map((tag) => new CommentTag(tag.tagName, tag.paramName, tag.text)) : undefined;\n    }\n}\n"]}