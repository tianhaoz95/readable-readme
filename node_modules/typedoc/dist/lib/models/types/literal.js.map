{"version":3,"file":"literal.js","sourceRoot":"","sources":["../../../../src/lib/models/types/literal.ts"],"names":[],"mappings":";;;AAAA,yCAAkC;AAElC;;;;;;;GAOG;AACH,MAAa,WAAY,SAAQ,eAAI;IAQjC,YAAY,KAA2B;QACnC,KAAK,EAAE,CAAC;QANZ;;WAEG;QACM,SAAI,GAAG,SAAS,CAAC;QAItB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACH,KAAK;QACD,OAAO,IAAI,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACvC,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,KAAkB;QACrB,OAAO,KAAK,YAAY,WAAW,IAAI,KAAK,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC;IACtE,CAAC;IAED;;OAEG;IACH,QAAQ;QACJ,IAAI,OAAO,IAAI,CAAC,KAAK,KAAK,QAAQ,EAAE;YAChC,OAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;SAChC;QACD,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACtC,CAAC;CACJ;AAzCD,kCAyCC","sourcesContent":["import { Type } from \"./abstract\";\n\n/**\n * Represents a string literal type.\n *\n * ```ts\n * type A = \"A\"\n * type B = 1\n * ```\n */\nexport class LiteralType extends Type {\n    value: string | number | boolean | null | bigint;\n\n    /**\n     * The type name identifier.\n     */\n    readonly type = \"literal\";\n\n    constructor(value: LiteralType[\"value\"]) {\n        super();\n        this.value = value;\n    }\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone(): Type {\n        return new LiteralType(this.value);\n    }\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param other  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(other: LiteralType): boolean {\n        return other instanceof LiteralType && other.value === this.value;\n    }\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString(): string {\n        if (typeof this.value === \"bigint\") {\n            return this.value.toString();\n        }\n        return JSON.stringify(this.value);\n    }\n}\n"]}