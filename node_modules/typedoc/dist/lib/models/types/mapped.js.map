{"version":3,"file":"mapped.js","sourceRoot":"","sources":["../../../../src/lib/models/types/mapped.ts"],"names":[],"mappings":";;;AAAA,yCAAkC;AAElC;;;;;;GAMG;AACH,MAAa,UAAW,SAAQ,eAAI;IAGhC,YACW,SAAiB,EACjB,aAAmB,EACnB,YAAkB,EAClB,gBAA4B,EAC5B,gBAA4B,EAC5B,QAAe;QAEtB,KAAK,EAAE,CAAC;QAPD,cAAS,GAAT,SAAS,CAAQ;QACjB,kBAAa,GAAb,aAAa,CAAM;QACnB,iBAAY,GAAZ,YAAY,CAAM;QAClB,qBAAgB,GAAhB,gBAAgB,CAAY;QAC5B,qBAAgB,GAAhB,gBAAgB,CAAY;QAC5B,aAAQ,GAAR,QAAQ,CAAO;QARjB,SAAI,GAAG,QAAQ,CAAC;IAWzB,CAAC;IAED,KAAK;;QACD,OAAO,IAAI,UAAU,CACjB,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,EAC1B,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,EACzB,IAAI,CAAC,gBAAgB,EACrB,IAAI,CAAC,gBAAgB,QACrB,IAAI,CAAC,QAAQ,0CAAE,KAAK,GACvB,CAAC;IACN,CAAC;IAED,MAAM,CAAC,KAAW;QACd,IAAI,CAAC,CAAC,KAAK,YAAY,UAAU,CAAC,EAAE;YAChC,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,IAAI,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ,EAAE;YACjC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;gBACvC,OAAO,KAAK,CAAC;aAChB;SACJ;aAAM,IAAI,IAAI,CAAC,QAAQ,KAAK,KAAK,CAAC,QAAQ,EAAE;YACzC,OAAO,KAAK,CAAC;SAChB;QAED,OAAO,CACH,KAAK,YAAY,UAAU;YAC3B,KAAK,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS;YACjC,KAAK,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC;YAC9C,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;YAC5C,KAAK,CAAC,gBAAgB,KAAK,IAAI,CAAC,gBAAgB;YAChD,KAAK,CAAC,gBAAgB,KAAK,IAAI,CAAC,gBAAgB,CACnD,CAAC;IACN,CAAC;IAED,QAAQ;;QACJ,MAAM,IAAI,GAAG;YACT,GAAG,EAAE,UAAU;YACf,GAAG,EAAE,WAAW;YAChB,EAAE,EAAE,EAAE;SACT,OAAC,IAAI,CAAC,gBAAgB,mCAAI,EAAE,CAAC,CAAC;QAE/B,MAAM,GAAG,GAAG;YACR,GAAG,EAAE,GAAG;YACR,GAAG,EAAE,IAAI;YACT,EAAE,EAAE,EAAE;SACT,OAAC,IAAI,CAAC,gBAAgB,mCAAI,EAAE,CAAC,CAAC;QAE/B,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;QAEzD,OAAO,KAAK,IAAI,IAAI,IAAI,CAAC,SAAS,OAAO,IAAI,CAAC,aAAa,GAAG,IAAI,IAAI,GAAG,KAAK,IAAI,CAAC,YAAY,GAAG,CAAC;IACvG,CAAC;CACJ;AAjED,gCAiEC","sourcesContent":["import { Type } from \"./abstract\";\n\n/**\n * Represents a mapped type.\n *\n * ```ts\n * { -readonly [K in keyof U & string as `a${K}`]?: Foo }\n * ```\n */\nexport class MappedType extends Type {\n    readonly type = \"mapped\";\n\n    constructor(\n        public parameter: string,\n        public parameterType: Type,\n        public templateType: Type,\n        public readonlyModifier?: \"+\" | \"-\",\n        public optionalModifier?: \"+\" | \"-\",\n        public nameType?: Type\n    ) {\n        super();\n    }\n\n    clone(): Type {\n        return new MappedType(\n            this.parameter,\n            this.parameterType.clone(),\n            this.templateType.clone(),\n            this.readonlyModifier,\n            this.optionalModifier,\n            this.nameType?.clone()\n        );\n    }\n\n    equals(other: Type): boolean {\n        if (!(other instanceof MappedType)) {\n            return false;\n        }\n\n        if (this.nameType && other.nameType) {\n            if (!this.nameType.equals(other.nameType)) {\n                return false;\n            }\n        } else if (this.nameType !== other.nameType) {\n            return false;\n        }\n\n        return (\n            other instanceof MappedType &&\n            other.parameter == this.parameter &&\n            other.parameterType.equals(this.parameterType) &&\n            other.templateType.equals(this.templateType) &&\n            other.readonlyModifier === this.readonlyModifier &&\n            other.optionalModifier === this.optionalModifier\n        );\n    }\n\n    toString(): string {\n        const read = {\n            \"+\": \"readonly\",\n            \"-\": \"-readonly\",\n            \"\": \"\",\n        }[this.readonlyModifier ?? \"\"];\n\n        const opt = {\n            \"+\": \"?\",\n            \"-\": \"-?\",\n            \"\": \"\",\n        }[this.optionalModifier ?? \"\"];\n\n        const name = this.nameType ? ` as ${this.nameType}` : \"\";\n\n        return `{ ${read}[${this.parameter} in ${this.parameterType}${name}]${opt}: ${this.templateType}}`;\n    }\n}\n"]}