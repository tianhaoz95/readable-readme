{"version":3,"file":"type-parameter.js","sourceRoot":"","sources":["../../../../src/lib/models/types/type-parameter.ts"],"names":[],"mappings":";;;AAAA,yCAAkC;AAElC;;;;;;GAMG;AACH,MAAa,iBAAkB,SAAQ,eAAI;IAsBvC,YAAY,IAAY;QACpB,KAAK,EAAE,CAAC;QANZ;;WAEG;QACM,SAAI,GAAW,eAAe,CAAC;QAIpC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IAED;;;;OAIG;IACH,KAAK;QACD,MAAM,KAAK,GAAG,IAAI,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/C,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACnC,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;QAC7B,OAAO,KAAK,CAAC;IACjB,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,IAAuB;QAC1B,IAAI,CAAC,CAAC,IAAI,YAAY,iBAAiB,CAAC,EAAE;YACtC,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,gBAAgB,GAAG,KAAK,CAAC;QAE7B,IAAI,IAAI,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,EAAE;YACpC,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC9D;aAAM,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAC7C,gBAAgB,GAAG,IAAI,CAAC;SAC3B;QAED,IAAI,aAAa,GAAG,KAAK,CAAC;QAE1B,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,EAAE;YAC9B,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACrD;aAAM,IAAI,CAAC,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;YACvC,aAAa,GAAG,IAAI,CAAC;SACxB;QAED,OAAO,gBAAgB,IAAI,aAAa,CAAC;IAC7C,CAAC;IAED;;OAEG;IACH,QAAQ;QACJ,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;CACJ;AA3ED,8CA2EC","sourcesContent":["import { Type } from \"./abstract\";\n\n/**\n * Represents a type parameter type.\n *\n * ~~~\n * let value: T;\n * ~~~\n */\nexport class TypeParameterType extends Type {\n    /**\n     *\n     */\n    readonly name: string;\n\n    constraint?: Type;\n\n    /**\n     * Default type for the type parameter.\n     *\n     * ```\n     * class SomeClass<T = {}>\n     * ```\n     */\n    default?: Type;\n\n    /**\n     * The type name identifier.\n     */\n    readonly type: string = \"typeParameter\";\n\n    constructor(name: string) {\n        super();\n        this.name = name;\n    }\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone(): Type {\n        const clone = new TypeParameterType(this.name);\n        clone.constraint = this.constraint;\n        clone.default = this.default;\n        return clone;\n    }\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param type  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(type: TypeParameterType): boolean {\n        if (!(type instanceof TypeParameterType)) {\n            return false;\n        }\n\n        let constraintEquals = false;\n\n        if (this.constraint && type.constraint) {\n            constraintEquals = type.constraint.equals(this.constraint);\n        } else if (!this.constraint && !type.constraint) {\n            constraintEquals = true;\n        }\n\n        let defaultEquals = false;\n\n        if (this.default && type.default) {\n            defaultEquals = type.default.equals(this.default);\n        } else if (!this.default && !type.default) {\n            defaultEquals = true;\n        }\n\n        return constraintEquals && defaultEquals;\n    }\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString(): string {\n        return this.name;\n    }\n}\n"]}