{"version":3,"file":"query.js","sourceRoot":"","sources":["../../../../src/lib/models/types/query.ts"],"names":[],"mappings":";;AAAA,yCAAkC;AAUlC,MAAa,SAAU,SAAQ,eAAI;IAK/B,YAAY,SAAwB;QAChC,KAAK,EAAE,CAAC;QAHH,SAAI,GAAG,OAAO,CAAC;QAIpB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC/B,CAAC;IAED,KAAK;QACD,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACzC,CAAC;IAED,MAAM,CAAC,KAAW;QACd,OAAO,KAAK,YAAY,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IAChF,CAAC;IAED,QAAQ;QACJ,OAAO,UAAU,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,EAAE,CAAC;IACjD,CAAC;CACJ;AArBD,8BAqBC","sourcesContent":["import { Type } from './abstract';\nimport { ReferenceType } from './reference';\n\n/**\n * Represents a type that is constructed by querying the type of a reflection.\n * ```ts\n * const x = 1\n * type Z = typeof x // query on reflection for x\n * ```\n */\nexport class QueryType extends Type {\n    readonly queryType: ReferenceType;\n\n    readonly type = 'query';\n\n    constructor(reference: ReferenceType) {\n        super();\n        this.queryType = reference;\n    }\n\n    clone(): Type {\n        return new QueryType(this.queryType);\n    }\n\n    equals(other: Type) {\n        return other instanceof QueryType && this.queryType.equals(other.queryType);\n    }\n\n    toString() {\n        return `typeof ${this.queryType.toString()}`;\n    }\n}\n"]}