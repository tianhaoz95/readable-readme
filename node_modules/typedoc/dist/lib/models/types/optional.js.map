{"version":3,"file":"optional.js","sourceRoot":"","sources":["../../../../src/lib/models/types/optional.ts"],"names":[],"mappings":";;;AAAA,yCAAkC;AAClC,mCAAoC;AACpC,iDAAkD;AAElD;;;;;;GAMG;AACH,MAAa,YAAa,SAAQ,eAAI;IAWlC;;;;OAIG;IACH,YAAY,WAAiB;QACzB,KAAK,EAAE,CAAC;QAXZ;;WAEG;QACM,SAAI,GAAG,UAAU,CAAC;QASvB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;IAED;;;;OAIG;IACH,KAAK;QACD,OAAO,IAAI,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC;IACtD,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,IAAU;QACb,IAAI,CAAC,CAAC,IAAI,YAAY,YAAY,CAAC,EAAE;YACjC,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACrD,CAAC;IAED;;OAEG;IACH,QAAQ;QACJ,IACI,IAAI,CAAC,WAAW,YAAY,iBAAS;YACrC,IAAI,CAAC,WAAW,YAAY,+BAAgB,EAC9C;YACE,OAAO,IAAI,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC;SAC9C;QACD,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,GAAG,CAAC;IAC7C,CAAC;CACJ;AAvDD,oCAuDC","sourcesContent":["import { Type } from \"./abstract\";\nimport { UnionType } from \"./union\";\nimport { IntersectionType } from \"./intersection\";\n\n/**\n * Represents an optional type\n * ```ts\n * type Z = [1, 2?]\n * //           ^^\n * ```\n */\nexport class OptionalType extends Type {\n    /**\n     * The type of the rest array elements.\n     */\n    elementType: Type;\n\n    /**\n     * The type name identifier.\n     */\n    readonly type = \"optional\";\n\n    /**\n     * Create a new OptionalType instance.\n     *\n     * @param elementType The type of the element\n     */\n    constructor(elementType: Type) {\n        super();\n        this.elementType = elementType;\n    }\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone(): Type {\n        return new OptionalType(this.elementType.clone());\n    }\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param type  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(type: Type): boolean {\n        if (!(type instanceof OptionalType)) {\n            return false;\n        }\n        return type.elementType.equals(this.elementType);\n    }\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString() {\n        if (\n            this.elementType instanceof UnionType ||\n            this.elementType instanceof IntersectionType\n        ) {\n            return `(${this.elementType.toString()})?`;\n        }\n        return `${this.elementType.toString()}?`;\n    }\n}\n"]}