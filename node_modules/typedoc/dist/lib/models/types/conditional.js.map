{"version":3,"file":"conditional.js","sourceRoot":"","sources":["../../../../src/lib/models/types/conditional.ts"],"names":[],"mappings":";;;AAAA,yCAAkC;AAElC;;;;;;;GAOG;AACH,MAAa,eAAgB,SAAQ,eAAI;IAMrC,YACW,SAAe,EACf,WAAiB,EACjB,QAAc,EACd,SAAe;QAEtB,KAAK,EAAE,CAAC;QALD,cAAS,GAAT,SAAS,CAAM;QACf,gBAAW,GAAX,WAAW,CAAM;QACjB,aAAQ,GAAR,QAAQ,CAAM;QACd,cAAS,GAAT,SAAS,CAAM;QAT1B;;WAEG;QACM,SAAI,GAAW,aAAa,CAAC;IAStC,CAAC;IAED;;;;OAIG;IACH,KAAK;QACD,OAAO,IAAI,eAAe,CACtB,IAAI,CAAC,SAAS,EACd,IAAI,CAAC,WAAW,EAChB,IAAI,CAAC,QAAQ,EACb,IAAI,CAAC,SAAS,CACjB,CAAC;IACN,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,IAAS;QACZ,IAAI,CAAC,CAAC,IAAI,YAAY,eAAe,CAAC,EAAE;YACpC,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,CACH,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YACrC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;YACzC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;YACnC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CACxC,CAAC;IACN,CAAC;IAED;;OAEG;IACH,QAAQ;QACJ,OAAO,CACH,IAAI,CAAC,SAAS;YACd,WAAW;YACX,IAAI,CAAC,WAAW;YAChB,KAAK;YACL,IAAI,CAAC,QAAQ;YACb,KAAK;YACL,IAAI,CAAC,SAAS,CACjB,CAAC;IACN,CAAC;CACJ;AA7DD,0CA6DC","sourcesContent":["import { Type } from \"./abstract\";\n\n/**\n * Represents a conditional type.\n *\n * ~~~\n * let value: C extends E ? T : F;\n * let value2: Check extends Extends ? True : False;\n * ~~~\n */\nexport class ConditionalType extends Type {\n    /**\n     * The type name identifier.\n     */\n    readonly type: string = \"conditional\";\n\n    constructor(\n        public checkType: Type,\n        public extendsType: Type,\n        public trueType: Type,\n        public falseType: Type\n    ) {\n        super();\n    }\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone(): Type {\n        return new ConditionalType(\n            this.checkType,\n            this.extendsType,\n            this.trueType,\n            this.falseType\n        );\n    }\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param type  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(type: any): boolean {\n        if (!(type instanceof ConditionalType)) {\n            return false;\n        }\n        return (\n            this.checkType.equals(type.checkType) &&\n            this.extendsType.equals(type.extendsType) &&\n            this.trueType.equals(type.trueType) &&\n            this.falseType.equals(type.falseType)\n        );\n    }\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString() {\n        return (\n            this.checkType +\n            \" extends \" +\n            this.extendsType +\n            \" ? \" +\n            this.trueType +\n            \" : \" +\n            this.falseType\n        );\n    }\n}\n"]}