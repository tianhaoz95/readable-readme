{"version":3,"file":"string-literal.js","sourceRoot":"","sources":["../../../../src/lib/models/types/string-literal.ts"],"names":[],"mappings":";;AAAA,yCAAkC;AASlC,MAAa,iBAAkB,SAAQ,eAAI;IAgBvC,YAAY,KAAa;QACrB,KAAK,EAAE,CAAC;QARH,SAAI,GAAG,eAAe,CAAC;QAS5B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;IAOD,KAAK;QACD,OAAO,IAAI,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7C,CAAC;IAQD,MAAM,CAAC,IAAuB;QAC1B,OAAO,IAAI,YAAY,iBAAiB;YACpC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC;IAClC,CAAC;IAKD,QAAQ;QACJ,OAAO,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;IAClC,CAAC;CACJ;AA/CD,8CA+CC","sourcesContent":["import { Type } from './abstract';\n\n/**\n * Represents a string literal type.\n *\n * ~~~\n * let value: \"DIV\";\n * ~~~\n */\nexport class StringLiteralType extends Type {\n    /**\n     * The string literal value.\n     */\n    value: string;\n\n    /**\n     * The type name identifier.\n     */\n    readonly type = 'stringLiteral';\n\n    /**\n     * Create a new instance of StringLiteralType.\n     *\n     * @param value The string literal value.\n     */\n    constructor(value: string) {\n        super();\n        this.value = value;\n    }\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone(): Type {\n        return new StringLiteralType(this.value);\n    }\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param type  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(type: StringLiteralType): boolean {\n        return type instanceof StringLiteralType &&\n            type.value === this.value;\n    }\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString(): string {\n        return '\"' + this.value + '\"';\n    }\n}\n"]}