{"version":3,"file":"array.js","sourceRoot":"","sources":["../../../../src/lib/models/types/array.ts"],"names":[],"mappings":";;;AAAA,yCAAkC;AAClC,iDAAkD;AAClD,mCAAoC;AAEpC;;;;;;GAMG;AACH,MAAa,SAAU,SAAQ,eAAI;IAW/B;;;;OAIG;IACH,YAAY,WAAiB;QACzB,KAAK,EAAE,CAAC;QAXZ;;WAEG;QACM,SAAI,GAAG,OAAO,CAAC;QASpB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;IAED;;;;OAIG;IACH,KAAK;QACD,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC3C,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,IAAU;QACb,IAAI,CAAC,CAAC,IAAI,YAAY,SAAS,CAAC,EAAE;YAC9B,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACrD,CAAC;IAED;;OAEG;IACH,QAAQ;QACJ,MAAM,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;QACnD,IACI,IAAI,CAAC,WAAW,YAAY,iBAAS;YACrC,IAAI,CAAC,WAAW,YAAY,+BAAgB,EAC9C;YACE,OAAO,GAAG,GAAG,cAAc,GAAG,KAAK,CAAC;SACvC;aAAM;YACH,OAAO,cAAc,GAAG,IAAI,CAAC;SAChC;IACL,CAAC;CACJ;AAzDD,8BAyDC","sourcesContent":["import { Type } from \"./abstract\";\nimport { IntersectionType } from \"./intersection\";\nimport { UnionType } from \"./union\";\n\n/**\n * Represents an array type.\n *\n * ~~~\n * let value: string[];\n * ~~~\n */\nexport class ArrayType extends Type {\n    /**\n     * The type of the array elements.\n     */\n    elementType: Type;\n\n    /**\n     * The type name identifier.\n     */\n    readonly type = \"array\";\n\n    /**\n     * Create a new TupleType instance.\n     *\n     * @param elementType  The type of the array's elements.\n     */\n    constructor(elementType: Type) {\n        super();\n        this.elementType = elementType;\n    }\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone(): Type {\n        return new ArrayType(this.elementType);\n    }\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param type  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(type: Type): boolean {\n        if (!(type instanceof ArrayType)) {\n            return false;\n        }\n        return type.elementType.equals(this.elementType);\n    }\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString() {\n        const elementTypeStr = this.elementType.toString();\n        if (\n            this.elementType instanceof UnionType ||\n            this.elementType instanceof IntersectionType\n        ) {\n            return \"(\" + elementTypeStr + \")[]\";\n        } else {\n            return elementTypeStr + \"[]\";\n        }\n    }\n}\n"]}