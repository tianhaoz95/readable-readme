{"version":3,"file":"rest.js","sourceRoot":"","sources":["../../../../src/lib/models/types/rest.ts"],"names":[],"mappings":";;;AAAA,yCAAkC;AAElC;;;;;;GAMG;AACH,MAAa,QAAS,SAAQ,eAAI;IAW9B;;;;OAIG;IACH,YAAY,WAAiB;QACzB,KAAK,EAAE,CAAC;QAXZ;;WAEG;QACM,SAAI,GAAG,MAAM,CAAC;QASnB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACnC,CAAC;IAED;;;;OAIG;IACH,KAAK;QACD,OAAO,IAAI,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC;IAClD,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,IAAU;QACb,IAAI,CAAC,CAAC,IAAI,YAAY,QAAQ,CAAC,EAAE;YAC7B,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACrD,CAAC;IAED;;OAEG;IACH,QAAQ;QACJ,OAAO,MAAM,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,EAAE,CAAC;IAC/C,CAAC;CACJ;AAjDD,4BAiDC","sourcesContent":["import { Type } from \"./abstract\";\n\n/**\n * Represents a rest type\n * ```ts\n * type Z = [1, ...2[]]\n * //           ^^^^^^\n * ```\n */\nexport class RestType extends Type {\n    /**\n     * The type of the rest array elements.\n     */\n    elementType: Type;\n\n    /**\n     * The type name identifier.\n     */\n    readonly type = \"rest\";\n\n    /**\n     * Create a new RestType instance.\n     *\n     * @param elementType The type of the array's elements.\n     */\n    constructor(elementType: Type) {\n        super();\n        this.elementType = elementType;\n    }\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone(): Type {\n        return new RestType(this.elementType.clone());\n    }\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param type  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(type: Type): boolean {\n        if (!(type instanceof RestType)) {\n            return false;\n        }\n        return type.elementType.equals(this.elementType);\n    }\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString() {\n        return `...${this.elementType.toString()}`;\n    }\n}\n"]}