{"version":3,"file":"reference.js","sourceRoot":"","sources":["../../../../src/lib/models/types/reference.ts"],"names":[],"mappings":";;AACA,yCAAkC;AASlC,MAAa,aAAc,SAAQ,eAAI;IAoDnC,YAAY,IAAY,EAAE,SAAiB,EAAE,UAAuB;QAChE,KAAK,EAAE,CAAC;QAjDH,SAAI,GAAG,WAAW,CAAC;QAkDxB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,wBAAwB,GAAG,SAAS,CAAC;QAC1C,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACjC,CAAC;IAOD,KAAK;QACD,MAAM,KAAK,GAAG,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,wBAAwB,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAC3F,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC;QACzC,OAAO,KAAK,CAAC;IACjB,CAAC;IAQD,MAAM,CAAC,KAAoB;QACvB,OAAO,KAAK,YAAY,aAAa,IAAI,CAAC,KAAK,CAAC,wBAAwB,KAAK,IAAI,CAAC,wBAAwB,IAAI,KAAK,CAAC,UAAU,KAAK,IAAI,CAAC,UAAU,CAAC,CAAC;IACxJ,CAAC;IAMD,QAAQ;QACJ,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC;QAChE,IAAI,QAAQ,GAAG,EAAE,CAAC;QAClB,IAAI,IAAI,CAAC,aAAa,EAAE;YACpB,QAAQ,IAAI,GAAG,CAAC;YAChB,QAAQ,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACrE,QAAQ,IAAI,GAAG,CAAC;SACnB;QAED,OAAO,IAAI,GAAG,QAAQ,CAAC;IAC3B,CAAC;;AA9FL,sCA+FC;AAzDU,iCAAmB,GAAG,aAAa,CAAC;AAKpC,wCAA0B,GAAG,oBAAoB,CAAC","sourcesContent":["import { Reflection } from '../reflections/abstract';\nimport { Type } from './abstract';\n\n/**\n * Represents a type that refers to another reflection like a class, interface or enum.\n *\n * ~~~\n * let value: MyClass;\n * ~~~\n */\nexport class ReferenceType extends Type {\n    /**\n     * The type name identifier.\n     */\n    readonly type = 'reference';\n\n    /**\n     * The name of the referenced type.\n     *\n     * If the symbol cannot be found cause it's not part of the documentation this\n     * can be used to represent the type.\n     */\n    name: string;\n\n    /**\n     * The type arguments of this reference.\n     */\n    typeArguments?: Type[];\n\n    /**\n     * The fully qualified name of the referenced type as returned from the TypeScript compiler.\n     *\n     * After the all reflections have been generated this is can be used to lookup the\n     * relevant reflection with [[ProjectReflection.getSymbolFromFQN]]. This property used to be\n     * the internal ts.Symbol.id, but symbol IDs are not stable when dealing with imports.\n     */\n    symbolFullyQualifiedName: string;\n\n    /**\n     * The resolved reflection.\n     *\n     * The [[TypePlugin]] will try to set this property in the resolving phase.\n     */\n    reflection?: Reflection;\n\n    /**\n     * Special symbol FQN noting that the reference of a ReferenceType was known when creating the type.\n     */\n    static SYMBOL_FQN_RESOLVED = '///resolved';\n\n    /**\n     * Special symbol ID noting that the reference should be resolved by the type name.\n     */\n    static SYMBOL_FQN_RESOLVE_BY_NAME = '///resolve_by_name';\n\n    /**\n     * Create a new instance of ReferenceType.\n     *\n     * @param name        The name of the referenced type.\n     * @param symbolID    The symbol id of the referenced type as returned from the TypeScript compiler.\n     * @param reflection  The resolved reflection if already known.\n     */\n    constructor(name: string, symbolFQN: string, reflection?: Reflection) {\n        super();\n        this.name = name;\n        this.symbolFullyQualifiedName = symbolFQN;\n        this.reflection = reflection;\n    }\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone(): Type {\n        const clone = new ReferenceType(this.name, this.symbolFullyQualifiedName, this.reflection);\n        clone.typeArguments = this.typeArguments;\n        return clone;\n    }\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param other  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(other: ReferenceType): boolean {\n        return other instanceof ReferenceType && (other.symbolFullyQualifiedName === this.symbolFullyQualifiedName || other.reflection === this.reflection);\n    }\n\n    /**\n     * Return a string representation of this type.\n     * @example EventEmitter<any>\n     */\n    toString() {\n        const name = this.reflection ? this.reflection.name : this.name;\n        let typeArgs = '';\n        if (this.typeArguments) {\n            typeArgs += '<';\n            typeArgs += this.typeArguments.map(arg => arg.toString()).join(', ');\n            typeArgs += '>';\n        }\n\n        return name + typeArgs;\n    }\n}\n"]}