{"version":3,"file":"union.js","sourceRoot":"","sources":["../../../../src/lib/models/types/union.ts"],"names":[],"mappings":";;;AAAA,yCAAkC;AAClC,2CAA4C;AAC5C,uCAAwC;AAExC;;;;;;GAMG;AACH,MAAa,SAAU,SAAQ,eAAI;IAW/B;;;;OAIG;IACH,YAAY,KAAa;QACrB,KAAK,EAAE,CAAC;QAXZ;;WAEG;QACM,SAAI,GAAW,OAAO,CAAC;QAS5B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,SAAS,EAAE,CAAC;IACrB,CAAC;IAED;;;;OAIG;IACH,KAAK;QACD,OAAO,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,IAAe;QAClB,IAAI,CAAC,CAAC,IAAI,YAAY,SAAS,CAAC,EAAE;YAC9B,OAAO,KAAK,CAAC;SAChB;QACD,OAAO,eAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC1D,CAAC;IAED;;OAEG;IACH,QAAQ;QACJ,MAAM,KAAK,GAAa,EAAE,CAAC;QAC3B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;YAC3B,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;QAEH,OAAO,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC7B,CAAC;IAEO,SAAS;QACb,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CACzC,CAAC,CAAC,MAAM,CAAC,IAAI,qBAAW,CAAC,IAAI,CAAC,CAAC,CAClC,CAAC;QACF,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAC1C,CAAC,CAAC,MAAM,CAAC,IAAI,qBAAW,CAAC,KAAK,CAAC,CAAC,CACnC,CAAC;QAEF,IAAI,SAAS,KAAK,CAAC,CAAC,IAAI,UAAU,KAAK,CAAC,CAAC,EAAE;YACvC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;YACtD,IAAI,CAAC,KAAK,CAAC,MAAM,CACb,IAAI,CAAC,GAAG,CAAC,SAAS,EAAE,UAAU,CAAC,EAC/B,CAAC,EACD,IAAI,yBAAa,CAAC,SAAS,CAAC,CAC/B,CAAC;SACL;IACL,CAAC;CACJ;AAzED,8BAyEC","sourcesContent":["import { Type } from \"./abstract\";\nimport { IntrinsicType } from \"./intrinsic\";\nimport { LiteralType } from \"./literal\";\n\n/**\n * Represents an union type.\n *\n * ~~~\n * let value: string | string[];\n * ~~~\n */\nexport class UnionType extends Type {\n    /**\n     * The types this union consists of.\n     */\n    types: Type[];\n\n    /**\n     * The type name identifier.\n     */\n    readonly type: string = \"union\";\n\n    /**\n     * Create a new TupleType instance.\n     *\n     * @param types  The types this union consists of.\n     */\n    constructor(types: Type[]) {\n        super();\n        this.types = types;\n        this.normalize();\n    }\n\n    /**\n     * Clone this type.\n     *\n     * @return A clone of this type.\n     */\n    clone(): Type {\n        return new UnionType(this.types);\n    }\n\n    /**\n     * Test whether this type equals the given type.\n     *\n     * @param type  The type that should be checked for equality.\n     * @returns TRUE if the given type equals this type, FALSE otherwise.\n     */\n    equals(type: UnionType): boolean {\n        if (!(type instanceof UnionType)) {\n            return false;\n        }\n        return Type.isTypeListSimilar(type.types, this.types);\n    }\n\n    /**\n     * Return a string representation of this type.\n     */\n    toString() {\n        const names: string[] = [];\n        this.types.forEach((element) => {\n            names.push(element.toString());\n        });\n\n        return names.join(\" | \");\n    }\n\n    private normalize() {\n        const trueIndex = this.types.findIndex((t) =>\n            t.equals(new LiteralType(true))\n        );\n        const falseIndex = this.types.findIndex((t) =>\n            t.equals(new LiteralType(false))\n        );\n\n        if (trueIndex !== -1 && falseIndex !== -1) {\n            this.types.splice(Math.max(trueIndex, falseIndex), 1);\n            this.types.splice(\n                Math.min(trueIndex, falseIndex),\n                1,\n                new IntrinsicType(\"boolean\")\n            );\n        }\n    }\n}\n"]}