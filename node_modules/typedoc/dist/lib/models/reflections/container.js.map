{"version":3,"file":"container.js","sourceRoot":"","sources":["../../../../src/lib/models/reflections/container.ts"],"names":[],"mappings":";;AAAA,yCAA4F;AAI5F,mCAAiC;AAEjC,MAAa,mBAAoB,SAAQ,qBAAU;IAsB/C,iBAAiB,CAAC,IAAoB;QAClC,OAAO,CAAC,IAAI,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;IACrE,CAAC;IAUD,QAAQ,CAAC,QAA0B;QAC/B,KAAK,MAAM,KAAK,IAAI,gBAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;YACxC,IAAI,QAAQ,CAAC,KAAK,EAAE,2BAAgB,CAAC,QAAQ,CAAC,KAAK,KAAK,EAAE;gBACtD,OAAO;aACV;SACJ;IACL,CAAC;CACJ;AAzCD,kDAyCC","sourcesContent":["import { Reflection, ReflectionKind, TraverseCallback, TraverseProperty } from './abstract';\nimport { ReflectionCategory } from '../ReflectionCategory';\nimport { ReflectionGroup } from '../ReflectionGroup';\nimport { DeclarationReflection } from './declaration';\nimport { toArray } from 'lodash';\n\nexport class ContainerReflection extends Reflection {\n    /**\n     * The children of this reflection.\n     */\n    children?: DeclarationReflection[];\n\n    /**\n     * All children grouped by their kind.\n     */\n    groups?: ReflectionGroup[];\n\n    /**\n     * All children grouped by their category.\n     */\n    categories?: ReflectionCategory[];\n\n    /**\n     * Return a list of all children of a certain kind.\n     *\n     * @param kind  The desired kind of children.\n     * @returns     An array containing all children with the desired kind.\n     */\n    getChildrenByKind(kind: ReflectionKind): DeclarationReflection[] {\n        return (this.children || []).filter(child => child.kindOf(kind));\n    }\n\n    /**\n     * Traverse all potential child reflections of this reflection.\n     *\n     * The given callback will be invoked for all children, signatures and type parameters\n     * attached to this reflection.\n     *\n     * @param callback  The callback function that should be applied for each child reflection.\n     */\n    traverse(callback: TraverseCallback) {\n        for (const child of toArray(this.children)) {\n            if (callback(child, TraverseProperty.Children) === false) {\n                return;\n            }\n        }\n    }\n}\n"]}