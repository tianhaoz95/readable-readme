{"version":3,"file":"signature.js","sourceRoot":"","sources":["../../../../src/lib/models/reflections/signature.ts"],"names":[],"mappings":";;;AAAA,0CAAsD;AACtD,yCAMoB;AAIpB,mCAAiC;AAEjC,MAAa,mBACT,SAAQ,qBAAU;IA+BlB;;OAEG;IACH,iBAAiB;QACb,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAClB,OAAO,EAAE,CAAC;SACb;QACD,SAAS,YAAY,CAAI,CAAgB;YACrC,OAAO,CAAC,CAAC,CAAC,CAAC;QACf,CAAC;QACD,OAAO,IAAI,CAAC,UAAU;aACjB,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC;aAClC,MAAM,CAAC,YAAY,CAAC,CAAC;IAC9B,CAAC;IAED;;;;;;;OAOG;IACH,QAAQ,CAAC,QAA0B;QAC/B,IAAI,IAAI,CAAC,IAAI,YAAY,sBAAc,EAAE;YACrC,IACI,QAAQ,CACJ,IAAI,CAAC,IAAI,CAAC,WAAW,EACrB,2BAAgB,CAAC,WAAW,CAC/B,KAAK,KAAK,EACb;gBACE,OAAO;aACV;SACJ;QAED,KAAK,MAAM,SAAS,IAAI,gBAAO,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE;YAClD,IAAI,QAAQ,CAAC,SAAS,EAAE,2BAAgB,CAAC,aAAa,CAAC,KAAK,KAAK,EAAE;gBAC/D,OAAO;aACV;SACJ;QAED,KAAK,MAAM,SAAS,IAAI,gBAAO,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;YAC9C,IAAI,QAAQ,CAAC,SAAS,EAAE,2BAAgB,CAAC,UAAU,CAAC,KAAK,KAAK,EAAE;gBAC5D,OAAO;aACV;SACJ;QAED,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC7B,CAAC;IAED;;OAEG;IACH,QAAQ;QACJ,IAAI,MAAM,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;QAE9B,IAAI,IAAI,CAAC,cAAc,EAAE;YACrB,MAAM,UAAU,GAAa,EAAE,CAAC;YAChC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE,CACtC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAClC,CAAC;YACF,MAAM,IAAI,GAAG,GAAG,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;SAC/C;QAED,IAAI,IAAI,CAAC,IAAI,EAAE;YACX,MAAM,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;SACxC;QAED,OAAO,MAAM,CAAC;IAClB,CAAC;CACJ;AAtGD,kDAsGC","sourcesContent":["import { Type, ReflectionType } from \"../types/index\";\nimport {\n    Reflection,\n    TypeContainer,\n    TypeParameterContainer,\n    TraverseProperty,\n    TraverseCallback,\n} from \"./abstract\";\nimport { ContainerReflection } from \"./container\";\nimport { ParameterReflection } from \"./parameter\";\nimport { TypeParameterReflection } from \"./type-parameter\";\nimport { toArray } from \"lodash\";\n\nexport class SignatureReflection\n    extends Reflection\n    implements TypeContainer, TypeParameterContainer {\n    parent?: ContainerReflection;\n\n    parameters?: ParameterReflection[];\n\n    typeParameters?: TypeParameterReflection[];\n\n    type?: Type;\n\n    /**\n     * A type that points to the reflection that has been overwritten by this reflection.\n     *\n     * Applies to interface and class members.\n     */\n    overwrites?: Type;\n\n    /**\n     * A type that points to the reflection this reflection has been inherited from.\n     *\n     * Applies to interface and class members.\n     */\n    inheritedFrom?: Type;\n\n    /**\n     * A type that points to the reflection this reflection is the implementation of.\n     *\n     * Applies to class members.\n     */\n    implementationOf?: Type;\n\n    /**\n     * Return an array of the parameter types.\n     */\n    getParameterTypes(): Type[] {\n        if (!this.parameters) {\n            return [];\n        }\n        function notUndefined<T>(t: T | undefined): t is T {\n            return !!t;\n        }\n        return this.parameters\n            .map((parameter) => parameter.type)\n            .filter(notUndefined);\n    }\n\n    /**\n     * Traverse all potential child reflections of this reflection.\n     *\n     * The given callback will be invoked for all children, signatures and type parameters\n     * attached to this reflection.\n     *\n     * @param callback  The callback function that should be applied for each child reflection.\n     */\n    traverse(callback: TraverseCallback) {\n        if (this.type instanceof ReflectionType) {\n            if (\n                callback(\n                    this.type.declaration,\n                    TraverseProperty.TypeLiteral\n                ) === false\n            ) {\n                return;\n            }\n        }\n\n        for (const parameter of toArray(this.typeParameters)) {\n            if (callback(parameter, TraverseProperty.TypeParameter) === false) {\n                return;\n            }\n        }\n\n        for (const parameter of toArray(this.parameters)) {\n            if (callback(parameter, TraverseProperty.Parameters) === false) {\n                return;\n            }\n        }\n\n        super.traverse(callback);\n    }\n\n    /**\n     * Return a string representation of this reflection.\n     */\n    toString(): string {\n        let result = super.toString();\n\n        if (this.typeParameters) {\n            const parameters: string[] = [];\n            this.typeParameters.forEach((parameter) =>\n                parameters.push(parameter.name)\n            );\n            result += \"<\" + parameters.join(\", \") + \">\";\n        }\n\n        if (this.type) {\n            result += \":\" + this.type.toString();\n        }\n\n        return result;\n    }\n}\n"]}