{"version":3,"file":"abstract.js","sourceRoot":"","sources":["../../../../src/lib/models/reflections/abstract.ts"],"names":[],"mappings":";;AAIA,mCAA8C;AAkB9C,IAAI,aAAa,GAAG,CAAC,CAAC;AAOtB,SAAgB,iBAAiB;IAC7B,aAAa,GAAG,CAAC,CAAC;AACtB,CAAC;AAFD,8CAEC;AAKD,IAAY,cAmCX;AAnCD,WAAY,cAAc;IACtB,uDAAU,CAAA;IACV,uDAAe,CAAA;IACf,6DAAkB,CAAA;IAClB,mDAAa,CAAA;IACb,gEAAmB,CAAA;IACnB,4DAAiB,CAAA;IACjB,4DAAiB,CAAA;IACjB,uDAAc,CAAA;IACd,+DAAkB,CAAA;IAClB,mEAAoB,CAAA;IACpB,8DAAkB,CAAA;IAClB,0DAAgB,CAAA;IAChB,wEAAuB,CAAA;IACvB,0EAAwB,CAAA;IACxB,uFAA8B,CAAA;IAC9B,iEAAmB,CAAA;IACnB,qEAAqB,CAAA;IACrB,0EAAuB,CAAA;IACvB,gEAAkB,CAAA;IAClB,wEAAsB,CAAA;IACtB,yEAAsB,CAAA;IACtB,2EAAuB,CAAA;IACvB,mEAAmB,CAAA;IACnB,2DAAe,CAAA;IACf,oEAAmB,CAAA;IAEnB,6EAAoC,CAAA;IACpC,kFAAwC,CAAA;IACxC,8EAAmD,CAAA;IACnD,uEAAgE,CAAA;IAChE,2EAAmG,CAAA;IACnG,+DAA+B,CAAA;IAC/B,iEAA8D,CAAA;IAC9D,mEAA+C,CAAA;AACnD,CAAC,EAnCW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAmCzB;AAED,IAAY,cAiBX;AAjBD,WAAY,cAAc;IACtB,mDAAQ,CAAA;IACR,yDAAW,CAAA;IACX,6DAAa,CAAA;IACb,uDAAU,CAAA;IACV,uDAAU,CAAA;IACV,4DAAa,CAAA;IACb,4EAAqB,CAAA;IACrB,4DAAa,CAAA;IACb,6DAAc,CAAA;IACd,qEAAkB,CAAA;IAClB,qDAAU,CAAA;IACV,oFAA0B,CAAA;IAC1B,8DAAe,CAAA;IACf,wDAAY,CAAA;IACZ,oDAAU,CAAA;IACV,+DAAgB,CAAA;AACpB,CAAC,EAjBW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAiBzB;AAED,MAAM,aAAa,GAAqB;IACpC,cAAc,CAAC,OAAO;IACtB,cAAc,CAAC,SAAS;IACxB,cAAc,CAAC,MAAM;IACrB,cAAc,CAAC,gBAAgB;IAC/B,cAAc,CAAC,QAAQ;IACvB,cAAc,CAAC,YAAY;IAC3B,cAAc,CAAC,IAAI;IACnB,cAAc,CAAC,QAAQ;IACvB,cAAc,CAAC,GAAG;IAClB,cAAc,CAAC,KAAK;IACpB,cAAc,CAAC,QAAQ;CAC1B,CAAC;AAKF,MAAa,eAAgB,SAAQ,KAAa;IAAlD;;QACY,UAAK,GAAG,cAAc,CAAC,IAAI,CAAC;IAiJxC,CAAC;IA/IG,OAAO,CAAC,IAAoB;QACxB,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;IAKD,IAAI,SAAS;QACT,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;IAChD,CAAC;IAKD,IAAI,WAAW;QACX,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;IAClD,CAAC;IAKD,IAAI,QAAQ;QACR,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IAC/C,CAAC;IAKD,IAAI,QAAQ;QACR,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;IAC/C,CAAC;IAgBD,IAAI,UAAU;QACV,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IACjD,CAAC;IAKD,IAAI,UAAU;QACV,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IACjD,CAAC;IAOD,IAAI,UAAU;QACV,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IACjD,CAAC;IAKD,IAAI,MAAM;QACN,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IAC7C,CAAC;IAED,IAAI,mBAAmB;QACnB,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,gBAAgB,CAAC,CAAC;IACzD,CAAC;IAED,IAAI,qBAAqB;QACrB,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,mBAAmB,CAAC,CAAC;IAC5D,CAAC;IAED,IAAI,UAAU;QACV,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IACjD,CAAC;IAED,IAAI,OAAO;QACP,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;IAC9C,CAAC;IAED,IAAI,KAAK;QACL,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;IAC5C,CAAC;IAED,IAAI,UAAU;QACV,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;IACjD,CAAC;IAED,OAAO,CAAC,IAAoB,EAAE,GAAY;QACtC,QAAQ,IAAI,EAAE;YACV,KAAK,cAAc,CAAC,OAAO;gBACvB,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;gBAChD,IAAI,GAAG,EAAE;oBACL,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;oBAC9C,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;iBAC9C;gBACD,MAAM;YACV,KAAK,cAAc,CAAC,SAAS;gBACzB,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;gBAClD,IAAI,GAAG,EAAE;oBACL,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;oBAC5C,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;iBAC9C;gBACD,MAAM;YACV,KAAK,cAAc,CAAC,MAAM;gBACtB,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;gBAC/C,IAAI,GAAG,EAAE;oBACL,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;oBAC5C,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;iBACjD;gBACD,MAAM;YACV,KAAK,cAAc,CAAC,KAAK,CAAC;YAC1B,KAAK,cAAc,CAAC,GAAG;gBACnB,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;gBAC9B,IAAI,CAAC,aAAa,CAAC,CAAC,cAAc,CAAC,GAAG,GAAG,cAAc,CAAC,KAAK,CAAC,GAAG,IAAI,EAAE,CAAC,GAAG,CAAC,CAAC;YACjF;gBACI,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;SACrC;IACL,CAAC;IAEO,aAAa,CAAC,IAAoB,EAAE,GAAY;QACpD,MAAM,IAAI,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;QACjG,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YAC5B,IAAI,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;gBAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC;aACtC;YACD,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC;SACtB;aAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACnC,IAAI,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;gBAC9B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACnB;YACD,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC;SACtB;IACL,CAAC;CACJ;AAlJD,0CAkJC;AAcD,IAAY,gBASX;AATD,WAAY,gBAAgB;IACxB,+DAAQ,CAAA;IACR,mEAAU,CAAA;IACV,qEAAW,CAAA;IACX,yEAAa,CAAA;IACb,mEAAU,CAAA;IACV,2EAAc,CAAA;IACd,uEAAY,CAAA;IACZ,uEAAY,CAAA;AAChB,CAAC,EATW,gBAAgB,GAAhB,wBAAgB,KAAhB,wBAAgB,QAS3B;AA0CD,MAAsB,UAAU;IA4F5B,YAAY,IAAY,EAAE,IAAoB,EAAE,MAAmB;QAlEnE,UAAK,GAAoB,IAAI,eAAe,EAAE,CAAC;QAmE3C,IAAI,CAAC,EAAE,GAAO,aAAa,EAAE,CAAC;QAC9B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,IAAI,GAAK,IAAI,CAAC;QACnB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;QACzB,IAAI,CAAC,IAAI,GAAK,IAAI,CAAC;IACvB,CAAC;IAKD,MAAM,CAAC,IAAuC;QAC1C,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACtD,OAAO,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IAC5D,CAAC;IAUD,WAAW,CAAC,YAAoB,GAAG;QAC/B,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE;YACzC,OAAO,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC;SACrE;aAAM;YACH,OAAO,IAAI,CAAC,IAAI,CAAC;SACpB;IACL,CAAC;IAKD,OAAO,CAAC,IAAoB,EAAE,QAAiB,IAAI;QAC/C,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;IACpC,CAAC;IAKD,QAAQ;QACJ,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YACd,IAAI,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;YAChE,IAAI,KAAK,KAAK,EAAE,EAAE;gBACd,KAAK,GAAG,aAAa,GAAG,IAAI,CAAC,EAAE,CAAC;aACnC;YAED,IAAI,MAAM,GAAgB,IAAI,CAAC;YAC/B,OAAO,MAAM,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE;gBAC1E,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;aAC1B;YAED,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;gBAClB,MAAM,CAAC,QAAQ,GAAG,EAAE,CAAC;aACxB;YACD,IAAI,MAAM,GAAG,EAAE,EAAE,KAAK,GAAG,CAAC,CAAC;YAC3B,OAAO,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAK,GAAG,MAAM,CAAC,EAAE;gBAC7C,MAAM,GAAG,GAAG,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;aACvC;YAED,KAAK,IAAI,MAAM,CAAC;YAChB,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC5B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;SACvB;QAED,OAAO,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC;IAOD,UAAU;QACN,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;IACrE,CAAC;IAED,iBAAiB;QACb,OAAO,KAAK,CAAC;IACjB,CAAC;IAQD,cAAc,CAAC,GAAsB;QACjC,MAAM,KAAK,GAAa,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,2BAAmB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QACjF,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACtB,IAAI,MAA8B,CAAC;QAEnC,IAAI,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE,EAAE;YACpB,IAAI,KAAK,CAAC,IAAI,KAAK,IAAI,EAAE;gBACrB,IAAI,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE;oBACnB,MAAM,GAAG,KAAK,CAAC;iBAClB;qBAAM;oBACH,MAAM,GAAG,KAAK,CAAC,cAAc,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;iBACjD;gBACD,OAAO,KAAK,CAAC;aAChB;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IAClB,CAAC;IAKD,SAAS;QACL,OAAO,KAAK,CAAC;IACjB,CAAC;IAOD,oBAAoB,CAAC,GAAsB;QACvC,MAAM,KAAK,GAAa,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,2BAAmB,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;QAEjF,MAAM,UAAU,GAAG,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;QAC9C,IAAI,UAAU,EAAE;YACZ,OAAO,UAAU,CAAC;SACrB;aAAM,IAAI,IAAI,CAAC,MAAM,EAAE;YACpB,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;SAClD;IACL,CAAC;IAUD,QAAQ,CAAC,QAA0B,IAAI,CAAC;IAKxC,QAAQ;QACJ,OAAO,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;IACvD,CAAC;IAOD,iBAAiB,CAAC,SAAiB,EAAE;QACjC,MAAM,KAAK,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;QAEzC,MAAM,IAAI,IAAI,CAAC;QACf,IAAI,CAAC,QAAQ,CAAC,CAAC,KAAK,EAAE,EAAE;YACpB,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;CACJ;AA/PD,gCA+PC","sourcesContent":["import { SourceReference } from '../sources/file';\nimport { Type } from '../types/index';\nimport { Comment } from '../comments/comment';\nimport { TypeParameterReflection } from './type-parameter';\nimport { splitUnquotedString } from './utils';\nimport { ProjectReflection } from './project';\n\n/**\n * Holds all data models used by TypeDoc.\n *\n * The [[BaseReflection]] is base class of all reflection models. The subclass [[ProjectReflection]]\n * serves as the root container for the current project while [[DeclarationReflection]] instances\n * form the structure of the project. Most of the other classes in this namespace are referenced by this\n * two base classes.\n *\n * The models [[NavigationItem]] and [[UrlMapping]] are special as they are only used by the [[Renderer]]\n * while creating the final output.\n */\n\n/**\n * Current reflection id.\n */\nlet REFLECTION_ID = 0;\n\n/**\n * Reset the reflection id.\n *\n * Used by the test cases to ensure the reflection ids won't change between runs.\n */\nexport function resetReflectionID() {\n    REFLECTION_ID = 0;\n}\n\n/**\n * Defines the available reflection kinds.\n */\nexport enum ReflectionKind {\n    Global = 0,\n    Module = 1 << 0,\n    Namespace = 1 << 1,\n    Enum = 1 << 2,\n    EnumMember = 1 << 4,\n    Variable = 1 << 5,\n    Function = 1 << 6,\n    Class = 1 << 7,\n    Interface = 1 << 8,\n    Constructor = 1 << 9,\n    Property = 1 << 10,\n    Method = 1 << 11,\n    CallSignature = 1 << 12,\n    IndexSignature = 1 << 13,\n    ConstructorSignature = 1 << 14,\n    Parameter = 1 << 15,\n    TypeLiteral = 1 << 16,\n    TypeParameter = 1 << 17,\n    Accessor = 1 << 18,\n    GetSignature = 1 << 19,\n    SetSignature = 1 << 20,\n    ObjectLiteral = 1 << 21,\n    TypeAlias = 1 << 22,\n    Event = 1 << 23,\n    Reference = 1 << 24,\n\n    ClassOrInterface = Class | Interface,\n    VariableOrProperty = Variable | Property,\n    FunctionOrMethod = ReflectionKind.Function | Method,\n    ClassMember = Accessor | Constructor | Method | Property | Event,\n    SomeSignature = CallSignature | IndexSignature | ConstructorSignature | GetSignature | SetSignature,\n    SomeModule = Namespace | Module,\n    SomeType = Interface | TypeLiteral | TypeParameter | TypeAlias,\n    SomeValue = Variable | Function | ObjectLiteral\n}\n\nexport enum ReflectionFlag {\n    None = 0,\n    Private = 1,\n    Protected = 2,\n    Public = 4,\n    Static = 8,\n    Exported = 16,\n    ExportAssignment = 32,\n    External = 64,\n    Optional = 128,\n    DefaultValue = 256,\n    Rest = 512,\n    ConstructorProperty = 1024,\n    Abstract = 2048,\n    Const = 4096,\n    Let = 8192,\n    Readonly = 16384\n}\n\nconst relevantFlags: ReflectionFlag[] = [\n    ReflectionFlag.Private,\n    ReflectionFlag.Protected,\n    ReflectionFlag.Static,\n    ReflectionFlag.ExportAssignment,\n    ReflectionFlag.Optional,\n    ReflectionFlag.DefaultValue,\n    ReflectionFlag.Rest,\n    ReflectionFlag.Abstract,\n    ReflectionFlag.Let,\n    ReflectionFlag.Const,\n    ReflectionFlag.Readonly\n];\n\n/**\n * This must extend Array in order to work with Handlebar's each helper.\n */\nexport class ReflectionFlags extends Array<string> {\n    private flags = ReflectionFlag.None;\n\n    hasFlag(flag: ReflectionFlag) {\n        return (flag & this.flags) !== 0;\n    }\n\n    /**\n     * Is this a private member?\n     */\n    get isPrivate(): boolean {\n        return this.hasFlag(ReflectionFlag.Private);\n    }\n\n    /**\n     * Is this a protected member?\n     */\n    get isProtected(): boolean {\n        return this.hasFlag(ReflectionFlag.Protected);\n    }\n\n    /**\n     * Is this a public member?\n     */\n    get isPublic(): boolean {\n        return this.hasFlag(ReflectionFlag.Public);\n    }\n\n    /**\n     * Is this a static member?\n     */\n    get isStatic(): boolean {\n        return this.hasFlag(ReflectionFlag.Static);\n    }\n\n    /**\n     * True if the reflection is exported from its containing declaration. Note that if a file\n     * has no imports or exports, then TS assumes that the file is in a global scope and *all*\n     * declarations are exported.\n     * ```ts\n     * // a.ts\n     * namespace A { // isExported = false\n     *   export const b = 1 // isExported = true, even though the container is false.\n     * }\n     * export const b = 2 // isExported = true\n     * // b.ts\n     * const c = 1 // isExported = true, no imports/exports\n     * ```\n     */\n    get isExported(): boolean {\n        return this.hasFlag(ReflectionFlag.Exported);\n    }\n\n    /**\n     * Is this a declaration from an external document?\n     */\n    get isExternal(): boolean {\n        return this.hasFlag(ReflectionFlag.External);\n    }\n\n    /**\n     * Whether this reflection is an optional component or not.\n     *\n     * Applies to function parameters and object members.\n     */\n    get isOptional(): boolean {\n        return this.hasFlag(ReflectionFlag.Optional);\n    }\n\n    /**\n     * Whether it's a rest parameter, like `foo(...params);`.\n     */\n    get isRest(): boolean {\n        return this.hasFlag(ReflectionFlag.Rest);\n    }\n\n    get hasExportAssignment(): boolean {\n        return this.hasFlag(ReflectionFlag.ExportAssignment);\n    }\n\n    get isConstructorProperty(): boolean {\n        return this.hasFlag(ReflectionFlag.ConstructorProperty);\n    }\n\n    get isAbstract(): boolean {\n        return this.hasFlag(ReflectionFlag.Abstract);\n    }\n\n    get isConst() {\n        return this.hasFlag(ReflectionFlag.Const);\n    }\n\n    get isLet() {\n        return this.hasFlag(ReflectionFlag.Let);\n    }\n\n    get isReadonly() {\n        return this.hasFlag(ReflectionFlag.Readonly);\n    }\n\n    setFlag(flag: ReflectionFlag, set: boolean) {\n        switch (flag) {\n            case ReflectionFlag.Private:\n                this.setSingleFlag(ReflectionFlag.Private, set);\n                if (set) {\n                    this.setFlag(ReflectionFlag.Protected, false);\n                    this.setFlag(ReflectionFlag.Public, false);\n                }\n                break;\n            case ReflectionFlag.Protected:\n                this.setSingleFlag(ReflectionFlag.Protected, set);\n                if (set) {\n                    this.setFlag(ReflectionFlag.Private, false);\n                    this.setFlag(ReflectionFlag.Public, false);\n                }\n                break;\n            case ReflectionFlag.Public:\n                this.setSingleFlag(ReflectionFlag.Public, set);\n                if (set) {\n                    this.setFlag(ReflectionFlag.Private, false);\n                    this.setFlag(ReflectionFlag.Protected, false);\n                }\n                break;\n            case ReflectionFlag.Const:\n            case ReflectionFlag.Let:\n                this.setSingleFlag(flag, set);\n                this.setSingleFlag((ReflectionFlag.Let | ReflectionFlag.Const) ^ flag, !set);\n            default:\n                this.setSingleFlag(flag, set);\n        }\n    }\n\n    private setSingleFlag(flag: ReflectionFlag, set: boolean) {\n        const name = ReflectionFlag[flag].replace(/(.)([A-Z])/g, (m, a, b) => a + ' ' + b.toLowerCase());\n        if (!set && this.hasFlag(flag)) {\n            if (relevantFlags.includes(flag)) {\n                this.splice(this.indexOf(name), 1);\n            }\n            this.flags ^= flag;\n        } else if (set && !this.hasFlag(flag)) {\n            if (relevantFlags.includes(flag)) {\n                this.push(name);\n            }\n            this.flags |= flag;\n        }\n    }\n}\n\nexport interface DefaultValueContainer extends Reflection {\n    defaultValue?: string;\n}\n\nexport interface TypeContainer extends Reflection {\n    type?: Type;\n}\n\nexport interface TypeParameterContainer extends Reflection {\n    typeParameters?: TypeParameterReflection[];\n}\n\nexport enum TraverseProperty {\n    Children,\n    Parameters,\n    TypeLiteral,\n    TypeParameter,\n    Signatures,\n    IndexSignature,\n    GetSignature,\n    SetSignature\n}\n\nexport interface TraverseCallback {\n    /**\n     * May return false to bail out of any further iteration. To preserve backwards compatibility, if\n     * a function returns undefined, iteration must continue.\n     */\n    (reflection: Reflection, property: TraverseProperty): boolean | void;\n}\n\n/**\n * Defines the usage of a decorator.\n */\nexport interface Decorator {\n    /**\n     * The name of the decorator being applied.\n     */\n    name: string;\n\n    /**\n     * The type declaring the decorator.\n     * Usually a ReferenceType instance pointing to the decorator function.\n     */\n    type?: Type;\n\n    /**\n     * A named map of arguments the decorator is applied with.\n     */\n    arguments?: any;\n}\n\n/**\n * Base class for all reflection classes.\n *\n * While generating a documentation, TypeDoc generates an instance of [[ProjectReflection]]\n * as the root for all reflections within the project. All other reflections are represented\n * by the [[DeclarationReflection]] class.\n *\n * This base class exposes the basic properties one may use to traverse the reflection tree.\n * You can use the [[children]] and [[parent]] properties to walk the tree. The [[groups]] property\n * contains a list of all children grouped and sorted for being rendered.\n */\nexport abstract class Reflection {\n    /**\n     * Unique id of this reflection.\n     */\n    id: number;\n\n    /**\n     * The symbol name of this reflection.\n     */\n    name: string;\n\n    /**\n     * The original name of the TypeScript declaration.\n     */\n    originalName: string;\n\n    /**\n     * The kind of this reflection.\n     */\n    kind: ReflectionKind;\n\n    /**\n     * The human readable string representation of the kind of this reflection.\n     */\n    kindString?: string;\n\n    flags: ReflectionFlags = new ReflectionFlags();\n\n    /**\n     * The reflection this reflection is a child of.\n     */\n    parent?: Reflection;\n\n    /**\n     * The parsed documentation comment attached to this reflection.\n     */\n    comment?: Comment;\n\n    /**\n     * A list of all source files that contributed to this reflection.\n     */\n    sources?: SourceReference[];\n\n    /**\n     * A list of all decorators attached to this reflection.\n     */\n    decorators?: Decorator[];\n\n    /**\n     * A list of all types that are decorated by this reflection.\n     */\n    decorates?: Type[];\n\n    /**\n     * The url of this reflection in the generated documentation.\n     * TODO: Reflections shouldn't know urls exist. Move this to a serializer.\n     */\n    url?: string;\n\n    /**\n     * The name of the anchor of this child.\n     * TODO: Reflections shouldn't know anchors exist. Move this to a serializer.\n     */\n    anchor?: string;\n\n    /**\n     * Is the url pointing to an individual document?\n     *\n     * When FALSE, the url points to an anchor tag on a page of a different reflection.\n     * TODO: Reflections shouldn't know how they are rendered. Move this to the correct serializer.\n     */\n    hasOwnDocument?: boolean;\n\n    /**\n     * A list of generated css classes that should be applied to representations of this\n     * reflection in the generated markup.\n     * TODO: Reflections shouldn't know about CSS. Move this property to the correct serializer.\n     */\n    cssClasses?: string;\n\n    /**\n     * Url safe alias for this reflection.\n     *\n     * @see [[BaseReflection.getAlias]]\n     */\n    private _alias?: string;\n\n    private _aliases?: string[];\n\n    /**\n     * Create a new BaseReflection instance.\n     */\n    constructor(name: string, kind: ReflectionKind, parent?: Reflection) {\n        this.id     = REFLECTION_ID++;\n        this.parent = parent;\n        this.name   = name;\n        this.originalName = name;\n        this.kind   = kind;\n    }\n\n    /**\n     * Test whether this reflection is of the given kind.\n     */\n    kindOf(kind: ReflectionKind | ReflectionKind[]): boolean {\n        const kindArray = Array.isArray(kind) ? kind : [kind];\n        return kindArray.some(kind => (this.kind & kind) !== 0);\n    }\n\n    /**\n     * Return the full name of this reflection.\n     *\n     * The full name contains the name of this reflection and the names of all parent reflections.\n     *\n     * @param separator  Separator used to join the names of the reflections.\n     * @returns The full name of this reflection.\n     */\n    getFullName(separator: string = '.'): string {\n        if (this.parent && !this.parent.isProject()) {\n            return this.parent.getFullName(separator) + separator + this.name;\n        } else {\n            return this.name;\n        }\n    }\n\n    /**\n     * Set a flag on this reflection.\n     */\n    setFlag(flag: ReflectionFlag, value: boolean = true) {\n        this.flags.setFlag(flag, value);\n    }\n\n    /**\n     * Return an url safe alias for this reflection.\n     */\n    getAlias(): string {\n        if (!this._alias) {\n            let alias = this.name.replace(/[^a-z0-9]/gi, '_').toLowerCase();\n            if (alias === '') {\n                alias = 'reflection-' + this.id;\n            }\n\n            let target = <Reflection> this;\n            while (target.parent && !target.parent.isProject() && !target.hasOwnDocument) {\n                target = target.parent;\n            }\n\n            if (!target._aliases) {\n                target._aliases = [];\n            }\n            let suffix = '', index = 0;\n            while (target._aliases.includes(alias + suffix)) {\n                suffix = '-' + (++index).toString();\n            }\n\n            alias += suffix;\n            target._aliases.push(alias);\n            this._alias = alias;\n        }\n\n        return this._alias;\n    }\n\n    /**\n     * Has this reflection a visible comment?\n     *\n     * @returns TRUE when this reflection has a visible comment.\n     */\n    hasComment(): boolean {\n        return this.comment ? this.comment.hasVisibleComponent() : false;\n    }\n\n    hasGetterOrSetter(): boolean {\n        return false;\n    }\n\n    /**\n     * Return a child by its name.\n     *\n     * @param names The name hierarchy of the child to look for.\n     * @returns The found child or undefined.\n     */\n    getChildByName(arg: string | string[]): Reflection | undefined {\n        const names: string[] = Array.isArray(arg) ? arg : splitUnquotedString(arg, '.');\n        const name = names[0];\n        let result: Reflection | undefined;\n\n        this.traverse((child) => {\n            if (child.name === name) {\n                if (names.length <= 1) {\n                    result = child;\n                } else {\n                    result = child.getChildByName(names.slice(1));\n                }\n                return false;\n            }\n        });\n\n        return result;\n    }\n\n    /**\n     * Return whether this reflection is the root / project reflection.\n     */\n    isProject(): this is ProjectReflection {\n        return false;\n    }\n\n    /**\n     * Try to find a reflection by its name.\n     *\n     * @return The found reflection or null.\n     */\n    findReflectionByName(arg: string | string[]): Reflection | undefined {\n        const names: string[] = Array.isArray(arg) ? arg : splitUnquotedString(arg, '.');\n\n        const reflection = this.getChildByName(names);\n        if (reflection) {\n            return reflection;\n        } else if (this.parent) {\n            return this.parent.findReflectionByName(names);\n        }\n    }\n\n    /**\n     * Traverse all potential child reflections of this reflection.\n     *\n     * The given callback will be invoked for all children, signatures and type parameters\n     * attached to this reflection.\n     *\n     * @param callback  The callback function that should be applied for each child reflection.\n     */\n    traverse(callback: TraverseCallback) { }\n\n    /**\n     * Return a string representation of this reflection.\n     */\n    toString(): string {\n        return ReflectionKind[this.kind] + ' ' + this.name;\n    }\n\n    /**\n     * Return a string representation of this reflection and all of its children.\n     *\n     * @param indent  Used internally to indent child reflections.\n     */\n    toStringHierarchy(indent: string = '') {\n        const lines = [indent + this.toString()];\n\n        indent += '  ';\n        this.traverse((child) => {\n            lines.push(child.toStringHierarchy(indent));\n        });\n\n        return lines.join('\\n');\n    }\n}\n"]}