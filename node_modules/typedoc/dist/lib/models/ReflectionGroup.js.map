{"version":3,"file":"ReflectionGroup.js","sourceRoot":"","sources":["../../../src/lib/models/ReflectionGroup.ts"],"names":[],"mappings":";;;AAGA;;;;;;GAMG;AACH,MAAa,eAAe;IAuDxB;;;;;OAKG;IACH,YAAY,KAAa,EAAE,IAAoB;QAlD/C;;WAEG;QACH,aAAQ,GAAiB,EAAE,CAAC;QAQ5B;;;;;WAKG;QACH,+BAA0B,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,6BAA6B,EAAE,CAAC;QAkCpE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IAED;;OAEG;IACK,6BAA6B;QACjC,OAAO,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC;IAChE,CAAC;CACJ;AAxED,0CAwEC","sourcesContent":["import { Reflection, ReflectionKind } from \"./reflections/abstract\";\nimport { ReflectionCategory } from \"./ReflectionCategory\";\n\n/**\n * A group of reflections. All reflections in a group are of the same kind.\n *\n * Reflection groups are created by the ´GroupHandler´ in the resolving phase\n * of the dispatcher. The main purpose of groups is to be able to more easily\n * render human readable children lists in templates.\n */\nexport class ReflectionGroup {\n    /**\n     * The title, a string representation of the typescript kind, of this group.\n     */\n    title: string;\n\n    /**\n     * The original typescript kind of the children of this group.\n     */\n    kind: ReflectionKind;\n\n    /**\n     * All reflections of this group.\n     */\n    children: Reflection[] = [];\n\n    /**\n     * A list of generated css classes that should be applied to representations of this\n     * group in the generated markup.\n     */\n    cssClasses?: string;\n\n    /**\n     * Do all children of this group have a separate document?\n     *\n     * A bound representation of the ´ReflectionGroup.getAllChildrenHaveOwnDocument´\n     * that can be used within templates.\n     */\n    allChildrenHaveOwnDocument = () => this.getAllChildrenHaveOwnDocument();\n\n    /**\n     * Are all children inherited members?\n     */\n    allChildrenAreInherited?: boolean;\n\n    /**\n     * Are all children private members?\n     */\n    allChildrenArePrivate?: boolean;\n\n    /**\n     * Are all children private or protected members?\n     */\n    allChildrenAreProtectedOrPrivate?: boolean;\n\n    /**\n     * Are all children external members?\n     */\n    allChildrenAreExternal?: boolean;\n\n    /**\n     * Categories contained within this group.\n     */\n    categories?: ReflectionCategory[];\n\n    /**\n     * Create a new ReflectionGroup instance.\n     *\n     * @param title The title of this group.\n     * @param kind  The original typescript kind of the children of this group.\n     */\n    constructor(title: string, kind: ReflectionKind) {\n        this.title = title;\n        this.kind = kind;\n    }\n\n    /**\n     * Do all children of this group have a separate document?\n     */\n    private getAllChildrenHaveOwnDocument(): boolean {\n        return this.children.every((child) => child.hasOwnDocument);\n    }\n}\n"]}