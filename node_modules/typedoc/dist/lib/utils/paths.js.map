{"version":3,"file":"paths.js","sourceRoot":"","sources":["../../../src/lib/utils/paths.ts"],"names":[],"mappings":";;;AAAA,6BAA6B;AAC7B,yCAAkD;AAElD,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,KAAK,GAAG,CAAC;AAE9B,SAAS,SAAS,CAAC,OAAe;IAC9B,IAAI,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;QACpD,OAAO,OAAO,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;KACpD;IAED,IAAI,IAAI,EAAE;QACN,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;KAC/D;IAED,qEAAqE;IACrE,6DAA6D;IAC7D,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,EAAE;QAC/B,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;KACnC;IAED,2EAA2E;IAC3E,IAAI,CAAC,IAAI,EAAE;QACP,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;KAC3C;IAED,OAAO,OAAO,CAAC;AACnB,CAAC;AAED;;;;GAIG;AACH,SAAgB,eAAe,CAAC,QAAkB;IAC9C,OAAO,QAAQ,CAAC,GAAG,CACf,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,qBAAS,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAChE,CAAC;AACN,CAAC;AAJD,0CAIC","sourcesContent":["import * as Path from \"path\";\nimport { Minimatch, IMinimatch } from \"minimatch\";\n\nconst unix = Path.sep === \"/\";\n\nfunction normalize(pattern: string): string {\n    if (pattern.startsWith(\"!\") || pattern.startsWith(\"#\")) {\n        return pattern[0] + normalize(pattern.substr(1));\n    }\n\n    if (unix) {\n        pattern = pattern.replace(/[\\\\]/g, \"/\").replace(/^\\w:/, \"\");\n    }\n\n    // pattern paths not starting with '**' are resolved even if it is an\n    // absolute path, to ensure correct format for the current OS\n    if (pattern.substr(0, 2) !== \"**\") {\n        pattern = Path.resolve(pattern);\n    }\n\n    // On Windows we transform `\\` to `/` to unify the way paths are intepreted\n    if (!unix) {\n        pattern = pattern.replace(/[\\\\]/g, \"/\");\n    }\n\n    return pattern;\n}\n\n/**\n * Convert array of glob patterns to array of minimatch instances.\n *\n * Handle a few Windows-Unix path gotchas.\n */\nexport function createMinimatch(patterns: string[]): IMinimatch[] {\n    return patterns.map(\n        (pattern) => new Minimatch(normalize(pattern), { dot: true })\n    );\n}\n"]}