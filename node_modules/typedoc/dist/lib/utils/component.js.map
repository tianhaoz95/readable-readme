{"version":3,"file":"component.js","sourceRoot":"","sources":["../../../src/lib/utils/component.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from \"lodash\";\n\nimport { Application } from \"../application\";\nimport { EventDispatcher, Event, EventMap } from \"./events\";\nimport { DeclarationOption } from \"./options/declaration\";\n\n/**\n * Exposes a reference to the root Application component.\n */\nexport interface ComponentHost {\n    readonly application: Application;\n}\n\nexport interface Component extends AbstractComponent<ComponentHost> {}\n\nexport interface ComponentClass<\n    T extends Component,\n    O extends ComponentHost = ComponentHost\n> extends Function {\n    new (owner: O): T;\n}\n\n/**\n * Option-bag passed to Component decorator.\n */\nexport interface ComponentOptions {\n    name?: string;\n    /** Specify valid child component class.  Used to prove that children are valid via `instanceof` checks */\n    childClass?: Function;\n    internal?: boolean;\n}\n\nconst childMappings: {\n    host: ChildableComponent<any, any>;\n    child: Function;\n}[] = [];\n\n/**\n * Class decorator applied to Components\n */\nexport function Component(options: ComponentOptions): ClassDecorator {\n    return (target: Function) => {\n        const proto = target.prototype;\n        if (!(proto instanceof AbstractComponent)) {\n            throw new Error(\n                \"The `Component` decorator can only be used with a subclass of `AbstractComponent`.\"\n            );\n        }\n\n        if (options.childClass) {\n            if (!(proto instanceof ChildableComponent)) {\n                throw new Error(\n                    \"The `Component` decorator accepts the parameter `childClass` only when used with a subclass of `ChildableComponent`.\"\n                );\n            }\n\n            childMappings.push({\n                host: proto,\n                child: options.childClass,\n            });\n        }\n\n        const name = options.name;\n        if (name) {\n            proto.componentName = name;\n        }\n\n        const internal = !!options.internal;\n        if (name && !internal) {\n            for (const childMapping of childMappings) {\n                if (!(proto instanceof childMapping.child)) {\n                    continue;\n                }\n\n                const host = childMapping.host;\n                host[\"_defaultComponents\"] = host[\"_defaultComponents\"] || {};\n                host[\"_defaultComponents\"][name] = target as any;\n                break;\n            }\n        }\n    };\n}\n\nexport class ComponentEvent extends Event {\n    owner: ComponentHost;\n\n    component: AbstractComponent<ComponentHost>;\n\n    static ADDED = \"componentAdded\";\n\n    static REMOVED = \"componentRemoved\";\n\n    constructor(\n        name: string,\n        owner: ComponentHost,\n        component: AbstractComponent<ComponentHost>\n    ) {\n        super(name);\n        this.owner = owner;\n        this.component = component;\n    }\n}\n\n/**\n * Dummy owner to be passed in to AbstractComponent / ChildableComponents if the class being constructed is\n * the application. The application does not have an owner and will return itself for component.application\n * and component.owner.\n */\nexport const DUMMY_APPLICATION_OWNER = Symbol();\n\n/**\n * Component base class.  Has an owner (unless it's the application root component),\n * can dispatch events to its children, and has access to the root Application component.\n *\n * @template O type of component's owner.\n */\nexport abstract class AbstractComponent<O extends ComponentHost>\n    extends EventDispatcher\n    implements ComponentHost {\n    /**\n     * The owner of this component instance.\n     */\n    private _componentOwner: O | typeof DUMMY_APPLICATION_OWNER;\n\n    /**\n     * The name of this component as set by the @Component decorator.\n     */\n    public componentName!: string;\n\n    /**\n     * A list of options defined by this component.\n     */\n    private _componentOptions?: DeclarationOption[];\n\n    /**\n     * Create new Component instance.\n     */\n    constructor(owner: O | typeof DUMMY_APPLICATION_OWNER) {\n        super();\n        this._componentOwner = owner;\n        this.initialize();\n    }\n\n    /**\n     * Initialize this component.\n     */\n    protected initialize() {\n        // empty default implementation\n    }\n\n    protected bubble(name: Event | EventMap | string, ...args: any[]) {\n        super.trigger(name, ...args);\n\n        if (\n            this.owner instanceof AbstractComponent &&\n            this._componentOwner !== DUMMY_APPLICATION_OWNER\n        ) {\n            this.owner.bubble(name, ...args);\n        }\n\n        return this;\n    }\n\n    /**\n     * Return all option declarations emitted by this component.\n     */\n    getOptionDeclarations(): DeclarationOption[] {\n        return (this._componentOptions || []).slice();\n    }\n\n    /**\n     * Return the application / root component instance.\n     */\n    get application(): Application {\n        return this._componentOwner === DUMMY_APPLICATION_OWNER\n            ? ((this as any) as Application)\n            : this._componentOwner.application;\n    }\n\n    /**\n     * Return the owner of this component.\n     */\n    get owner(): O {\n        return this._componentOwner === DUMMY_APPLICATION_OWNER\n            ? (this as any)\n            : this._componentOwner;\n    }\n}\n\n/**\n * Component that can have child components.\n *\n * @template O type of Component's owner\n * @template C type of Component's children\n */\nexport abstract class ChildableComponent<\n    O extends ComponentHost,\n    C extends Component\n> extends AbstractComponent<O> {\n    /**\n     *\n     */\n    private _componentChildren?: { [name: string]: C };\n\n    private _defaultComponents?: { [name: string]: ComponentClass<C> };\n\n    /**\n     * Create new Component instance.\n     */\n    constructor(owner: O | typeof DUMMY_APPLICATION_OWNER) {\n        super(owner);\n\n        _.entries(this._defaultComponents || {}).forEach(\n            ([name, component]) => {\n                this.addComponent(name, component);\n            }\n        );\n    }\n\n    /**\n     * Retrieve a plugin instance.\n     *\n     * @returns  The instance of the plugin or undefined if no plugin with the given class is attached.\n     */\n    getComponent(name: string): C | undefined {\n        return (this._componentChildren || {})[name];\n    }\n\n    getComponents(): C[] {\n        return _.values(this._componentChildren);\n    }\n\n    hasComponent(name: string): boolean {\n        return !!(this._componentChildren || {})[name];\n    }\n\n    addComponent<T extends C>(\n        name: string,\n        componentClass: T | ComponentClass<T, O>\n    ): T {\n        if (!this._componentChildren) {\n            this._componentChildren = {};\n        }\n\n        if (this._componentChildren[name]) {\n            // Component already added so we will return the existing component\n            // TODO: add better logging around this because it could be unexpected but shouldn't be fatal\n            // See https://github.com/TypeStrong/typedoc/issues/846\n            return <T>this._componentChildren[name];\n        } else {\n            const component: T =\n                typeof componentClass === \"function\"\n                    ? new (<ComponentClass<T>>componentClass)(this)\n                    : componentClass;\n            const event = new ComponentEvent(\n                ComponentEvent.ADDED,\n                this,\n                component\n            );\n\n            this.bubble(event);\n            this._componentChildren[name] = component;\n\n            return component;\n        }\n    }\n\n    removeComponent(name: string): C | undefined {\n        const component = (this._componentChildren || {})[name];\n        if (component) {\n            delete this._componentChildren![name];\n            component.stopListening();\n            this.bubble(\n                new ComponentEvent(ComponentEvent.REMOVED, this, component)\n            );\n            return component;\n        }\n    }\n\n    removeAllComponents() {\n        for (const component of _.values(this._componentChildren)) {\n            component.stopListening();\n        }\n\n        this._componentChildren = {};\n    }\n}\n"]}