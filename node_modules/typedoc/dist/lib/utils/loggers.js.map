{"version":3,"file":"loggers.js","sourceRoot":"","sources":["../../../src/lib/utils/loggers.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from \"typescript\";\nimport * as Util from \"util\";\nimport { url } from \"inspector\";\nimport { resolve } from \"path\";\nimport { red, yellow, cyan, gray } from \"colors/safe\";\n\nconst isDebugging = () => Boolean(url());\n\n/**\n * List of known log levels. Used to specify the urgency of a log message.\n */\nexport enum LogLevel {\n    Verbose,\n    Info,\n    Warn,\n    Error,\n}\n\n/**\n * A logger that will not produce any output.\n *\n * This logger also serves as the base class of other loggers as it implements\n * all the required utility functions.\n */\nexport class Logger {\n    /**\n     * How many error messages have been logged?\n     */\n    errorCount = 0;\n\n    /**\n     * How many warning messages have been logged?\n     */\n    warningCount = 0;\n\n    /**\n     * The minimum logging level to print.\n     */\n    level = LogLevel.Info;\n\n    /**\n     * Has an error been raised through the log method?\n     */\n    public hasErrors(): boolean {\n        return this.errorCount > 0;\n    }\n\n    /**\n     * Has a warning been raised through the log method?\n     */\n    public hasWarnings(): boolean {\n        return this.warningCount > 0;\n    }\n\n    /**\n     * Reset the error counter.\n     */\n    public resetErrors() {\n        this.errorCount = 0;\n    }\n\n    /**\n     * Reset the warning counter.\n     */\n    public resetWarnings() {\n        this.warningCount = 0;\n    }\n\n    /**\n     * Log the given message.\n     *\n     * @param text  The message that should be logged.\n     * @param args  The arguments that should be printed into the given message.\n     */\n    public write(text: string, ...args: string[]) {\n        this.log(Util.format(text, ...args), LogLevel.Info);\n    }\n\n    /**\n     * Log the given message with a trailing whitespace.\n     *\n     * @param text  The message that should be logged.\n     * @param args  The arguments that should be printed into the given message.\n     */\n    public writeln(text: string, ...args: string[]) {\n        this.log(Util.format(text, ...args), LogLevel.Info);\n    }\n\n    /**\n     * Log the given success message.\n     *\n     * @param text  The message that should be logged.\n     * @param args  The arguments that should be printed into the given message.\n     */\n    public success(text: string, ...args: string[]) {\n        this.log(Util.format(text, ...args), LogLevel.Info);\n    }\n\n    /**\n     * Log the given verbose message.\n     *\n     * @param text  The message that should be logged.\n     * @param args  The arguments that should be printed into the given message.\n     */\n    public verbose(text: string, ...args: string[]) {\n        this.log(Util.format(text, ...args), LogLevel.Verbose);\n    }\n\n    /**\n     * Log the given warning.\n     *\n     * @param text  The warning that should be logged.\n     * @param args  The arguments that should be printed into the given warning.\n     */\n    public warn(text: string, ...args: string[]) {\n        this.log(Util.format(text, ...args), LogLevel.Warn);\n    }\n\n    /**\n     * Log the given error.\n     *\n     * @param text  The error that should be logged.\n     * @param args  The arguments that should be printed into the given error.\n     */\n    public error(text: string, ...args: string[]) {\n        this.log(Util.format(text, ...args), LogLevel.Error);\n    }\n\n    /**\n     * Print a log message.\n     *\n     * @param _message  The message itself.\n     * @param level  The urgency of the log message.\n     * @param _newLine  Should the logger print a trailing whitespace?\n     */\n    public log(_message: string, level: LogLevel = LogLevel.Info) {\n        if (level === LogLevel.Error) {\n            this.errorCount += 1;\n        }\n        if (level === LogLevel.Warn) {\n            this.warningCount += 1;\n        }\n    }\n\n    /**\n     * Print the given TypeScript log messages.\n     *\n     * @param diagnostics  The TypeScript messages that should be logged.\n     */\n    public diagnostics(diagnostics: ReadonlyArray<ts.Diagnostic>) {\n        diagnostics.forEach((diagnostic) => {\n            this.diagnostic(diagnostic);\n        });\n    }\n\n    /**\n     * Print the given TypeScript log message.\n     *\n     * @param diagnostic  The TypeScript message that should be logged.\n     */\n    public diagnostic(diagnostic: ts.Diagnostic) {\n        const output = ts.formatDiagnosticsWithColorAndContext([diagnostic], {\n            getCanonicalFileName: resolve,\n            getCurrentDirectory: () => process.cwd(),\n            getNewLine: () => ts.sys.newLine,\n        });\n\n        switch (diagnostic.category) {\n            case ts.DiagnosticCategory.Error:\n                this.log(output, LogLevel.Error);\n                break;\n            case ts.DiagnosticCategory.Warning:\n                this.log(output, LogLevel.Warn);\n                break;\n            case ts.DiagnosticCategory.Message:\n                this.log(output, LogLevel.Info);\n        }\n    }\n}\n\n/**\n * A logger that outputs all messages to the console.\n */\nexport class ConsoleLogger extends Logger {\n    /**\n     * Print a log message.\n     *\n     * @param message  The message itself.\n     * @param level  The urgency of the log message.\n     * @param newLine  Should the logger print a trailing whitespace?\n     */\n    public log(message: string, level: LogLevel = LogLevel.Info) {\n        super.log(message, level);\n        if (level < this.level && !isDebugging()) {\n            return;\n        }\n\n        const output =\n            {\n                [LogLevel.Error]: red(\"Error: \"),\n                [LogLevel.Warn]: yellow(\"Warning: \"),\n                [LogLevel.Info]: cyan(\"Info: \"),\n                [LogLevel.Verbose]: gray(\"Debug: \"),\n            }[level] + message;\n\n        ts.sys.write(output + ts.sys.newLine);\n    }\n}\n\n/**\n * A logger that calls a callback function.\n */\nexport class CallbackLogger extends Logger {\n    /**\n     * This loggers callback function\n     */\n    callback: Function;\n\n    /**\n     * Create a new CallbackLogger instance.\n     *\n     * @param callback  The callback that should be used to log messages.\n     */\n    constructor(callback: Function) {\n        super();\n        this.callback = callback;\n    }\n\n    /**\n     * Print a log message.\n     *\n     * @param message  The message itself.\n     * @param level  The urgency of the log message.\n     * @param newLine  Should the logger print a trailing whitespace?\n     */\n    public log(\n        message: string,\n        level: LogLevel = LogLevel.Info,\n        newLine?: boolean\n    ) {\n        super.log(message, level);\n\n        this.callback(message, level, newLine);\n    }\n}\n"]}