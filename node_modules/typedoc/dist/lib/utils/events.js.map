{"version":3,"file":"events.js","sourceRoot":"","sources":["../../../src/lib/utils/events.ts"],"names":[],"mappings":"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","sourcesContent":["// Backbone.js 1.2.3\n// (c) 2010-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n// Backbone may be freely distributed under the MIT license.\n// For all details and documentation:\n// https://backbonejs.org\n//\n// The Events object is a typesafe conversion of Backbones Events object:\n// https://github.com/jashkenas/backbone/blob/05fde9e201f7e2137796663081105cd6dad12a98/backbone.js#L119-L374\n\nimport * as _ from \"lodash\";\n\nexport interface EventCallback extends Function {\n    _callback?: Function;\n}\n\ninterface EventListener {\n    obj: any;\n    objId: string;\n    id: string;\n    listeningTo: EventListeners;\n    count: number;\n}\n\ninterface EventListeners {\n    [id: string]: EventListener;\n}\n\ninterface EventHandler {\n    callback: EventCallback;\n    context: any;\n    ctx: any;\n    listening: EventListener;\n    priority: number;\n}\n\ninterface EventHandlers {\n    [name: string]: EventHandler[];\n}\n\nexport interface EventMap {\n    [name: string]: EventCallback;\n}\n\ninterface EventIteratee<T, U> {\n    (events: U, name: string, callback: Function | undefined, options: T): U;\n}\n\ninterface EventTriggerer {\n    (events: EventHandler[], args: any[]): void;\n}\n\ninterface OnApiOptions {\n    context: any;\n    ctx: any;\n    listening: any;\n    priority: number;\n}\n\ninterface OffApiOptions {\n    context: any;\n    listeners: any;\n}\n\n// Regular expression used to split event strings.\nconst eventSplitter = /\\s+/;\n\n/**\n * Iterates over the standard `event, callback` (as well as the fancy multiple\n * space-separated events `\"change blur\", callback` and jQuery-style event\n * maps `{event: callback}`).\n */\nfunction eventsApi<T, U>(\n    iteratee: EventIteratee<T, U>,\n    events: U,\n    name: EventMap | string | undefined,\n    callback: EventCallback | undefined,\n    options: T\n): U {\n    let i = 0,\n        names: string[];\n\n    const anyOptions = options as any;\n\n    if (name && typeof name === \"object\") {\n        // Handle event maps.\n        if (\n            callback !== void 0 &&\n            \"context\" in options &&\n            anyOptions[\"context\"] === void 0\n        ) {\n            anyOptions[\"context\"] = callback;\n        }\n\n        for (names = _.keys(name); i < names.length; i++) {\n            events = eventsApi(\n                iteratee,\n                events,\n                names[i],\n                name[names[i]],\n                options\n            );\n        }\n    } else if (name && typeof name === \"string\" && eventSplitter.test(name)) {\n        // Handle space separated event names by delegating them individually.\n        for (names = name.split(eventSplitter); i < names.length; i++) {\n            events = iteratee(events, names[i], callback, options);\n        }\n    } else {\n        // Finally, standard events.\n        events = iteratee(events, <any>name, callback, options);\n    }\n\n    return events;\n}\n\n/**\n * The reducing API that adds a callback to the `events` object.\n */\nfunction onApi(\n    events: EventHandlers,\n    name: string,\n    callback: EventCallback | undefined,\n    options: OnApiOptions\n): EventHandlers {\n    if (callback) {\n        const handlers = events[name] || (events[name] = []);\n        const context = options.context,\n            ctx = options.ctx,\n            listening = options.listening,\n            priority = options.priority;\n        if (listening) {\n            listening.count++;\n        }\n\n        handlers.push({\n            callback: callback,\n            context: context,\n            ctx: context || ctx,\n            listening: listening,\n            priority: priority,\n        });\n\n        handlers.sort((a, b) => b.priority - a.priority);\n    }\n\n    return events;\n}\n\n/**\n * The reducing API that removes a callback from the `events` object.\n */\nfunction offApi(\n    events: EventHandlers | undefined,\n    name: string,\n    callback: EventCallback | undefined,\n    options: OffApiOptions\n): EventHandlers | undefined {\n    if (!events) {\n        return;\n    }\n\n    let i = 0,\n        listening: EventListener;\n    const context = options.context,\n        listeners = options.listeners;\n\n    // Delete all events listeners and \"drop\" events.\n    if (!name && !callback && !context) {\n        const ids = _.keys(listeners);\n        for (; i < ids.length; i++) {\n            listening = listeners[ids[i]];\n            delete listeners[listening.id];\n            delete listening.listeningTo[listening.objId];\n        }\n        return;\n    }\n\n    const names = name ? [name] : _.keys(events);\n    for (; i < names.length; i++) {\n        name = names[i];\n        const handlers = events[name];\n\n        // Bail out if there are no events stored.\n        if (!handlers) {\n            break;\n        }\n\n        // Replace events if there are any remaining.  Otherwise, clean up.\n        const remaining: EventHandler[] = [];\n        for (let j = 0; j < handlers.length; j++) {\n            const handler = handlers[j];\n            if (\n                (callback &&\n                    callback !== handler.callback &&\n                    callback !== handler.callback._callback) ||\n                (context && context !== handler.context)\n            ) {\n                remaining.push(handler);\n            } else {\n                listening = handler.listening;\n                if (listening && --listening.count === 0) {\n                    delete listeners[listening.id];\n                    delete listening.listeningTo[listening.objId];\n                }\n            }\n        }\n\n        // Update tail event if the list has any events.  Otherwise, clean up.\n        if (remaining.length) {\n            events[name] = remaining;\n        } else {\n            delete events[name];\n        }\n    }\n\n    if (_.size(events)) {\n        return events;\n    }\n}\n\n/**\n * Reduces the event callbacks into a map of `{event: onceWrapper`.}\n * `offer` unbinds the `onceWrapper` after it has been called.\n */\nfunction onceMap(\n    map: EventMap,\n    name: string,\n    callback: EventCallback | undefined,\n    offer: Function\n): EventMap {\n    if (callback) {\n        const once = (map[name] = <EventCallback>_.once(function (\n            this: any,\n            ...args\n        ) {\n            offer(name, once);\n            callback.apply(this, args);\n        }));\n\n        once._callback = callback;\n    }\n\n    return map;\n}\n\n/**\n * Handles triggering the appropriate event callbacks.\n */\nfunction triggerApi(\n    objEvents: EventHandlers,\n    name: string,\n    _callback: Function | undefined,\n    args: any[],\n    triggerer: EventTriggerer = triggerEvents\n): EventHandlers {\n    if (objEvents) {\n        const events = objEvents[name];\n        let allEvents = objEvents[\"all\"];\n        if (events && allEvents) {\n            allEvents = allEvents.slice();\n        }\n        if (events) {\n            triggerer(events, args);\n        }\n        if (allEvents) {\n            triggerer(allEvents, [name].concat(args));\n        }\n    }\n\n    return objEvents;\n}\n\n/**\n * A difficult-to-believe, but optimized internal dispatch function for\n * triggering events. Tries to keep the usual cases speedy (most internal\n * Backbone events have 3 arguments).\n */\nfunction triggerEvents(events: EventHandler[], args: any[]) {\n    let ev: EventHandler,\n        i = -1;\n    const l = events.length,\n        a1 = args[0],\n        a2 = args[1],\n        a3 = args[2];\n    switch (args.length) {\n        case 0:\n            while (++i < l) {\n                (ev = events[i]).callback.call(ev.ctx);\n            }\n            return;\n        case 1:\n            while (++i < l) {\n                (ev = events[i]).callback.call(ev.ctx, a1);\n            }\n            return;\n        case 2:\n            while (++i < l) {\n                (ev = events[i]).callback.call(ev.ctx, a1, a2);\n            }\n            return;\n        case 3:\n            while (++i < l) {\n                (ev = events[i]).callback.call(ev.ctx, a1, a2, a3);\n            }\n            return;\n        default:\n            while (++i < l) {\n                (ev = events[i]).callback.apply(ev.ctx, args);\n            }\n            return;\n    }\n}\n\n/**\n * An event object that can be processed with [[Events]].\n */\nexport class Event {\n    /**\n     * The name of the event.\n     */\n    private _name: string;\n\n    /**\n     * Has [[Event.stopPropagation]] been called?\n     */\n    private _isPropagationStopped = false;\n\n    /**\n     * Has [[Event.preventDefault]] been called?\n     */\n    private _isDefaultPrevented = false;\n\n    /**\n     * Create a new Event instance.\n     */\n    constructor(name: string) {\n        this._name = name;\n    }\n\n    /**\n     * Stop the propagation of this event. Remaining event handlers will not be executed.\n     */\n    stopPropagation() {\n        this._isPropagationStopped = true;\n    }\n\n    /**\n     * Prevent the default action associated with this event from being executed.\n     */\n    preventDefault() {\n        this._isDefaultPrevented = true;\n    }\n\n    /**\n     * Return the event name.\n     */\n    get name(): string {\n        return this._name;\n    }\n\n    /**\n     * Has [[Event.stopPropagation]] been called?\n     */\n    get isPropagationStopped(): boolean {\n        return this._isPropagationStopped;\n    }\n\n    /**\n     * Has [[Event.preventDefault]] been called?\n     */\n    get isDefaultPrevented(): boolean {\n        return this._isDefaultPrevented;\n    }\n}\n\n/**\n * A class that provides a custom event channel.\n *\n * You may bind a callback to an event with `on` or remove with `off`;\n * `trigger`-ing an event fires all callbacks in succession.\n */\nexport class EventDispatcher {\n    /**\n     * Map of all handlers registered with the \"on\" function.\n     */\n    private _events?: EventHandlers;\n\n    /**\n     * Map of all objects this instance is listening to.\n     */\n    private _listeningTo?: EventListeners;\n\n    /**\n     * Map of all objects that are listening to this instance.\n     */\n    private _listeners?: EventListeners;\n\n    /**\n     * A unique id that identifies this instance.\n     */\n    private get _listenId(): string {\n        return this._savedListenId || (this._savedListenId = _.uniqueId(\"l\"));\n    }\n    private _savedListenId?: string;\n\n    /**\n     * Bind an event to a `callback` function. Passing `\"all\"` will bind\n     * the callback to all events fired.\n     */\n    on(eventMap: EventMap, context?: any): this;\n    on(\n        eventMap: EventMap,\n        callback?: EventCallback,\n        context?: any,\n        priority?: number\n    ): this;\n    on(\n        name: string,\n        callback: EventCallback,\n        context?: any,\n        priority?: number\n    ): this;\n    on(\n        nameOrMap: EventMap | string,\n        callback: EventCallback,\n        context?: any,\n        priority?: number\n    ) {\n        this.internalOn(nameOrMap, callback, context, priority);\n        return this;\n    }\n\n    /**\n     * Guard the `listening` argument from the public API.\n     */\n    private internalOn(\n        name: EventMap | string,\n        callback: EventCallback | undefined,\n        context?: any,\n        priority = 0,\n        listening?: EventListener\n    ) {\n        this._events = eventsApi(\n            onApi,\n            this._events || <EventHandlers>{},\n            name,\n            callback,\n            {\n                context: context,\n                ctx: this,\n                listening: listening,\n                priority: priority,\n            }\n        );\n\n        if (listening) {\n            const listeners = this._listeners || (this._listeners = {});\n            listeners[listening.id] = listening;\n        }\n    }\n\n    /**\n     * Bind an event to only be triggered a single time. After the first time\n     * the callback is invoked, its listener will be removed. If multiple events\n     * are passed in using the space-separated syntax, the handler will fire\n     * once for each event, not once for a combination of all events.\n     */\n    once(eventMap: EventMap, context?: any): this;\n    once(\n        name: string,\n        callback: EventCallback,\n        context?: any,\n        priority?: any\n    ): this;\n    once(\n        name: EventMap | string,\n        callback?: EventCallback,\n        context?: any,\n        priority?: number\n    ) {\n        // Map the event into a `{event: once}` object.\n        const events = eventsApi(\n            onceMap,\n            <EventMap>{},\n            name,\n            callback,\n            _.bind(this.off, this)\n        );\n        return this.on(events, void 0, context, priority);\n    }\n\n    /**\n     * Remove one or many callbacks. If `context` is null, removes all\n     * callbacks with that function. If `callback` is null, removes all\n     * callbacks for the event. If `name` is null, removes all bound\n     * callbacks for all events.\n     */\n    off(): this;\n    off(eventMap: EventMap | undefined, context?: any): this;\n    off(\n        name: string | undefined,\n        callback?: EventCallback,\n        context?: any\n    ): this;\n    off(name?: EventMap | string, callback?: EventCallback, context?: any) {\n        if (!this._events) {\n            return this;\n        }\n\n        this._events = eventsApi(offApi, this._events, name, callback, {\n            context: context,\n            listeners: this._listeners,\n        });\n\n        return this;\n    }\n\n    /**\n     * Inversion-of-control versions of `on`. Tell *this* object to listen to\n     * an event in another object... keeping track of what it's listening to\n     * for easier unbinding later.\n     */\n    listenTo(\n        obj: EventDispatcher,\n        name: EventMap | string,\n        callback?: EventCallback,\n        priority?: number\n    ) {\n        if (!obj) {\n            return this;\n        }\n        const id = obj._listenId;\n        const listeningTo = this._listeningTo || (this._listeningTo = {});\n        let listening = listeningTo[id];\n\n        // This object is not listening to any other events on `obj` yet.\n        // Setup the necessary references to track the listening callbacks.\n        if (!listening) {\n            const thisId = this._listenId;\n            listening = listeningTo[id] = {\n                obj: obj,\n                objId: id,\n                id: thisId,\n                listeningTo: listeningTo,\n                count: 0,\n            };\n        }\n\n        // Bind callbacks on obj, and keep track of them on listening.\n        obj.internalOn(name, callback, this, priority, listening);\n        return this;\n    }\n\n    /**\n     * Inversion-of-control versions of `once`.\n     */\n    listenToOnce(obj: EventDispatcher, eventMap: EventMap): this;\n    listenToOnce(\n        obj: EventDispatcher,\n        name: string,\n        callback: EventCallback,\n        priority?: number\n    ): this;\n    listenToOnce(\n        obj: EventDispatcher,\n        name: EventMap | string,\n        callback?: EventCallback,\n        priority?: number\n    ) {\n        // Map the event into a `{event: once}` object.\n        const events = eventsApi(\n            onceMap,\n            <EventMap>{},\n            name,\n            callback,\n            _.bind(this.stopListening, this, obj)\n        );\n        return this.listenTo(obj, events, void 0, priority);\n    }\n\n    /**\n     * Tell this object to stop listening to either specific events ... or\n     * to every object it's currently listening to.\n     */\n    stopListening(\n        obj?: EventDispatcher,\n        name?: EventMap | string,\n        callback?: EventCallback\n    ) {\n        const listeningTo = this._listeningTo;\n        if (!listeningTo) {\n            return this;\n        }\n\n        const ids = obj ? [obj._listenId] : _.keys(listeningTo);\n        for (let i = 0; i < ids.length; i++) {\n            const listening = listeningTo[ids[i]];\n\n            // If listening doesn't exist, this object is not currently\n            // listening to obj. Break out early.\n            if (!listening) {\n                break;\n            }\n\n            listening.obj.off(name, callback, this);\n        }\n\n        if (_.isEmpty(listeningTo)) {\n            this._listeningTo = void 0;\n        }\n\n        return this;\n    }\n\n    /**\n     * Trigger one or many events, firing all bound callbacks. Callbacks are\n     * passed the same arguments as `trigger` is, apart from the event name\n     * (unless you're listening on `\"all\"`, which will cause your callback to\n     * receive the true name of the event as the first argument).\n     */\n    trigger(name: Event | EventMap | string, ...args: any[]) {\n        if (!this._events) {\n            return this;\n        }\n\n        if (name instanceof Event) {\n            triggerApi(\n                this._events,\n                name.name,\n                void 0,\n                [name],\n                (events: EventHandler[], args: any[]) => {\n                    let ev: EventHandler,\n                        i = -1;\n                    const l = events.length;\n                    while (++i < l) {\n                        if (name.isPropagationStopped) {\n                            return;\n                        }\n                        ev = events[i];\n                        ev.callback.apply(ev.ctx, args);\n                    }\n                }\n            );\n        } else {\n            eventsApi(triggerApi, this._events, name, void 0, args);\n        }\n\n        return this;\n    }\n}\n"]}