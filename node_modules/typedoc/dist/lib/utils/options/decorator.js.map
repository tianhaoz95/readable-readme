{"version":3,"file":"decorator.js","sourceRoot":"","sources":["../../../../src/lib/utils/options/decorator.ts"],"names":[],"mappings":";;AAwBA,SAAgB,UAAU,CAAC,IAAY;IACnC,OAAO,UAAS,MAA2D,EAAE,GAAgB;QACzF,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,GAAG,EAAE;YAC/B,GAAG;gBACC,IAAI,SAAS,IAAI,IAAI,EAAE;oBACnB,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;iBACtC;qBAAM;oBACH,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;iBAClD;YACL,CAAC;YACD,UAAU,EAAE,IAAI;YAChB,YAAY,EAAE,IAAI;SACrB,CAAC,CAAC;IACP,CAAC,CAAC;AACN,CAAC;AAdD,gCAcC","sourcesContent":["import { TypeDocOptionMap, Options, TypeDocOptions } from '.';\nimport { Application } from '../../application';\n\n/**\n * Binds an option to the given property. Does not register the option.\n *\n * @since v0.16.3\n */\nexport function BindOption<K extends keyof TypeDocOptionMap>(name: K):\n    <IK extends PropertyKey>(\n        target: ({ application: Application } | { options: Options }) & { [K2 in IK]: TypeDocOptions[K] },\n        key: IK\n    ) => void;\n\n/**\n * Binds an option to the given property. Does not register the option.\n * @since v0.16.3\n *\n * @privateRemarks\n * This overload is intended for plugin use only with looser type checks. Do not use internally.\n */\nexport function BindOption(name: string):\n    (target: { application: Application } | { options: Options }) => void;\n\nexport function BindOption(name: string) {\n    return function(target: { application: Application } | { options: Options }, key: PropertyKey) {\n        Object.defineProperty(target, key, {\n            get(this: { application: Application } | { options: Options }) {\n                if ('options' in this) {\n                    return this.options.getValue(name);\n                } else {\n                    return this.application.options.getValue(name);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n    };\n}\n"]}