{"version":3,"file":"typedoc.js","sourceRoot":"","sources":["../../../../../src/lib/utils/options/sources/typedoc.ts"],"names":[],"mappings":"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","sourcesContent":["import { Options } from \"..\";\nimport { LogLevel } from \"../../loggers\";\nimport { ParameterType, ParameterHint } from \"../declaration\";\nimport { BUNDLED_THEMES as ShikiThemes } from \"shiki-themes\";\n\nexport function addTypeDocOptions(options: Pick<Options, \"addDeclaration\">) {\n    options.addDeclaration({\n        name: \"options\",\n        help:\n            \"Specify a json option file that should be loaded. If not specified TypeDoc will look for 'typedoc.json' in the current directory\",\n        hint: ParameterHint.File,\n        defaultValue: process.cwd(),\n    });\n    options.addDeclaration({\n        name: \"tsconfig\",\n        help:\n            \"Specify a typescript config file that should be loaded. If not specified TypeDoc will look for 'tsconfig.json' in the current directory.\",\n        hint: ParameterHint.File,\n        defaultValue: process.cwd(),\n    });\n\n    options.addDeclaration({\n        name: \"entryPoints\",\n        help:\n            \"The entry points of your library, which files should be documented as available to consumers.\",\n        type: ParameterType.Array,\n    });\n\n    options.addDeclaration({\n        name: \"exclude\",\n        help:\n            \"Define paths to be excluded when expanding a directory that was specified as an entry point.\",\n        type: ParameterType.Array,\n    });\n    options.addDeclaration({\n        name: \"externalPattern\",\n        help:\n            \"Define patterns for files that should be considered being external.\",\n        type: ParameterType.Array,\n        defaultValue: [\"**/node_modules/**\"],\n    });\n    options.addDeclaration({\n        name: \"excludeExternals\",\n        help: \"Prevent externally resolved symbols from being documented.\",\n        type: ParameterType.Boolean,\n    });\n    options.addDeclaration({\n        name: \"excludeNotDocumented\",\n        help:\n            \"Prevent symbols that are not explicitly documented from appearing in the results.\",\n        type: ParameterType.Boolean,\n    });\n    options.addDeclaration({\n        name: \"excludeInternal\",\n        help:\n            \"Prevent symbols that marked with @internal from being documented.\",\n        type: ParameterType.Boolean,\n    });\n    options.addDeclaration({\n        name: \"excludePrivate\",\n        help: \"Ignores private variables and methods\",\n        type: ParameterType.Boolean,\n    });\n    options.addDeclaration({\n        name: \"excludeProtected\",\n        help: \"Ignores protected variables and methods\",\n        type: ParameterType.Boolean,\n    });\n    options.addDeclaration({\n        name: \"disableSources\",\n        help:\n            \"Disables setting the source of a reflection when documenting it.\",\n        type: ParameterType.Boolean,\n    });\n    options.addDeclaration({\n        name: \"includes\",\n        help:\n            \"Specifies the location to look for included documents (use [[include:FILENAME]] in comments).\",\n        hint: ParameterHint.Directory,\n    });\n    options.addDeclaration({\n        name: \"media\",\n        help:\n            \"Specifies the location with media files that should be copied to the output directory.\",\n        hint: ParameterHint.Directory,\n    });\n\n    options.addDeclaration({\n        name: \"watch\",\n        help: \"Watch files for changes and rebuild docs on change.\",\n        type: ParameterType.Boolean,\n    });\n    options.addDeclaration({\n        name: \"preserveWatchOutput\",\n        help:\n            \"If set, TypeDoc will not clear the screen between compilation runs.\",\n        type: ParameterType.Boolean,\n    });\n    options.addDeclaration({\n        name: \"emit\",\n        help: \"If set, TypeDoc will emit the TypeScript compilation result\",\n        type: ParameterType.Boolean,\n    });\n\n    options.addDeclaration({\n        name: \"out\",\n        help: \"Specifies the location the documentation should be written to.\",\n        hint: ParameterHint.Directory,\n    });\n    options.addDeclaration({\n        name: \"json\",\n        help:\n            \"Specifies the location and file name a json file describing the project is written to.\",\n        hint: ParameterHint.File,\n    });\n\n    options.addDeclaration({\n        name: \"theme\",\n        help:\n            \"Specify the path to the theme that should be used or 'default' or 'minimal' to use built-in themes.\",\n        type: ParameterType.String,\n        defaultValue: \"default\",\n    });\n\n    options.addDeclaration({\n        name: \"name\",\n        help:\n            \"Set the name of the project that will be used in the header of the template.\",\n    });\n    options.addDeclaration({\n        name: \"includeVersion\",\n        help: \"Add the package version to the project name.\",\n        type: ParameterType.Boolean,\n    });\n    options.addDeclaration({\n        name: \"excludeTags\",\n        help: \"Remove the listed tags from doc comments.\",\n        type: ParameterType.Array,\n    });\n    options.addDeclaration({\n        name: \"readme\",\n        help:\n            \"Path to the readme file that should be displayed on the index page. Pass `none` to disable the index page and start the documentation on the globals page.\",\n    });\n    options.addDeclaration({\n        name: \"defaultCategory\",\n        help:\n            \"Specifies the default category for reflections without a category.\",\n        defaultValue: \"Other\",\n    });\n    options.addDeclaration({\n        name: \"categoryOrder\",\n        help:\n            \"Specifies the order in which categories appear. * indicates the relative order for categories not in the list.\",\n        type: ParameterType.Array,\n    });\n    options.addDeclaration({\n        name: \"categorizeByGroup\",\n        help:\n            \"Specifies whether categorization will be done at the group level.\",\n        type: ParameterType.Boolean,\n        defaultValue: true,\n    });\n    options.addDeclaration({\n        name: \"gitRevision\",\n        help:\n            \"Use specified revision instead of the last revision for linking to GitHub source files.\",\n    });\n    options.addDeclaration({\n        name: \"gitRemote\",\n        help: \"Use the specified remote for linking to GitHub source files.\",\n        defaultValue: \"origin\",\n    });\n    options.addDeclaration({\n        name: \"gaID\",\n        help:\n            \"Set the Google Analytics tracking ID and activate tracking code.\",\n    });\n    options.addDeclaration({\n        name: \"gaSite\",\n        help: \"Set the site name for Google Analytics. Defaults to `auto`.\",\n        defaultValue: \"auto\",\n    });\n    options.addDeclaration({\n        name: \"hideGenerator\",\n        help: \"Do not print the TypeDoc link at the end of the page.\",\n        type: ParameterType.Boolean,\n    });\n    options.addDeclaration({\n        name: \"toc\",\n        help:\n            \"Define the contents of the top level table of contents as a comma-separated list of global symbols.\",\n        type: ParameterType.Array,\n    });\n    options.addDeclaration({\n        name: \"disableOutputCheck\",\n        help:\n            \"Should TypeDoc disable the testing and cleaning of the output directory?\",\n        type: ParameterType.Boolean,\n    });\n\n    options.addDeclaration({\n        name: \"help\",\n        help: \"Print this message.\",\n        type: ParameterType.Boolean,\n    });\n    options.addDeclaration({\n        name: \"version\",\n        help: \"Print TypeDoc's version.\",\n        type: ParameterType.Boolean,\n    });\n    options.addDeclaration({\n        name: \"showConfig\",\n        help: \"Print the resolved configuration and exit\",\n        type: ParameterType.Boolean,\n    });\n    options.addDeclaration({\n        name: \"plugin\",\n        help:\n            \"Specify the npm plugins that should be loaded. Omit to load all installed plugins, set to 'none' to load no plugins.\",\n        type: ParameterType.Array,\n    });\n    options.addDeclaration({\n        name: \"logger\",\n        help: \"Specify the logger that should be used, 'none' or 'console'\",\n        defaultValue: \"console\",\n        type: ParameterType.Mixed,\n    });\n    options.addDeclaration({\n        name: \"logLevel\",\n        help: \"Specify what level of logging should be used.\",\n        type: ParameterType.Map,\n        map: LogLevel,\n        defaultValue: LogLevel.Info,\n    });\n    options.addDeclaration({\n        name: \"listInvalidSymbolLinks\",\n        help:\n            \"Emits a list of broken symbol [[navigation]] links after documentation generation\",\n        type: ParameterType.Boolean,\n    });\n    options.addDeclaration({\n        name: \"markedOptions\",\n        help:\n            \"Specify the options passed to Marked, the Markdown parser used by TypeDoc\",\n        type: ParameterType.Mixed,\n    });\n\n    options.addDeclaration({\n        name: \"highlightTheme\",\n        help: \"Specifies the code highlighting theme.\",\n        type: ParameterType.String,\n        defaultValue: \"light-plus\",\n        validate: (value: string): void => {\n            if (!ShikiThemes.includes(value)) {\n                throw new Error(\n                    `Highlight Theme must be one of the following: ${ShikiThemes.join(\n                        \", \"\n                    )}`\n                );\n            }\n        },\n    });\n}\n"]}