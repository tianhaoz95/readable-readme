{"version":3,"file":"typedoc.js","sourceRoot":"","sources":["../../../../../src/lib/utils/options/sources/typedoc.ts"],"names":[],"mappings":"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","sourcesContent":["import { Options } from '..';\nimport { ParameterType, ParameterHint, SourceFileMode } from '../declaration';\n\nexport function addTypeDocOptions(options: Options) {\n    options.addDeclaration({\n        name: 'options',\n        help: \"Specify a json option file that should be loaded. If not specified TypeDoc will look for 'typedoc.json' in the current directory\",\n        hint: ParameterHint.File,\n        defaultValue: process.cwd()\n    });\n    options.addDeclaration({\n        name: 'tsconfig',\n        help: \"Specify a typescript config file that should be loaded. If not specified TypeDoc will look for 'tsconfig.json' in the current directory.\",\n        hint: ParameterHint.File,\n        defaultValue: process.cwd()\n    });\n\n    options.addDeclaration({\n        name: 'inputFiles',\n        help: 'The initial input files to expand and then pass to TS.',\n        type: ParameterType.Array\n    });\n\n    options.addDeclaration({\n        name: 'mode',\n        help: \"Specifies the output mode the project is used to be compiled with: 'file' or 'modules'\",\n        type: ParameterType.Map,\n        map: {\n            'file': SourceFileMode.File,\n            'modules': SourceFileMode.Modules\n        },\n        defaultValue: SourceFileMode.Modules\n    });\n    options.addDeclaration({\n        name: 'includeDeclarations',\n        help: 'Turn on parsing of .d.ts declaration files.',\n        type: ParameterType.Boolean\n    });\n    options.addDeclaration({\n        name: 'entryPoint',\n        help: 'Specifies the fully qualified name of the root symbol. Defaults to global namespace.',\n        type: ParameterType.String\n    });\n    options.addDeclaration({\n        name: 'exclude',\n        help: 'Define patterns for excluded files when specifying paths.',\n        type: ParameterType.Array\n    });\n    options.addDeclaration({\n        name: 'externalPattern',\n        help: 'Define patterns for files that should be considered being external.',\n        type: ParameterType.Array\n    });\n    options.addDeclaration({\n        name: 'excludeExternals',\n        help: 'Prevent externally resolved TypeScript files from being documented.',\n        type: ParameterType.Boolean\n    });\n    options.addDeclaration({\n        name: 'excludeNotExported',\n        help: 'Prevent symbols that are not exported from being documented.',\n        type: ParameterType.Boolean\n    });\n    options.addDeclaration({\n        name: 'excludeNotDocumented',\n        help: 'Prevent symbols that are not explicitly documented from appearing in the results.',\n        type: ParameterType.Boolean\n    });\n    options.addDeclaration({\n        name: 'excludePrivate',\n        help: 'Ignores private variables and methods',\n        type: ParameterType.Boolean\n    });\n    options.addDeclaration({\n        name: 'excludeProtected',\n        help: 'Ignores protected variables and methods',\n        type: ParameterType.Boolean\n    });\n    options.addDeclaration({\n        name: 'ignoreCompilerErrors',\n        help: 'Skips checking for TypeScript compilation errors if set.',\n        type: ParameterType.Boolean\n    });\n    options.addDeclaration({\n        name: 'disableSources',\n        help: 'Disables setting the source of a reflection when documenting it.',\n        type: ParameterType.Boolean\n    });\n    options.addDeclaration({\n        name: 'includes',\n        help: 'Specifies the location to look for included documents (use [[include:FILENAME]] in comments).',\n        hint: ParameterHint.Directory\n    });\n    options.addDeclaration({\n        name: 'media',\n        help: 'Specifies the location with media files that should be copied to the output directory.',\n        hint: ParameterHint.Directory\n    });\n\n    options.addDeclaration({\n        name: 'out',\n        help: 'Specifies the location the documentation should be written to.',\n        hint: ParameterHint.Directory\n    });\n    options.addDeclaration({\n        name: 'json',\n        help: 'Specifies the location and file name a json file describing the project is written to.',\n        hint: ParameterHint.File\n    });\n\n    options.addDeclaration({\n        name: 'theme',\n        help: 'Specify the path to the theme that should be used or \\'default\\' or \\'minimal\\' to use built-in themes.',\n        type: ParameterType.String,\n        defaultValue: 'default'\n    });\n    options.addDeclaration({\n        name: 'name',\n        help: 'Set the name of the project that will be used in the header of the template.'\n    });\n    options.addDeclaration({\n        name: 'includeVersion',\n        help: 'Add the package version to the project name.',\n        type: ParameterType.Boolean\n    });\n    options.addDeclaration({\n        name: 'excludeTags',\n        help: 'Remove the listed tags from doc comments.',\n        type: ParameterType.Array\n    });\n    options.addDeclaration({\n        name: 'readme',\n        help: 'Path to the readme file that should be displayed on the index page. Pass `none` to disable the index page and start the documentation on the globals page.'\n    });\n    options.addDeclaration({\n        name: 'defaultCategory',\n        help: 'Specifies the default category for reflections without a category.',\n        defaultValue: 'Other'\n    });\n    options.addDeclaration({\n        name: 'categoryOrder',\n        help: 'Specifies the order in which categories appear. * indicates the relative order for categories not in the list.',\n        type: ParameterType.Array\n    });\n    options.addDeclaration({\n        name: 'categorizeByGroup',\n        help: 'Specifies whether categorization will be done at the group level.',\n        type: ParameterType.Boolean,\n        defaultValue: true\n    });\n    options.addDeclaration({\n        name: 'gitRevision',\n        help: 'Use specified revision instead of the last revision for linking to GitHub source files.'\n    });\n    options.addDeclaration({\n        name: 'gitRemote',\n        help: 'Use the specified remote for linking to GitHub source files.',\n        defaultValue: 'origin'\n    });\n    options.addDeclaration({\n        name: 'gaID',\n        help: 'Set the Google Analytics tracking ID and activate tracking code.'\n    });\n    options.addDeclaration({\n        name: 'gaSite',\n        help: 'Set the site name for Google Analytics. Defaults to `auto`.',\n        defaultValue: 'auto'\n    });\n    options.addDeclaration({\n        name: 'hideGenerator',\n        help: 'Do not print the TypeDoc link at the end of the page.',\n        type: ParameterType.Boolean\n    });\n    options.addDeclaration({\n        name: 'toc',\n        help: 'Define the contents of the top level table of contents as a comma-separated list of global symbols.',\n        type: ParameterType.Array\n    });\n    options.addDeclaration({\n        name: 'disableOutputCheck',\n        help: 'Should TypeDoc disable the testing and cleaning of the output directory?',\n        type: ParameterType.Boolean\n    });\n\n    options.addDeclaration({\n        name: 'help',\n        short: 'h',\n        help: 'Print this message.',\n        type: ParameterType.Boolean\n    });\n    options.addDeclaration({\n        name: 'version',\n        short: 'v',\n        help: \"Print TypeDoc's version.\",\n        type: ParameterType.Boolean\n    });\n    options.addDeclaration({\n        name: 'plugin',\n        help: 'Specify the npm plugins that should be loaded. Omit to load all installed plugins, set to \\'none\\' to load no plugins.',\n        type: ParameterType.Array\n    });\n    options.addDeclaration({\n        name: 'logger',\n        help: \"Specify the logger that should be used, 'none' or 'console'\",\n        defaultValue: 'console',\n        type: ParameterType.Mixed\n    });\n    options.addDeclaration({\n        name: 'listInvalidSymbolLinks',\n        help: 'Emits a list of broken symbol [[navigation]] links after documentation generation',\n        type: ParameterType.Boolean\n    });\n}\n"]}