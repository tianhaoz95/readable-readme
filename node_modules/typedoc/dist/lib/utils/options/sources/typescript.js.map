{"version":3,"file":"typescript.js","sourceRoot":"","sources":["../../../../../src/lib/utils/options/sources/typescript.ts"],"names":[],"mappings":";;AAAA,4CAA4C;AAE5C,gDAAwG;AAGxG,MAAM,eAAe,GAAG;IACpB,KAAK;IACL,SAAS;IACT,MAAM;IACN,qBAAqB;IACrB,OAAO;IACP,aAAa;IACb,gBAAgB;IAChB,gBAAgB;IAChB,SAAS;IACT,WAAW;IACX,eAAe;IACf,gBAAgB;IAChB,aAAa;IACb,iBAAiB;IAGjB,gBAAgB;CACV,CAAC;AAUE,QAAA,OAAO,GAAwB,IAAI,GAAG,CAAC,eAAe,CAAC,CAAC;AAQrE,SAAgB,YAAY,CAAC,SAAkB;IAC3C,SAAS,CAAC,eAAe,CAAC,GAAG,CAAC,kBAAkB;SAC3C,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,eAAO,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;SACvC,GAAG,CAAC,mBAAmB,CAAC,CAAC,CAAC;AACnC,CAAC;AAJD,oCAIC;AAED,SAAS,mBAAmB,CAAC,MAA6B;IACtD,MAAM,KAAK,GAA+B;QACtC,IAAI,EAAE,MAAM,CAAC,IAAI;QACjB,KAAK,EAAE,MAAM,CAAC,SAAS;QACvB,IAAI,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;QACtD,KAAK,EAAE,4BAAc,CAAC,UAAU;KACnC,CAAC;IAEF,QAAQ,MAAM,CAAC,IAAI,EAAE;QACjB,KAAK,QAAQ;YACT,KAAK,CAAC,IAAI,GAAG,2BAAa,CAAC,MAAM,CAAC;YAClC,MAAM;QACV,KAAK,SAAS;YACV,KAAK,CAAC,IAAI,GAAG,2BAAa,CAAC,OAAO,CAAC;YACnC,MAAM;QACV,KAAK,QAAQ;YACT,KAAK,CAAC,IAAI,GAAG,2BAAa,CAAC,MAAM,CAAC;YAClC,MAAM;QACV,KAAK,MAAM;YACP,KAAK,CAAC,IAAI,GAAG,2BAAa,CAAC,KAAK,CAAC;YACjC,MAAM;QACV,KAAK,QAAQ;YACT,KAAK,CAAC,IAAI,GAAG,2BAAa,CAAC,KAAK,CAAC;YACjC,MAAM;QACV;YACI,KAAK,CAAC,IAAI,GAAG,2BAAa,CAAC,GAAG,CAAC;YAC9B,KAAmC,CAAC,GAAG,GAAG,MAAM,CAAC,IAAI,CAAC;KAC9D;IAED,OAAO,KAA0B,CAAC;AACtC,CAAC","sourcesContent":["import * as _ts from '../../../ts-internal';\n\nimport { DeclarationOption, ParameterScope, ParameterType, MapDeclarationOption } from '../declaration';\nimport { Options } from '../options';\n\nconst IGNORED_OPTIONS = [\n    'out',\n    'version',\n    'help',\n    'emitDeclarationOnly',\n    'watch',\n    'declaration',\n    'declarationDir',\n    'declarationMap',\n    'mapRoot',\n    'sourceMap',\n    'inlineSources',\n    'removeComments',\n    'incremental',\n    'tsBuildInfoFile',\n    // This is not a TS option, but TypeScript will add it to the compiler options\n    // so we need to remove it or TypeDoc will error since it isn't declared.\n    'configFilePath'\n] as const;\n\n/**\n * The ignored option keys as a type.\n */\nexport type IgnoredTsOptionKeys = typeof IGNORED_OPTIONS[number];\n\n/**\n * A list of all TypeScript parameters that should be ignored.\n */\nexport const IGNORED: ReadonlySet<string> = new Set(IGNORED_OPTIONS);\n\n/**\n * Discovers and contributes options declared by TypeScript.\n *\n * TypeDoc accepts many of the same options as TypeScript itself, so they must be parsed\n * from TypeScript's metadata and declared on TypeDoc's Option parser.\n */\nexport function addTSOptions(container: Options) {\n    container.addDeclarations(_ts.optionDeclarations\n        .filter(decl => !IGNORED.has(decl.name))\n        .map(createTSDeclaration));\n}\n\nfunction createTSDeclaration(option: _ts.CommandLineOption): DeclarationOption {\n    const param: Partial<DeclarationOption> = {\n        name: option.name,\n        short: option.shortName,\n        help: option.description ? option.description.key : '',\n        scope: ParameterScope.TypeScript\n    };\n\n    switch (option.type) {\n        case 'number':\n            param.type = ParameterType.Number;\n            break;\n        case 'boolean':\n            param.type = ParameterType.Boolean;\n            break;\n        case 'string':\n            param.type = ParameterType.String;\n            break;\n        case 'list':\n            param.type = ParameterType.Array;\n            break;\n        case 'object':\n            param.type = ParameterType.Mixed;\n            break;\n        default:\n            param.type = ParameterType.Map;\n            (param as MapDeclarationOption<any>).map = option.type;\n    }\n\n    return param as DeclarationOption;\n}\n"]}