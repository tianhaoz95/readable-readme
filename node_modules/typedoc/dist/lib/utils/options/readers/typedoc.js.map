{"version":3,"file":"typedoc.js","sourceRoot":"","sources":["../../../../../src/lib/utils/options/readers/typedoc.ts"],"names":[],"mappings":";;AAAA,6BAA6B;AAC7B,yBAAyB;AAWzB,MAAa,aAAa;IAA1B;QAII,aAAQ,GAAG,GAAG,CAAC;QAEf,SAAI,GAAG,cAAc,CAAC;IAwD1B,CAAC;IAjDG,IAAI,CAAC,SAAkB,EAAE,MAAc;QACnC,MAAM,IAAI,GAAG,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;QAC3C,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAEhD,IAAI,CAAC,IAAI,EAAE;YACP,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE;gBACjC,MAAM,CAAC,KAAK,CAAC,2DAA2D,IAAI,EAAE,CAAC,CAAC;aACnF;YACD,OAAO;SACV;QAED,IAAI,IAAI,GAAQ,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9B,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;YAC1B,MAAM,CAAC,KAAK,CAAC,YAAY,IAAI,oBAAoB,CAAC,CAAC;YACnD,OAAO;SACV;QAED,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,CAAC,YAAY,IAAI,IAAI,CAAC,EAAE;YAC1C,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClE,OAAO,IAAI,CAAC,GAAG,CAAC;SACnB;QAED,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;YAC5B,EAAE,KAAI,CAAC;YACP,GAAG,CAAC,MAAM;gBACN,KAAK,MAAM,GAAG,IAAI,MAAM,EAAE;oBACtB,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;iBAC7B;YACL,CAAC;SACJ,CAAC,CAAC;IACP,CAAC;IAUO,eAAe,CAAC,IAAY,EAAE,MAAc;QAChD,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAE1B,OAAO;YACH,IAAI;YACJ,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,cAAc,CAAC;YAC/B,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC;SAChC,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC;IACtE,CAAC;CACJ;AA9DD,sCA8DC","sourcesContent":["import * as Path from 'path';\nimport * as FS from 'fs';\nimport * as _ from 'lodash';\n\nimport { OptionsReader } from '..';\nimport { Logger } from '../../loggers';\nimport { Options } from '../options';\n\n/**\n * Obtains option values from typedoc.json\n * or typedoc.js (discouraged since ~0.14, don't fully deprecate until API has stabilized)\n */\nexport class TypeDocReader implements OptionsReader {\n    /**\n     * Should run before the tsconfig reader so that it can specify a tsconfig file to read.\n     */\n    priority = 100;\n\n    name = 'typedoc-json';\n\n    /**\n     * Read user configuration from a typedoc.json or typedoc.js configuration file.\n     * @param container\n     * @param logger\n     */\n    read(container: Options, logger: Logger): void {\n        const path = container.getValue('options');\n        const file = this.findTypedocFile(path, logger);\n\n        if (!file) {\n            if (!container.isDefault('options')) {\n                logger.error(`The options file could not be found with the given path ${path}`);\n            }\n            return;\n        }\n\n        let data: any = require(file);\n        if (typeof data !== 'object') {\n            logger.error(`The file ${file} is not an object.`);\n            return;\n        }\n        // deprecate: data.src is alias to inputFiles as of 0.16, warn in 0.17, remove in 0.19\n        if ('src' in data && !('inputFiles' in data)) {\n            data.inputFiles = Array.isArray(data.src) ? data.src : [data.src];\n            delete data.src;\n        }\n\n        container.setValues(data).match({\n            ok() {},\n            err(errors) {\n                for (const err of errors) {\n                    logger.error(err.message);\n                }\n            }\n        });\n    }\n\n    /**\n     * Search for the typedoc.js or typedoc.json file from the given path\n     *\n     * @param  path Path to the typedoc.(js|json) file. If path is a directory\n     *   typedoc file will be attempted to be found at the root of this path\n     * @param logger\n     * @return the typedoc.(js|json) file path or undefined\n     */\n    private findTypedocFile(path: string, logger: Logger): string | undefined {\n        path = Path.resolve(path);\n\n        return [\n            path,\n            Path.join(path, 'typedoc.json'),\n            Path.join(path, 'typedoc.js')\n        ].find(path => FS.existsSync(path) && FS.statSync(path).isFile());\n    }\n}\n"]}