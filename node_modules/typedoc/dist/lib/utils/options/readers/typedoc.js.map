{"version":3,"file":"typedoc.js","sourceRoot":"","sources":["../../../../../src/lib/utils/options/readers/typedoc.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from 'path';\nimport * as FS from 'fs';\nimport { cloneDeep } from 'lodash';\n\nimport { OptionsReader } from '..';\nimport { Logger } from '../../loggers';\nimport { Options } from '../options';\n\n/**\n * Obtains option values from typedoc.json\n * or typedoc.js (discouraged since ~0.14, don't fully deprecate until API has stabilized)\n */\nexport class TypeDocReader implements OptionsReader {\n    /**\n     * Should run before the tsconfig reader so that it can specify a tsconfig file to read.\n     */\n    priority = 100;\n\n    name = 'typedoc-json';\n\n    /**\n     * Read user configuration from a typedoc.json or typedoc.js configuration file.\n     * @param container\n     * @param logger\n     */\n    read(container: Options, logger: Logger): void {\n        const path = container.getValue('options');\n        const file = this.findTypedocFile(path);\n\n        if (!file) {\n            if (!container.isDefault('options')) {\n                logger.error(`The options file could not be found with the given path ${path}`);\n            }\n            return;\n        }\n\n        const seen = new Set<string>();\n        this.readFile(file, container, logger, seen);\n    }\n\n    /**\n     * Read the given options file + any extended files.\n     * @param file\n     * @param container\n     * @param logger\n     */\n    private readFile(file: string, container: Options & { setValue(key: string, value: unknown): void }, logger: Logger, seen: Set<string>) {\n        if (seen.has(file)) {\n            logger.error(`Tried to load the options file ${file} multiple times.`);\n            return;\n        }\n        seen.add(file);\n\n        const fileContent: unknown = require(file);\n\n        if (typeof fileContent !== 'object' || !fileContent) {\n            logger.error(`The file ${file} is not an object.`);\n            return;\n        }\n\n        // clone option object to avoid of property changes in re-calling this file\n        const data: object = cloneDeep(fileContent);\n\n        if ('extends' in data) {\n            const extended: string[] = getStringArray(data['extends']);\n            for (const extendedFile of extended) {\n                // Extends is relative to the file it appears in.\n                this.readFile(Path.resolve(Path.dirname(file), extendedFile), container, logger, seen);\n            }\n            delete data['extends'];\n        }\n\n        // deprecate: data.src is alias to inputFiles as of 0.16, warn in 0.17, remove in 0.19\n        if ('src' in data && !('inputFiles' in data)) {\n            logger.warn('The `src` configuration option has been deprecated in favor of `inputFiles` and will be removed in a future release.');\n            data['inputFiles'] = getStringArray(data['src']);\n            delete data['src'];\n        }\n\n        for (const [key, val] of Object.entries(data)) {\n            try {\n                container.setValue(key, val);\n            } catch (error) {\n                logger.error(error.message);\n            }\n        }\n    }\n\n    /**\n     * Search for the typedoc.js or typedoc.json file from the given path\n     *\n     * @param  path Path to the typedoc.(js|json) file. If path is a directory\n     *   typedoc file will be attempted to be found at the root of this path\n     * @param logger\n     * @return the typedoc.(js|json) file path or undefined\n     */\n    private findTypedocFile(path: string): string | undefined {\n        path = Path.resolve(path);\n\n        return [\n            path,\n            Path.join(path, 'typedoc.json'),\n            Path.join(path, 'typedoc.js')\n        ].find(path => FS.existsSync(path) && FS.statSync(path).isFile());\n    }\n}\n\nfunction getStringArray(arg: unknown): string[] {\n    return Array.isArray(arg) ? arg.map(String) : [String(arg)];\n}\n"]}