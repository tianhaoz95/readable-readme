{"version":3,"file":"arguments.js","sourceRoot":"","sources":["../../../../../src/lib/utils/options/readers/arguments.ts"],"names":[],"mappings":";;AAEA,gDAA+C;AAK/C,MAAa,eAAe;IAKxB,YAAY,QAAgB,EAAE,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QAJjD,SAAI,GAAG,WAAW,CAAC;QAKxB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;IACrB,CAAC;IAED,IAAI,CAAC,SAAkB,EAAE,MAAc;QAEnC,MAAM,OAAO,GAAG,SAGf,CAAC;QACF,MAAM,IAAI,GAAG,IAAI,GAAG,EAAU,CAAC;QAC/B,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,MAAM,MAAM,GAAG,CAAC,IAAY,EAAE,KAAc,EAAE,EAAE;YAC5C,IAAI;gBACA,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;aACjC;YAAC,OAAO,GAAG,EAAE;gBACV,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;aAC7B;QACL,CAAC,CAAC;QAEF,OAAO,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE;YAC7B,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC9B,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC;gBAC7B,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;gBAC7D,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,YAAY,CAAC,CAAC;YAE3C,IAAI,IAAI,EAAE;gBACN,IAAI,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,KAAK,2BAAa,CAAC,KAAK,EAAE;oBAC1D,MAAM,CAAC,IAAI,CAAC,IAAI,EAAG,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAc,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;iBACzF;qBAAM,IAAI,IAAI,CAAC,IAAI,KAAK,2BAAa,CAAC,OAAO,EAAE;oBAC5C,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;oBAErD,IAAI,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,OAAO,EAAE;wBACvC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,KAAK,MAAM,CAAC,CAAC;qBACvC;yBAAM;wBACH,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;wBAExB,KAAK,EAAE,CAAC;qBACX;iBACJ;qBAAM;oBACH,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;iBACvC;gBACD,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACvB;iBAAM;gBACH,MAAM,CAAC,KAAK,CAAC,mBAAmB,IAAI,EAAE,CAAC,CAAC;aAC3C;YAED,KAAK,EAAE,CAAC;SACX;IACL,CAAC;CACJ;AAzDD,0CAyDC","sourcesContent":["import { OptionsReader, Options } from '..';\nimport { Logger } from '../../loggers';\nimport { ParameterType } from '../declaration';\n\n/**\n * Obtains option values from command-line arguments\n */\nexport class ArgumentsReader implements OptionsReader {\n    readonly name = 'arguments';\n    readonly priority: number;\n    private args: string[];\n\n    constructor(priority: number, args = process.argv.slice(2)) {\n        this.priority = priority;\n        this.args = args;\n    }\n\n    read(container: Options, logger: Logger): void {\n        // Make container's type more lax, we do the appropriate checks manually.\n        const options = container as Options & {\n            setValue(name: string, value: unknown): void;\n            getValue(name: string): unknown;\n        };\n        const seen = new Set<string>();\n        let index = 0;\n\n        const trySet = (name: string, value: unknown) => {\n            try {\n                options.setValue(name, value);\n            } catch (err) {\n                logger.error(err.message);\n            }\n        };\n\n        while (index < this.args.length) {\n            const name = this.args[index];\n            const decl = name.startsWith('-')\n                ? (index++, options.getDeclaration(name.replace(/^--?/, '')))\n                : options.getDeclaration('inputFiles');\n\n            if (decl) {\n                if (seen.has(decl.name) && decl.type === ParameterType.Array) {\n                    trySet(decl.name, (options.getValue(decl.name) as string[]).concat(this.args[index]));\n                } else if (decl.type === ParameterType.Boolean) {\n                    const value = String(this.args[index]).toLowerCase();\n\n                    if (value === 'true' || value === 'false') {\n                        trySet(decl.name, value === 'true');\n                    } else {\n                        trySet(decl.name, true);\n                        // Bool option didn't consume the next argument as expected.\n                        index--;\n                    }\n                } else {\n                    trySet(decl.name, this.args[index]);\n                }\n                seen.add(decl.name);\n            } else {\n                logger.error(`Unknown option: ${name}`);\n            }\n\n            index++;\n        }\n    }\n}\n"]}