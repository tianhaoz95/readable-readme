{"version":3,"file":"tsconfig.js","sourceRoot":"","sources":["../../../../../src/lib/utils/options/readers/tsconfig.ts"],"names":[],"mappings":"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","sourcesContent":["import { resolve, dirname, basename } from 'path';\nimport { existsSync, statSync } from 'fs';\n\nimport * as ts from 'typescript';\n\nimport { OptionsReader, Options } from '../options';\nimport { Logger } from '../../loggers';\nimport { IGNORED } from '../sources/typescript';\n\nfunction isFile(file: string) {\n    return existsSync(file) && statSync(file).isFile();\n}\n\nexport class TSConfigReader implements OptionsReader {\n    /**\n     * Note: Runs after the [[TypeDocReader]].\n     */\n    priority = 200;\n\n    name = 'tsconfig-json';\n\n    read(container: Options, logger: Logger): void {\n        const tsconfigOpt = container.getValue('tsconfig');\n        const projectOpt = container.getCompilerOptions().project;\n\n        if (!container.isDefault('tsconfig')) {\n            this._tryReadOptions(tsconfigOpt, container, logger);\n            return;\n        }\n\n        if (projectOpt) {\n            this._tryReadOptions(projectOpt, container, logger);\n            return;\n        }\n\n        // Don't log errors if we try to read by default.\n        this._tryReadOptions(tsconfigOpt, container);\n    }\n\n    private _tryReadOptions(file: string, container: Options, logger?: Logger): void {\n        let fileToRead: string | undefined = file;\n        if (!isFile(fileToRead)) {\n            fileToRead = ts.findConfigFile(file, isFile, file.toLowerCase().endsWith('.json') ? basename(file) : undefined);\n        }\n\n        if (!fileToRead || !isFile(fileToRead)) {\n            logger?.error(`The tsconfig file ${file} does not exist`);\n            return;\n        }\n\n        fileToRead = resolve(fileToRead);\n\n        const { config } = ts.readConfigFile(fileToRead, ts.sys.readFile);\n        const { fileNames, options, raw: { typedocOptions = {} }} = ts.parseJsonConfigFileContent(\n            config,\n            ts.sys,\n            dirname(fileToRead),\n            {},\n            fileToRead);\n\n        container.setValue('inputFiles', fileNames).unwrap();\n        for (const key of IGNORED) {\n            delete options[key];\n        }\n\n        if (typedocOptions.options) {\n            logger?.error([\n                'typedocOptions in tsconfig file specifies an option file to read but the option',\n                'file has already been read. This is likely a misconfiguration.'\n            ].join(' '));\n            delete typedocOptions.options;\n        }\n\n        container.setValues(options).mapErr(errors => {\n            for (const err of errors) {\n                logger?.error(err.message);\n            }\n        });\n        container.setValues(typedocOptions || {}).mapErr(errors => {\n            for (const err of errors) {\n                logger?.error(err.message);\n            }\n        });\n    }\n\n}\n"]}