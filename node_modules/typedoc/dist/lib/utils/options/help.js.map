{"version":3,"file":"help.js","sourceRoot":"","sources":["../../../../src/lib/utils/options/help.ts"],"names":[],"mappings":"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","sourcesContent":["import { Options } from \"./options\";\nimport {\n    ParameterHint,\n    StringDeclarationOption,\n    ParameterType,\n    DeclarationOption,\n} from \"./declaration\";\nimport { getSupportedLanguages } from \"../highlighter\";\n\nexport interface ParameterHelp {\n    names: string[];\n    helps: string[];\n    margin: number;\n}\n\nfunction hasHint(\n    parameter: DeclarationOption\n): parameter is StringDeclarationOption & { hint: ParameterHint } {\n    return (\n        (parameter.type ?? ParameterType.String) === ParameterType.String &&\n        \"hint\" in parameter\n    );\n}\n\n/**\n * Prepare parameter information for the [[toString]] method.\n *\n * @param scope  The scope of the parameters whose help should be returned.\n * @returns The columns and lines for the help of the requested parameters.\n */\nfunction getParameterHelp(options: Options): ParameterHelp {\n    const parameters = options.getDeclarations();\n    parameters.sort((a, b) =>\n        a.name.localeCompare(b.name, undefined, { sensitivity: \"base\" })\n    );\n\n    const names: string[] = [];\n    const helps: string[] = [];\n    let margin = 0;\n\n    for (const parameter of parameters) {\n        if (!parameter.help) {\n            continue;\n        }\n\n        let name = \" --\" + parameter.name;\n        if (hasHint(parameter)) {\n            name += \" \" + ParameterHint[parameter.hint].toUpperCase();\n        }\n\n        names.push(name);\n        helps.push(parameter.help);\n        margin = Math.max(name.length, margin);\n    }\n\n    return { names, helps, margin };\n}\n\nfunction toEvenColumns(values: string[], maxLineWidth: number) {\n    const columnWidth =\n        values.reduce((acc, val) => Math.max(acc, val.length), 0) + 2;\n\n    const numColumns = Math.max(1, Math.min(maxLineWidth / columnWidth));\n    let line = \"\";\n    const out: string[] = [];\n\n    for (let i = 0; i < values.length; ++i) {\n        if (i !== 0 && i % numColumns === 0) {\n            out.push(line);\n            line = \"\";\n        }\n        line += values[i].padEnd(columnWidth);\n    }\n    if (line != \"\") {\n        out.push(line);\n    }\n\n    return out;\n}\n\nexport function getOptionsHelp(options: Options): string {\n    const output = [\"Usage:\", \"  typedoc path/to/entry.ts\", \"\", \"Options:\"];\n\n    const columns = getParameterHelp(options);\n    for (let i = 0; i < columns.names.length; i++) {\n        const usage = columns.names[i];\n        const description = columns.helps[i];\n        output.push(usage.padEnd(columns.margin + 2) + description);\n    }\n\n    output.push(\n        \"\",\n        \"Supported highlighting languages:\",\n        ...toEvenColumns(getSupportedLanguages(), 80)\n    );\n\n    return output.join(\"\\n\");\n}\n"]}