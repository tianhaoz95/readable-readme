{"version":3,"file":"block.js","sourceRoot":"","sources":["../../../../src/lib/converter/nodes/block.ts"],"names":[],"mappings":";;;;;;;;AAAA,iCAAiC;AAEjC,8CAAgF;AAChF,8CAAuD;AAEvD,8CAAkE;AAClE,uCAAyD;AAEzD,MAAM,SAAS,GAAoB;IAC/B,EAAE,CAAC,UAAU,CAAC,gBAAgB;IAC9B,EAAE,CAAC,UAAU,CAAC,oBAAoB;IAClC,EAAE,CAAC,UAAU,CAAC,eAAe;CAChC,CAAC;AAGF,IAAa,cAAc,GAA3B,MAAa,cAAe,SAAQ,mCAA6D;IAAjG;;QAOI,aAAQ,GAAoB;YACxB,EAAE,CAAC,UAAU,CAAC,KAAK;YACnB,EAAE,CAAC,UAAU,CAAC,WAAW;YACzB,EAAE,CAAC,UAAU,CAAC,UAAU;SAC3B,CAAC;IA6DN,CAAC;IApDG,OAAO,CAAC,OAAgB,EAAE,IAA2C;QACjE,IAAI,IAAI,CAAC,IAAI,KAAK,EAAE,CAAC,UAAU,CAAC,UAAU,EAAE;YACxC,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;SACzC;aAAM;YACH,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;SACzC;QAED,OAAO,OAAO,CAAC,KAAK,CAAC;IACzB,CAAC;IASO,iBAAiB,CAAC,OAAgB,EAAE,IAAmB;QAC3D,IAAI,MAAM,GAA2B,OAAO,CAAC,KAAK,CAAC;QAEnD,OAAO,CAAC,cAAc,CAAC,IAAI,EAAE,GAAG,EAAE;YAC9B,IAAI,IAAI,CAAC,IAAI,KAAK,sBAAc,CAAC,OAAO,EAAE;gBACtC,MAAM,GAAG,yBAAiB,CAAC,OAAO,EAAE,IAAI,EAAE,sBAAc,CAAC,cAAc,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACxF,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,GAAG,EAAE;oBAC3B,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;oBACtC,MAAO,CAAC,OAAO,CAAC,sBAAc,CAAC,QAAQ,CAAC,CAAC;gBAC7C,CAAC,CAAC,CAAC;aACN;iBAAM;gBACH,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;aACzC;QACL,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IAClB,CAAC;IAEO,iBAAiB,CAAC,OAAgB,EAAE,IAA2C;QACnF,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,MAAM,UAAU,GAAmB,EAAE,CAAC;YAEtC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;gBAClC,IAAI,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;oBACpC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;iBAC9C;qBAAM;oBACH,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBAC9B;YACL,CAAC,CAAC,CAAC;YAEH,UAAU,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,EAAE;gBAC7B,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YAC/C,CAAC,CAAC,CAAC;SACN;IACL,CAAC;CACJ,CAAA;AAtEG;IADC,kBAAU,CAAC,MAAM,CAAC;4CACG;AAFb,cAAc;IAD1B,sBAAS,CAAC,EAAC,IAAI,EAAE,YAAY,EAAC,CAAC;GACnB,cAAc,CAwE1B;AAxEY,wCAAc","sourcesContent":["import * as ts from 'typescript';\n\nimport { Reflection, ReflectionKind, ReflectionFlag } from '../../models/index';\nimport { createDeclaration } from '../factories/index';\nimport { Context } from '../context';\nimport { Component, ConverterNodeComponent } from '../components';\nimport { BindOption, SourceFileMode } from '../../utils';\n\nconst preferred: ts.SyntaxKind[] = [\n    ts.SyntaxKind.ClassDeclaration,\n    ts.SyntaxKind.InterfaceDeclaration,\n    ts.SyntaxKind.EnumDeclaration\n];\n\n@Component({name: 'node:block'})\nexport class BlockConverter extends ConverterNodeComponent<ts.SourceFile|ts.Block|ts.ModuleBlock> {\n    @BindOption('mode')\n    mode!: SourceFileMode;\n\n    /**\n     * List of supported TypeScript syntax kinds.\n     */\n    supports: ts.SyntaxKind[] = [\n        ts.SyntaxKind.Block,\n        ts.SyntaxKind.ModuleBlock,\n        ts.SyntaxKind.SourceFile\n    ];\n\n    /**\n     * Analyze the given class declaration node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The class declaration node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    convert(context: Context, node: ts.SourceFile|ts.Block|ts.ModuleBlock): Reflection {\n        if (node.kind === ts.SyntaxKind.SourceFile) {\n            this.convertSourceFile(context, node);\n        } else {\n            this.convertStatements(context, node);\n        }\n\n        return context.scope;\n    }\n\n    /**\n     * Analyze the given source file node and create a suitable reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param node     The source file node that should be analyzed.\n     * @return The resulting reflection or NULL.\n     */\n    private convertSourceFile(context: Context, node: ts.SourceFile): Reflection | undefined {\n        let result: Reflection | undefined = context.scope;\n\n        context.withSourceFile(node, () => {\n            if (this.mode === SourceFileMode.Modules) {\n                result = createDeclaration(context, node, ReflectionKind.ExternalModule, node.fileName);\n                context.withScope(result, () => {\n                    this.convertStatements(context, node);\n                    result!.setFlag(ReflectionFlag.Exported);\n                });\n            } else {\n                this.convertStatements(context, node);\n            }\n        });\n\n        return result;\n    }\n\n    private convertStatements(context: Context, node: ts.SourceFile|ts.Block|ts.ModuleBlock) {\n        if (node.statements) {\n            const statements: ts.Statement[] = [];\n\n            node.statements.forEach((statement) => {\n                if (preferred.includes(statement.kind)) {\n                    this.owner.convertNode(context, statement);\n                } else {\n                    statements.push(statement);\n                }\n            });\n\n            statements.forEach((statement) => {\n                this.owner.convertNode(context, statement);\n            });\n        }\n    }\n}\n"]}