{"version":3,"file":"query.js","sourceRoot":"","sources":["../../../../src/lib/converter/types/query.ts"],"names":[],"mappings":";;;;;;;;AAAA,iCAAiC;AAEjC,oDAA2D;AAC3D,8CAAqF;AAErF,4CAAmD;AAGnD,IAAa,cAAc,GAA3B,MAAa,cAAe,SAAQ,mCAAsB;IACtD,YAAY,CAAC,QAAiB,EAAE,IAAa;QACzC,OAAO,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC;IAED,WAAW,CAAC,OAAgB,EAAE,IAAsB;QAChD,MAAM,WAAW,GAAG,OAAO,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC/D,IAAI,WAAW,EAAE;YACb,MAAM,SAAS,GAAG,+BAAmB,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;YAC5D,IAAI,SAAS,EAAE;gBACX,OAAO,IAAI,iBAAS,CAAC,SAAS,CAAC,CAAC;aACnC;SACJ;IACL,CAAC;CAEJ,CAAA;AAfY,cAAc;IAD1B,sBAAS,CAAC,EAAC,IAAI,EAAE,YAAY,EAAC,CAAC;GACnB,cAAc,CAe1B;AAfY,wCAAc","sourcesContent":["import * as ts from 'typescript';\n\nimport { Type, QueryType } from '../../models/types/index';\nimport { Component, ConverterTypeComponent, TypeNodeConverter } from '../components';\nimport { Context } from '../context';\nimport { createReferenceType } from '../factories';\n\n@Component({name: 'type:query'})\nexport class QueryConverter extends ConverterTypeComponent implements TypeNodeConverter<ts.Type, ts.TypeQueryNode> {\n    supportsNode(_context: Context, node: ts.Node): boolean {\n        return ts.isTypeQueryNode(node);\n    }\n\n    convertNode(context: Context, node: ts.TypeQueryNode): Type | undefined {\n        const querySymbol = context.getSymbolAtLocation(node.exprName);\n        if (querySymbol) {\n            const reference = createReferenceType(context, querySymbol);\n            if (reference) {\n                return new QueryType(reference);\n            }\n        }\n    }\n\n}\n"]}