{"version":3,"file":"convert-expression.js","sourceRoot":"","sources":["../../../src/lib/converter/convert-expression.ts"],"names":[],"mappings":";;;AAAA,iCAAiC;AAEjC;;;;;GAKG;AACH,SAAgB,mBAAmB,CAC/B,IAAgC;IAEhC,MAAM,OAAO,GAAG,IAAW,CAAC;IAC5B,IAAI,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,WAAW,EAAE;QACtB,OAAO,iBAAiB,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;KACjD;SAAM;QACH,OAAO,SAAS,CAAC;KACpB;AACL,CAAC;AATD,kDASC;AAED,SAAgB,iBAAiB,CAC7B,UAAyB;IAEzB,QAAQ,UAAU,CAAC,IAAI,EAAE;QACrB,KAAK,EAAE,CAAC,UAAU,CAAC,aAAa,CAAC;QACjC,KAAK,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC;QAC/B,KAAK,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC;QAChC,KAAK,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC;QAC/B,KAAK,EAAE,CAAC,UAAU,CAAC,cAAc,CAAC;QAClC,KAAK,EAAE,CAAC,UAAU,CAAC,qBAAqB;YACpC,OAAO,UAAU,CAAC,OAAO,EAAE,CAAC;QAChC;YACI,0EAA0E;YAC1E,kDAAkD;YAClD,OAAO,KAAK,CAAC;KACpB;AACL,CAAC;AAhBD,8CAgBC","sourcesContent":["import * as ts from \"typescript\";\n\n/**\n * Return the default value of the given node.\n *\n * @param node  The TypeScript node whose default value should be extracted.\n * @returns The default value as a string.\n */\nexport function convertDefaultValue(\n    node: ts.Declaration | undefined\n): string | undefined {\n    const anyNode = node as any;\n    if (anyNode?.initializer) {\n        return convertExpression(anyNode.initializer);\n    } else {\n        return undefined;\n    }\n}\n\nexport function convertExpression(\n    expression: ts.Expression\n): string | undefined {\n    switch (expression.kind) {\n        case ts.SyntaxKind.StringLiteral:\n        case ts.SyntaxKind.TrueKeyword:\n        case ts.SyntaxKind.FalseKeyword:\n        case ts.SyntaxKind.NullKeyword:\n        case ts.SyntaxKind.NumericLiteral:\n        case ts.SyntaxKind.PrefixUnaryExpression:\n            return expression.getText();\n        default:\n            // More complex expressions are generally not useful in the documentation.\n            // Show that there was a value, but not specifics.\n            return \"...\";\n    }\n}\n"]}