{"version":3,"file":"types.js","sourceRoot":"","sources":["../../../src/lib/converter/types.ts"],"names":[],"mappings":"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","sourcesContent":["import * as assert from \"assert\";\nimport * as ts from \"typescript\";\nimport {\n    ArrayType,\n    ConditionalType,\n    DeclarationReflection,\n    IndexedAccessType,\n    InferredType,\n    IntersectionType,\n    IntrinsicType,\n    NamedTupleMember,\n    PredicateType,\n    QueryType,\n    ReferenceType,\n    ReflectionKind,\n    ReflectionType,\n    LiteralType,\n    TupleType,\n    Type,\n    TypeOperatorType,\n    UnionType,\n    UnknownType,\n    MappedType,\n    SignatureReflection,\n} from \"../models\";\nimport { OptionalType } from \"../models/types/optional\";\nimport { RestType } from \"../models/types/rest\";\nimport { TemplateLiteralType } from \"../models/types/template-literal\";\nimport { zip } from \"../utils/array\";\nimport { Context } from \"./context\";\nimport { ConverterEvents } from \"./converter-events\";\nimport { convertIndexSignature } from \"./factories/index-signature\";\nimport {\n    convertParameterNodes,\n    convertTypeParameterNodes,\n    createSignature,\n} from \"./factories/signature\";\nimport { convertSymbol } from \"./symbols\";\nimport { removeUndefined } from \"./utils/reflections\";\n\nexport interface TypeConverter<\n    TNode extends ts.TypeNode = ts.TypeNode,\n    TType extends ts.Type = ts.Type\n> {\n    kind: TNode[\"kind\"][];\n    // getTypeAtLocation is expensive, so don't pass the type here.\n    convert(context: Context, node: TNode): Type;\n    // We use typeToTypeNode to figure out what method to call in the first place,\n    // so we have a non-type-checkable node here, necessary for some converters.\n    convertType(context: Context, type: TType, node: TNode): Type;\n}\n\nconst converters = new Map<ts.SyntaxKind, TypeConverter>();\nexport function loadConverters() {\n    if (converters.size) return;\n\n    for (const actor of [\n        arrayConverter,\n        conditionalConverter,\n        constructorConverter,\n        exprWithTypeArgsConverter,\n        functionTypeConverter,\n        importType,\n        indexedAccessConverter,\n        inferredConverter,\n        intersectionConverter,\n        jsDocVariadicTypeConverter,\n        keywordConverter,\n        optionalConverter,\n        parensConverter,\n        predicateConverter,\n        queryConverter,\n        typeLiteralConverter,\n        referenceConverter,\n        restConverter,\n        namedTupleMemberConverter,\n        mappedConverter,\n        ts3LiteralBooleanConverter,\n        ts3LiteralNullConverter,\n        ts3LiteralThisConverter,\n        literalTypeConverter,\n        templateLiteralConverter,\n        thisConverter,\n        tupleConverter,\n        typeOperatorConverter,\n        unionConverter,\n    ]) {\n        for (const key of actor.kind) {\n            if (key === undefined) {\n                // Might happen if running on an older TS version.\n                continue;\n            }\n            assert(!converters.has(key));\n            converters.set(key, actor);\n        }\n    }\n}\n\n// This ought not be necessary, but we need some way to discover recursively\n// typed symbols which do not have type nodes. See the `recursive` symbol in the variables test.\nconst seenTypeSymbols = new Set<ts.Symbol>();\n\nexport function convertType(\n    context: Context,\n    typeOrNode: ts.Type | ts.TypeNode | undefined\n) {\n    if (!typeOrNode) {\n        return new IntrinsicType(\"any\");\n    }\n\n    loadConverters();\n    if (\"kind\" in typeOrNode) {\n        const converter = converters.get(typeOrNode.kind);\n        if (converter) {\n            return converter.convert(context, typeOrNode);\n        }\n        return requestBugReport(context, typeOrNode);\n    }\n\n    // IgnoreErrors is important, without it, we can't assert that we will get a node.\n    const node = context.checker.typeToTypeNode(\n        typeOrNode,\n        void 0,\n        ts.NodeBuilderFlags.IgnoreErrors\n    );\n    assert(node); // According to the TS source of typeToString, this is a bug if it does not hold.\n\n    const symbol = typeOrNode.getSymbol();\n    if (symbol) {\n        if (\n            node.kind !== ts.SyntaxKind.TypeReference &&\n            node.kind !== ts.SyntaxKind.ArrayType &&\n            seenTypeSymbols.has(symbol)\n        ) {\n            const typeString = context.checker.typeToString(typeOrNode);\n            context.logger.verbose(\n                `Refusing to recurse when converting type: ${typeString}`\n            );\n            return new UnknownType(typeString);\n        }\n        seenTypeSymbols.add(symbol);\n    }\n\n    const converter = converters.get(node.kind);\n    if (converter) {\n        const result = converter.convertType(context, typeOrNode, node);\n        if (symbol) seenTypeSymbols.delete(symbol);\n        return result;\n    }\n\n    return requestBugReport(context, typeOrNode);\n}\n\nconst arrayConverter: TypeConverter<ts.ArrayTypeNode, ts.TypeReference> = {\n    kind: [ts.SyntaxKind.ArrayType],\n    convert(context, node) {\n        return new ArrayType(convertType(context, node.elementType));\n    },\n    convertType(context, type) {\n        const params = context.checker.getTypeArguments(type);\n        // This is *almost* always true... except for when this type is in the constraint of a type parameter see GH#1408\n        // assert(params.length === 1);\n        assert(params.length > 0);\n        return new ArrayType(convertType(context, params[0]));\n    },\n};\n\nconst conditionalConverter: TypeConverter<\n    ts.ConditionalTypeNode,\n    ts.ConditionalType\n> = {\n    kind: [ts.SyntaxKind.ConditionalType],\n    convert(context, node) {\n        return new ConditionalType(\n            convertType(context, node.checkType),\n            convertType(context, node.extendsType),\n            convertType(context, node.trueType),\n            convertType(context, node.falseType)\n        );\n    },\n    convertType(context, type) {\n        return new ConditionalType(\n            convertType(context, type.checkType),\n            convertType(context, type.extendsType),\n            convertType(context, type.resolvedTrueType),\n            convertType(context, type.resolvedFalseType)\n        );\n    },\n};\n\nconst constructorConverter: TypeConverter<ts.ConstructorTypeNode, ts.Type> = {\n    kind: [ts.SyntaxKind.ConstructorType],\n    convert(context, node) {\n        const symbol = context.getSymbolAtLocation(node) ?? node.symbol;\n        const type = context.getTypeAtLocation(node);\n        if (!symbol || !type) {\n            return new IntrinsicType(\"Function\");\n        }\n\n        const reflection = new DeclarationReflection(\n            \"__type\",\n            ReflectionKind.Constructor,\n            context.scope\n        );\n        const rc = context.withScope(reflection);\n        rc.setConvertingTypeNode();\n\n        context.registerReflection(reflection, symbol);\n        context.trigger(ConverterEvents.CREATE_DECLARATION, reflection, node);\n\n        const signature = new SignatureReflection(\n            \"__type\",\n            ReflectionKind.ConstructorSignature,\n            reflection\n        );\n        context.registerReflection(signature, void 0);\n        const signatureCtx = rc.withScope(signature);\n\n        reflection.signatures = [signature];\n        signature.type = convertType(signatureCtx, node.type);\n        signature.parameters = convertParameterNodes(\n            signatureCtx,\n            signature,\n            node.parameters\n        );\n        signature.typeParameters = convertTypeParameterNodes(\n            signatureCtx,\n            node.typeParameters\n        );\n\n        return new ReflectionType(reflection);\n    },\n    convertType(context, type) {\n        if (!type.symbol) {\n            return new IntrinsicType(\"Function\");\n        }\n\n        const reflection = new DeclarationReflection(\n            \"__type\",\n            ReflectionKind.Constructor,\n            context.scope\n        );\n        context.registerReflection(reflection, type.symbol);\n        context.trigger(ConverterEvents.CREATE_DECLARATION, reflection);\n\n        reflection.signatures = [\n            createSignature(\n                context.withScope(reflection),\n                ReflectionKind.ConstructorSignature,\n                type.getConstructSignatures()[0]\n            ),\n        ];\n\n        return new ReflectionType(reflection);\n    },\n};\n\nconst exprWithTypeArgsConverter: TypeConverter<\n    ts.ExpressionWithTypeArguments,\n    ts.Type\n> = {\n    kind: [ts.SyntaxKind.ExpressionWithTypeArguments],\n    convert(context, node) {\n        const targetSymbol = context.getSymbolAtLocation(node.expression);\n        // Mixins... we might not have a symbol here.\n        if (!targetSymbol) {\n            return convertType(\n                context,\n                context.checker.getTypeAtLocation(node)\n            );\n        }\n        const parameters =\n            node.typeArguments?.map((type) => convertType(context, type)) ?? [];\n        const ref = new ReferenceType(\n            targetSymbol.name,\n            context.resolveAliasedSymbol(targetSymbol),\n            context.project\n        );\n        ref.typeArguments = parameters;\n        return ref;\n    },\n    convertType: requestBugReport,\n};\n\nconst functionTypeConverter: TypeConverter<ts.FunctionTypeNode, ts.Type> = {\n    kind: [ts.SyntaxKind.FunctionType],\n    convert(context, node) {\n        const symbol = context.getSymbolAtLocation(node) ?? node.symbol;\n        const type = context.getTypeAtLocation(node);\n        if (!symbol || !type) {\n            return new IntrinsicType(\"Function\");\n        }\n\n        const reflection = new DeclarationReflection(\n            \"__type\",\n            ReflectionKind.TypeLiteral,\n            context.scope\n        );\n        const rc = context.withScope(reflection);\n\n        context.registerReflection(reflection, symbol);\n        context.trigger(ConverterEvents.CREATE_DECLARATION, reflection, node);\n\n        const signature = new SignatureReflection(\n            \"__type\",\n            ReflectionKind.CallSignature,\n            reflection\n        );\n        context.registerReflection(signature, void 0);\n        const signatureCtx = rc.withScope(signature);\n\n        reflection.signatures = [signature];\n        signature.type = convertType(signatureCtx, node.type);\n        signature.parameters = convertParameterNodes(\n            signatureCtx,\n            signature,\n            node.parameters\n        );\n        signature.typeParameters = convertTypeParameterNodes(\n            signatureCtx,\n            node.typeParameters\n        );\n\n        return new ReflectionType(reflection);\n    },\n    convertType(context, type) {\n        if (!type.symbol) {\n            return new IntrinsicType(\"Function\");\n        }\n\n        const reflection = new DeclarationReflection(\n            \"__type\",\n            ReflectionKind.TypeLiteral,\n            context.scope\n        );\n        context.registerReflection(reflection, type.symbol);\n        context.trigger(ConverterEvents.CREATE_DECLARATION, reflection);\n\n        reflection.signatures = [\n            createSignature(\n                context.withScope(reflection),\n                ReflectionKind.CallSignature,\n                type.getCallSignatures()[0]\n            ),\n        ];\n\n        return new ReflectionType(reflection);\n    },\n};\n\nconst importType: TypeConverter<ts.ImportTypeNode> = {\n    kind: [ts.SyntaxKind.ImportType],\n    convert(context, node) {\n        const name = node.qualifier?.getText() ?? \"__module\";\n        const symbol = context.checker.getSymbolAtLocation(node);\n        assert(symbol, \"Missing symbol when converting import type node\");\n        return new ReferenceType(name, symbol, context.project);\n    },\n    convertType(context, type) {\n        const symbol = type.getSymbol();\n        assert(symbol, \"Missing symbol when converting import type\"); // Should be a compiler error\n        return new ReferenceType(\"__module\", symbol, context.project);\n    },\n};\n\nconst indexedAccessConverter: TypeConverter<\n    ts.IndexedAccessTypeNode,\n    ts.IndexedAccessType\n> = {\n    kind: [ts.SyntaxKind.IndexedAccessType],\n    convert(context, node) {\n        return new IndexedAccessType(\n            convertType(context, node.objectType),\n            convertType(context, node.indexType)\n        );\n    },\n    convertType(context, type) {\n        return new IndexedAccessType(\n            convertType(context, type.objectType),\n            convertType(context, type.indexType)\n        );\n    },\n};\n\nconst inferredConverter: TypeConverter<ts.InferTypeNode> = {\n    kind: [ts.SyntaxKind.InferType],\n    convert(_context, node) {\n        return new InferredType(node.typeParameter.getText());\n    },\n    convertType(_context, type) {\n        return new InferredType(type.symbol.name);\n    },\n};\n\nconst intersectionConverter: TypeConverter<\n    ts.IntersectionTypeNode,\n    ts.IntersectionType\n> = {\n    kind: [ts.SyntaxKind.IntersectionType],\n    convert(context, node) {\n        return new IntersectionType(\n            node.types.map((type) => convertType(context, type))\n        );\n    },\n    convertType(context, type) {\n        return new IntersectionType(\n            type.types.map((type) => convertType(context, type))\n        );\n    },\n};\n\nconst jsDocVariadicTypeConverter: TypeConverter<ts.JSDocVariadicType> = {\n    kind: [ts.SyntaxKind.JSDocVariadicType],\n    convert(context, node) {\n        return new ArrayType(convertType(context, node.type));\n    },\n    // Should just be an ArrayType\n    convertType: requestBugReport,\n};\n\nconst keywordNames = {\n    [ts.SyntaxKind.AnyKeyword]: \"any\",\n    [ts.SyntaxKind.BigIntKeyword]: \"bigint\",\n    [ts.SyntaxKind.BooleanKeyword]: \"boolean\",\n    [ts.SyntaxKind.NeverKeyword]: \"never\",\n    [ts.SyntaxKind.NumberKeyword]: \"number\",\n    [ts.SyntaxKind.ObjectKeyword]: \"object\",\n    [ts.SyntaxKind.StringKeyword]: \"string\",\n    [ts.SyntaxKind.SymbolKeyword]: \"symbol\",\n    [ts.SyntaxKind.UndefinedKeyword]: \"undefined\",\n    [ts.SyntaxKind.UnknownKeyword]: \"unknown\",\n    [ts.SyntaxKind.VoidKeyword]: \"void\",\n    [ts.SyntaxKind.IntrinsicKeyword]: \"intrinsic\",\n};\n\nconst keywordConverter: TypeConverter<ts.KeywordTypeNode> = {\n    kind: [\n        ts.SyntaxKind.AnyKeyword,\n        ts.SyntaxKind.BigIntKeyword,\n        ts.SyntaxKind.BooleanKeyword,\n        ts.SyntaxKind.NeverKeyword,\n        ts.SyntaxKind.NumberKeyword,\n        ts.SyntaxKind.ObjectKeyword,\n        ts.SyntaxKind.StringKeyword,\n        ts.SyntaxKind.SymbolKeyword,\n        ts.SyntaxKind.UndefinedKeyword,\n        ts.SyntaxKind.UnknownKeyword,\n        ts.SyntaxKind.VoidKeyword,\n    ],\n    convert(_context, node) {\n        return new IntrinsicType(keywordNames[node.kind]);\n    },\n    convertType(_context, _type, node) {\n        return new IntrinsicType(keywordNames[node.kind]);\n    },\n};\n\nconst optionalConverter: TypeConverter<ts.OptionalTypeNode> = {\n    kind: [ts.SyntaxKind.OptionalType],\n    convert(context, node) {\n        return new OptionalType(\n            removeUndefined(convertType(context, node.type))\n        );\n    },\n    // Handled by the tuple converter\n    convertType: requestBugReport,\n};\n\nconst parensConverter: TypeConverter<ts.ParenthesizedTypeNode> = {\n    kind: [ts.SyntaxKind.ParenthesizedType],\n    convert(context, node) {\n        return convertType(context, node.type);\n    },\n    // TS strips these out too... shouldn't run into this.\n    convertType: requestBugReport,\n};\n\nconst predicateConverter: TypeConverter<ts.TypePredicateNode, ts.Type> = {\n    kind: [ts.SyntaxKind.TypePredicate],\n    convert(context, node) {\n        const name = ts.isThisTypeNode(node.parameterName)\n            ? \"this\"\n            : node.parameterName.getText();\n        const asserts = !!node.assertsModifier;\n        const targetType = node.type ? convertType(context, node.type) : void 0;\n        return new PredicateType(name, asserts, targetType);\n    },\n    // Never inferred by TS 4.0, could potentially change in a future TS version.\n    convertType: requestBugReport,\n};\n\n// This is a horrible thing... we're going to want to split this into converters\n// for different types at some point.\nconst typeLiteralConverter: TypeConverter<ts.TypeLiteralNode> = {\n    kind: [ts.SyntaxKind.TypeLiteral],\n    convert(context, node) {\n        const symbol = context.getSymbolAtLocation(node) ?? node.symbol;\n        const type = context.getTypeAtLocation(node);\n        if (!symbol || !type) {\n            return new IntrinsicType(\"Object\");\n        }\n\n        const reflection = new DeclarationReflection(\n            \"__type\",\n            ReflectionKind.TypeLiteral,\n            context.scope\n        );\n        const rc = context.withScope(reflection);\n        rc.setConvertingTypeNode();\n\n        context.registerReflection(reflection, symbol);\n        context.trigger(ConverterEvents.CREATE_DECLARATION, reflection, node);\n\n        for (const prop of context.checker.getPropertiesOfType(type)) {\n            convertSymbol(rc, prop);\n        }\n        for (const signature of type.getCallSignatures()) {\n            reflection.signatures ??= [];\n            reflection.signatures.push(\n                createSignature(rc, ReflectionKind.CallSignature, signature)\n            );\n        }\n\n        convertIndexSignature(rc, symbol);\n\n        return new ReflectionType(reflection);\n    },\n    convertType(context, type) {\n        if (!type.symbol) {\n            return new IntrinsicType(\"Object\");\n        }\n\n        const reflection = new DeclarationReflection(\n            \"__type\",\n            ReflectionKind.TypeLiteral,\n            context.scope\n        );\n        context.registerReflection(reflection, type.symbol);\n        context.trigger(ConverterEvents.CREATE_DECLARATION, reflection);\n\n        for (const prop of context.checker.getPropertiesOfType(type)) {\n            convertSymbol(context.withScope(reflection), prop);\n        }\n        for (const signature of type.getCallSignatures()) {\n            reflection.signatures ??= [];\n            reflection.signatures.push(\n                createSignature(\n                    context.withScope(reflection),\n                    ReflectionKind.CallSignature,\n                    signature\n                )\n            );\n        }\n\n        convertIndexSignature(context.withScope(reflection), type.symbol);\n\n        return new ReflectionType(reflection);\n    },\n};\n\nconst queryConverter: TypeConverter<ts.TypeQueryNode> = {\n    kind: [ts.SyntaxKind.TypeQuery],\n    convert(context, node) {\n        const querySymbol = context.expectSymbolAtLocation(node.exprName);\n        return new QueryType(\n            new ReferenceType(\n                node.exprName.getText(),\n                context.resolveAliasedSymbol(querySymbol),\n                context.project\n            )\n        );\n    },\n    convertType(context, type) {\n        const symbol = type.getSymbol();\n        assert(\n            symbol,\n            `Query type failed to get a symbol for: ${context.checker.typeToString(\n                type\n            )}. This is a bug.`\n        );\n        return new QueryType(\n            new ReferenceType(\n                symbol.name,\n                context.resolveAliasedSymbol(symbol),\n                context.project\n            )\n        );\n    },\n};\n\nconst referenceConverter: TypeConverter<\n    ts.TypeReferenceNode,\n    ts.TypeReference\n> = {\n    kind: [ts.SyntaxKind.TypeReference],\n    convert(context, node) {\n        const isArray =\n            context.checker.typeToTypeNode(\n                context.checker.getTypeAtLocation(node.typeName),\n                void 0,\n                ts.NodeBuilderFlags.IgnoreErrors\n            )?.kind === ts.SyntaxKind.ArrayType;\n\n        if (isArray) {\n            return new ArrayType(convertType(context, node.typeArguments?.[0]));\n        }\n\n        const symbol = context.expectSymbolAtLocation(node.typeName);\n\n        const name = node.typeName.getText();\n\n        const type = new ReferenceType(\n            name,\n            context.resolveAliasedSymbol(symbol),\n            context.project\n        );\n        type.typeArguments = node.typeArguments?.map((type) =>\n            convertType(context, type)\n        );\n        return type;\n    },\n    convertType(context, type) {\n        const symbol = type.aliasSymbol ?? type.getSymbol();\n        if (!symbol) {\n            // This happens when we get a reference to a type parameter\n            // created within a mapped type, `K` in: `{ [K in T]: string }`\n            return ReferenceType.createBrokenReference(\n                context.checker.typeToString(type),\n                context.project\n            );\n        }\n\n        const ref = new ReferenceType(\n            symbol.name,\n            context.resolveAliasedSymbol(symbol),\n            context.project\n        );\n        ref.typeArguments = (type.aliasSymbol\n            ? type.aliasTypeArguments\n            : type.typeArguments\n        )?.map((ref) => convertType(context, ref));\n        return ref;\n    },\n};\n\nconst restConverter: TypeConverter<ts.RestTypeNode> = {\n    kind: [ts.SyntaxKind.RestType],\n    convert(context, node) {\n        return new RestType(convertType(context, node.type));\n    },\n    // This is handled in the tuple converter\n    convertType: requestBugReport,\n};\n\nconst namedTupleMemberConverter: TypeConverter<ts.NamedTupleMember> = {\n    kind: [ts.SyntaxKind.NamedTupleMember],\n    convert(context, node) {\n        const innerType = convertType(context, node.type);\n        return new NamedTupleMember(\n            node.name.getText(),\n            !!node.questionToken,\n            innerType\n        );\n    },\n    // This ought to be impossible.\n    convertType: requestBugReport,\n};\n\n// { -readonly [K in string]-?: number}\n//   ^ readonlyToken\n//              ^ typeParameter\n//                   ^^^^^^ typeParameter.constraint\n//                          ^ questionToken\n//                              ^^^^^^ type\nconst mappedConverter: TypeConverter<\n    ts.MappedTypeNode,\n    ts.Type & {\n        // Beware! Internal TS API here.\n        templateType: ts.Type;\n        typeParameter: ts.TypeParameter;\n        constraintType: ts.Type;\n        nameType?: ts.Type;\n    }\n> = {\n    kind: [ts.SyntaxKind.MappedType],\n    convert(context, node) {\n        const optionalModifier = kindToModifier(node.questionToken?.kind);\n        const templateType = convertType(context, node.type);\n\n        return new MappedType(\n            node.typeParameter.name.text,\n            convertType(context, node.typeParameter.constraint),\n            optionalModifier === \"+\"\n                ? removeUndefined(templateType)\n                : templateType,\n            kindToModifier(node.readonlyToken?.kind),\n            optionalModifier,\n            node.nameType ? convertType(context, node.nameType) : void 0\n        );\n    },\n    convertType(context, type, node) {\n        // This can happen if a generic function does not have a return type annotated.\n        const optionalModifier = kindToModifier(node.questionToken?.kind);\n        const templateType = convertType(context, type.templateType);\n\n        return new MappedType(\n            type.typeParameter.symbol?.name,\n            convertType(context, type.typeParameter.getConstraint()),\n            optionalModifier === \"+\"\n                ? removeUndefined(templateType)\n                : templateType,\n            kindToModifier(node.readonlyToken?.kind),\n            optionalModifier,\n            type.nameType ? convertType(context, type.nameType) : void 0\n        );\n    },\n};\n\nconst ts3LiteralBooleanConverter: TypeConverter<ts.TypeNode, ts.Type> = {\n    kind: [ts.SyntaxKind.TrueKeyword, ts.SyntaxKind.FalseKeyword],\n    convert(_context, node) {\n        return new LiteralType(node.kind === ts.SyntaxKind.TrueKeyword);\n    },\n    convertType(_context, _type, node) {\n        return new LiteralType(node.kind === ts.SyntaxKind.TrueKeyword);\n    },\n};\n\nconst ts3LiteralNullConverter: TypeConverter<ts.TypeNode, ts.Type> = {\n    kind: [ts.SyntaxKind.NullKeyword],\n    convert() {\n        return new LiteralType(null);\n    },\n    convertType() {\n        return new LiteralType(null);\n    },\n};\n\nconst ts3LiteralThisConverter: TypeConverter<ts.TypeNode, ts.Type> = {\n    kind: [ts.SyntaxKind.ThisKeyword],\n    convert() {\n        return new IntrinsicType(\"this\");\n    },\n    convertType() {\n        return new IntrinsicType(\"this\");\n    },\n};\n\nconst literalTypeConverter: TypeConverter<\n    ts.LiteralTypeNode,\n    ts.LiteralType\n> = {\n    kind: [ts.SyntaxKind.LiteralType],\n    convert(context, node) {\n        switch (node.literal.kind) {\n            case ts.SyntaxKind.TrueKeyword:\n            case ts.SyntaxKind.FalseKeyword:\n                return new LiteralType(\n                    node.literal.kind === ts.SyntaxKind.TrueKeyword\n                );\n            case ts.SyntaxKind.StringLiteral:\n                return new LiteralType(node.literal.text);\n            case ts.SyntaxKind.NumericLiteral:\n                return new LiteralType(Number(node.literal.text));\n            case ts.SyntaxKind.NullKeyword:\n                return new LiteralType(null);\n            case ts.SyntaxKind.PrefixUnaryExpression: {\n                const operand = (node.literal as ts.PrefixUnaryExpression)\n                    .operand;\n                switch (operand.kind) {\n                    case ts.SyntaxKind.NumericLiteral:\n                        return new LiteralType(Number(node.literal.getText()));\n                    case ts.SyntaxKind.BigIntLiteral:\n                        return new LiteralType(\n                            BigInt(node.literal.getText().replace(\"n\", \"\"))\n                        );\n                    default:\n                        return requestBugReport(context, node.literal);\n                }\n            }\n            case ts.SyntaxKind.BigIntLiteral:\n                return new LiteralType(\n                    BigInt(node.literal.getText().replace(\"n\", \"\"))\n                );\n            case ts.SyntaxKind.NoSubstitutionTemplateLiteral:\n                return new LiteralType(node.literal.text);\n        }\n\n        return requestBugReport(context, node.literal);\n    },\n    convertType(_context, type, node) {\n        switch (node.literal.kind) {\n            case ts.SyntaxKind.StringLiteral:\n                return new LiteralType(node.literal.text);\n            case ts.SyntaxKind.NumericLiteral:\n                return new LiteralType(+node.literal.text);\n            case ts.SyntaxKind.TrueKeyword:\n            case ts.SyntaxKind.FalseKeyword:\n                return new LiteralType(\n                    node.literal.kind === ts.SyntaxKind.TrueKeyword\n                );\n            case ts.SyntaxKind.NullKeyword:\n                return new LiteralType(null);\n        }\n\n        if (typeof type.value === \"object\") {\n            return new LiteralType(\n                BigInt(\n                    `${type.value.negative ? \"-\" : \"\"}${type.value.base10Value}`\n                )\n            );\n        }\n\n        return new LiteralType(type.value);\n    },\n};\n\nconst templateLiteralConverter: TypeConverter<\n    ts.TemplateLiteralTypeNode,\n    ts.TemplateLiteralType\n> = {\n    kind: [ts.SyntaxKind.TemplateLiteralType],\n    convert(context, node) {\n        return new TemplateLiteralType(\n            node.head.text,\n            node.templateSpans.map((span) => {\n                return [convertType(context, span.type), span.literal.text];\n            })\n        );\n    },\n    convertType(context, type) {\n        assert(type.texts.length === type.types.length + 1);\n        const parts: [Type, string][] = [];\n        for (const [a, b] of zip(type.types, type.texts.slice(1))) {\n            parts.push([convertType(context, a), b]);\n        }\n\n        return new TemplateLiteralType(type.texts[0], parts);\n    },\n};\n\nconst thisConverter: TypeConverter<ts.ThisTypeNode> = {\n    kind: [ts.SyntaxKind.ThisType],\n    convert() {\n        return new IntrinsicType(\"this\");\n    },\n    convertType() {\n        return new IntrinsicType(\"this\");\n    },\n};\n\nconst tupleConverter: TypeConverter<ts.TupleTypeNode, ts.TupleTypeReference> = {\n    kind: [ts.SyntaxKind.TupleType],\n    convert(context, node) {\n        // TS 3.9 support\n        const elementTypes = node.elements ?? (node as any).elementTypes;\n        const elements = elementTypes.map((node) => convertType(context, node));\n        return new TupleType(elements);\n    },\n    convertType(context, type, node) {\n        // TS 3.9 support\n        const elementTypes = node.elements ?? (node as any).elementTypes;\n        // We need to do this because of type argument constraints, see GH1449\n        // In TS 4.0 we could use type.target.fixedLength\n        const types = type.typeArguments?.slice(0, elementTypes.length);\n        let elements = types?.map((type) => convertType(context, type));\n\n        if (type.target.labeledElementDeclarations) {\n            const namedDeclarations = type.target.labeledElementDeclarations;\n            elements = elements?.map(\n                (el, i) =>\n                    new NamedTupleMember(\n                        namedDeclarations[i].name.getText(),\n                        !!namedDeclarations[i].questionToken,\n                        removeUndefined(el)\n                    )\n            );\n        }\n\n        // TS 3.9 support - always defined in 4.0\n        if (type.target.elementFlags) {\n            elements = elements?.map((el, i) => {\n                if (type.target.elementFlags[i] & ts.ElementFlags.Variable) {\n                    // In the node case, we don't need to add the wrapping Array type... but we do here.\n                    if (el instanceof NamedTupleMember) {\n                        return new RestType(\n                            new NamedTupleMember(\n                                el.name,\n                                el.isOptional,\n                                new ArrayType(el.element)\n                            )\n                        );\n                    }\n\n                    return new RestType(new ArrayType(el));\n                }\n\n                if (\n                    type.target.elementFlags[i] & ts.ElementFlags.Optional &&\n                    !(el instanceof NamedTupleMember)\n                ) {\n                    return new OptionalType(removeUndefined(el));\n                }\n\n                return el;\n            });\n        }\n\n        return new TupleType(elements ?? []);\n    },\n};\n\nconst supportedOperatorNames = {\n    [ts.SyntaxKind.KeyOfKeyword]: \"keyof\",\n    [ts.SyntaxKind.UniqueKeyword]: \"unique\",\n    [ts.SyntaxKind.ReadonlyKeyword]: \"readonly\",\n} as const;\n\nconst typeOperatorConverter: TypeConverter<ts.TypeOperatorNode> = {\n    kind: [ts.SyntaxKind.TypeOperator],\n    convert(context, node) {\n        return new TypeOperatorType(\n            convertType(context, node.type),\n            supportedOperatorNames[node.operator]\n        );\n    },\n    convertType(context, type, node) {\n        // readonly is only valid on array and tuple literal types.\n        if (node.operator === ts.SyntaxKind.ReadonlyKeyword) {\n            assert(isObjectType(type));\n            const args = context.checker\n                .getTypeArguments(type as ts.TypeReference)\n                .map((type) => convertType(context, type));\n            const inner =\n                type.objectFlags & ts.ObjectFlags.Tuple\n                    ? new TupleType(args)\n                    : new ArrayType(args[0]);\n\n            return new TypeOperatorType(inner, \"readonly\");\n        }\n\n        // keyof will only show up with generic functions, otherwise it gets eagerly\n        // resolved to a union of strings.\n        if (node.operator === ts.SyntaxKind.KeyOfKeyword) {\n            // There's probably an interface for this somewhere... I couldn't find it.\n            const targetType = (type as ts.Type & { type: ts.Type }).type;\n            return new TypeOperatorType(\n                convertType(context, targetType),\n                \"keyof\"\n            );\n        }\n\n        // TS drops `unique` in `unique symbol` everywhere. If someone used it, we ought\n        // to have a type node. This shouldn't ever happen.\n        return requestBugReport(context, type);\n    },\n};\n\nconst unionConverter: TypeConverter<ts.UnionTypeNode, ts.UnionType> = {\n    kind: [ts.SyntaxKind.UnionType],\n    convert(context, node) {\n        return new UnionType(\n            node.types.map((type) => convertType(context, type))\n        );\n    },\n    convertType(context, type) {\n        return new UnionType(\n            type.types.map((type) => convertType(context, type))\n        );\n    },\n};\n\nfunction requestBugReport(context: Context, nodeOrType: ts.Node | ts.Type) {\n    if (\"kind\" in nodeOrType) {\n        const kindName = ts.SyntaxKind[nodeOrType.kind];\n        const { line, character } = ts.getLineAndCharacterOfPosition(\n            nodeOrType.getSourceFile(),\n            nodeOrType.pos\n        );\n        context.logger.warn(\n            `Failed to convert type node with kind: ${kindName} and text ${nodeOrType.getText()}. Please report a bug.\\n\\t` +\n                `${nodeOrType.getSourceFile().fileName}:${\n                    line + 1\n                }:${character}`\n        );\n        return new UnknownType(nodeOrType.getText());\n    } else {\n        const typeString = context.checker.typeToString(nodeOrType);\n        context.logger.warn(\n            `Failed to convert type: ${typeString} when converting ${context.scope.getFullName()}. Please report a bug.`\n        );\n        return new UnknownType(typeString);\n    }\n}\n\nfunction isObjectType(type: ts.Type): type is ts.ObjectType {\n    return typeof (type as any).objectFlags === \"number\";\n}\n\nfunction kindToModifier(\n    kind:\n        | ts.SyntaxKind.PlusToken\n        | ts.SyntaxKind.MinusToken\n        | ts.SyntaxKind.ReadonlyKeyword\n        | ts.SyntaxKind.QuestionToken\n        | undefined\n): \"+\" | \"-\" | undefined {\n    switch (kind) {\n        case ts.SyntaxKind.ReadonlyKeyword:\n        case ts.SyntaxKind.QuestionToken:\n        case ts.SyntaxKind.PlusToken:\n            return \"+\";\n        case ts.SyntaxKind.MinusToken:\n            return \"-\";\n        default:\n            return undefined;\n    }\n}\n"]}