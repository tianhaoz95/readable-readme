{"version":3,"file":"index-signature.js","sourceRoot":"","sources":["../../../../src/lib/converter/factories/index-signature.ts"],"names":[],"mappings":";;;AAAA,iCAAiC;AACjC,iCAAiC;AACjC,yCAKsB;AAEtB,0DAAsD;AAEtD,SAAgB,qBAAqB,CAAC,OAAgB,EAAE,MAAiB;;IACrE,MAAM,CAAC,OAAO,CAAC,KAAK,YAAY,8BAAqB,CAAC,CAAC;IAEvD,MAAM,WAAW,SAAG,MAAM,CAAC,OAAO,0CAAE,GAAG,CAAC,SAAwB,CAAC,CAAC;IAClE,IAAI,WAAW,EAAE;QACb,0EAA0E;QAC1E,wEAAwE;QACxE,0BAA0B;QAC1B,MAAM,gBAAgB,SAAG,WAAW,CAAC,eAAe,EAAE,0CAAG,CAAC,CAAC,CAAC;QAC5D,MAAM,CACF,gBAAgB,IAAI,EAAE,CAAC,2BAA2B,CAAC,gBAAgB,CAAC,CACvE,CAAC;QACF,MAAM,KAAK,GAAG,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;QAC7C,MAAM,CAAC,KAAK,IAAI,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;QACvC,MAAM,KAAK,GAAG,IAAI,4BAAmB,CACjC,SAAS,EACT,uBAAc,CAAC,cAAc,EAC7B,OAAO,CAAC,KAAK,CAChB,CAAC;QACF,KAAK,CAAC,UAAU,GAAG;YACf,IAAI,4BAAmB,CACnB,KAAK,CAAC,IAAI,CAAC,OAAO,EAAE,EACpB,uBAAc,CAAC,SAAS,EACxB,KAAK,CACR;SACJ,CAAC;QACF,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,WAAW,CACpD,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EACtC,KAAK,CAAC,IAAI,CACb,CAAC;QACF,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC,SAAS,CAAC,WAAW,CACtC,OAAO,CAAC,SAAS,CAAC,KAAK,CAAC,EACxB,gBAAgB,CAAC,IAAI,CACxB,CAAC;QACF,OAAO,CAAC,kBAAkB,CAAC,KAAK,EAAE,WAAW,CAAC,CAAC;QAC/C,OAAO,CAAC,OAAO,CACX,kCAAe,CAAC,gBAAgB,EAChC,KAAK,EACL,gBAAgB,CACnB,CAAC;QAEF,OAAO,CAAC,KAAK,CAAC,cAAc,GAAG,KAAK,CAAC;KACxC;AACL,CAAC;AA3CD,sDA2CC","sourcesContent":["import * as assert from \"assert\";\nimport * as ts from \"typescript\";\nimport {\n    DeclarationReflection,\n    ParameterReflection,\n    ReflectionKind,\n    SignatureReflection,\n} from \"../../models\";\nimport { Context } from \"../context\";\nimport { ConverterEvents } from \"../converter-events\";\n\nexport function convertIndexSignature(context: Context, symbol: ts.Symbol) {\n    assert(context.scope instanceof DeclarationReflection);\n\n    const indexSymbol = symbol.members?.get(\"__index\" as ts.__String);\n    if (indexSymbol) {\n        // Right now TypeDoc models don't have a way to distinguish between string\n        // and number index signatures... { [x: string]: 1 | 2; [x: number]: 2 }\n        // will be misrepresented.\n        const indexDeclaration = indexSymbol.getDeclarations()?.[0];\n        assert(\n            indexDeclaration && ts.isIndexSignatureDeclaration(indexDeclaration)\n        );\n        const param = indexDeclaration.parameters[0];\n        assert(param && ts.isParameter(param));\n        const index = new SignatureReflection(\n            \"__index\",\n            ReflectionKind.IndexSignature,\n            context.scope\n        );\n        index.parameters = [\n            new ParameterReflection(\n                param.name.getText(),\n                ReflectionKind.Parameter,\n                index\n            ),\n        ];\n        index.parameters[0].type = context.converter.convertType(\n            context.withScope(index.parameters[0]),\n            param.type\n        );\n        index.type = context.converter.convertType(\n            context.withScope(index),\n            indexDeclaration.type\n        );\n        context.registerReflection(index, indexSymbol);\n        context.trigger(\n            ConverterEvents.CREATE_SIGNATURE,\n            index,\n            indexDeclaration\n        );\n\n        context.scope.indexSignature = index;\n    }\n}\n"]}