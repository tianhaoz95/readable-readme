{"version":3,"file":"reflections.js","sourceRoot":"","sources":["../../../../src/lib/converter/utils/reflections.ts"],"names":[],"mappings":";;;AAAA,yCAQsB;AAEtB,SAAgB,eAAe,CAAC,IAAU;IACtC,IAAI,IAAI,YAAY,kBAAS,EAAE;QAC3B,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAC3B,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,sBAAa,CAAC,WAAW,CAAC,CAAC,CACnD,CAAC;QACF,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACpB,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC;SACnB;QACD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,OAAO,IAAI,CAAC;KACf;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AAZD,0CAYC;AAED;;;;;GAKG;AACH,SAAgB,WAAW,CAAC,MAAkB,EAAE,MAAkB;;IAC9D,IACI,MAAM,CAAC,OAAO;QACd,MAAM,CAAC,OAAO;QACd,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,EACrC;QACE,IACI,MAAM,YAAY,8BAAqB;YACvC,MAAM,YAAY,8BAAqB,EACzC;YACE,MAAM,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;SACjD;QACD,IACI,MAAM,YAAY,4BAAmB;YACrC,MAAM,YAAY,4BAAmB,EACvC;YACE,MAAM,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,CAAC;YAC9C;;;;;;;eAOG;YACH,UAAI,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,YAAY,CAAC,0CAAE,SAAS,EAAE;gBAChD,MAAM,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;aACzC;iBAAM;gBACH,wBAAwB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;aAC5C;SACJ;QACD,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC;QACxC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;KAC3C;AACL,CAAC;AAlCD,kCAkCC;AAED;;;;;GAKG;AACH,SAAS,wBAAwB,CAC7B,MAA2B,EAC3B,MAA2B;IAE3B,IAAI,MAAM,CAAC,UAAU,IAAI,MAAM,CAAC,UAAU,EAAE;QACxC,KACI,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,EAC/C,KAAK,GAAG,KAAK,EACb,KAAK,EAAE,EACT;YACE,MAAM,eAAe,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YACjD,IAAI,eAAe,IAAI,eAAe,CAAC,OAAO,EAAE;gBAC5C,MAAM,eAAe,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;gBACjD,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE;oBAC1B,eAAe,CAAC,OAAO,GAAG,IAAI,gBAAO,EAAE,CAAC;oBACxC,eAAe,CAAC,OAAO,CAAC,QAAQ,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;iBAC7D;aACJ;SACJ;KACJ;AACL,CAAC","sourcesContent":["import {\n    Comment,\n    DeclarationReflection,\n    IntrinsicType,\n    Reflection,\n    SignatureReflection,\n    Type,\n    UnionType,\n} from \"../../models\";\n\nexport function removeUndefined(type: Type) {\n    if (type instanceof UnionType) {\n        const types = type.types.filter(\n            (t) => !t.equals(new IntrinsicType(\"undefined\"))\n        );\n        if (types.length === 1) {\n            return types[0];\n        }\n        type.types = types;\n        return type;\n    }\n    return type;\n}\n\n/**\n * Copy the comment of the source reflection to the target reflection.\n *\n * @param target - Reflection with comment containing `inheritdoc` tag\n * @param source - Referenced reflection\n */\nexport function copyComment(target: Reflection, source: Reflection) {\n    if (\n        target.comment &&\n        source.comment &&\n        target.comment.hasTag(\"inheritdoc\")\n    ) {\n        if (\n            target instanceof DeclarationReflection &&\n            source instanceof DeclarationReflection\n        ) {\n            target.typeParameters = source.typeParameters;\n        }\n        if (\n            target instanceof SignatureReflection &&\n            source instanceof SignatureReflection\n        ) {\n            target.typeParameters = source.typeParameters;\n            /**\n             * TSDoc overrides existing parameters entirely with inherited ones, while\n             * existing implementation merges them.\n             * To avoid breaking things, `inheritDoc` tag is additionally checked for the parameter,\n             * so the previous behaviour will continue to work.\n             *\n             * TODO: When breaking change becomes acceptable remove legacy implementation\n             */\n            if (target.comment.getTag(\"inheritdoc\")?.paramName) {\n                target.parameters = source.parameters;\n            } else {\n                legacyCopyImplementation(target, source);\n            }\n        }\n        target.comment.removeTags(\"inheritdoc\");\n        target.comment.copyFrom(source.comment);\n    }\n}\n\n/**\n * Copy comments from source reflection to target reflection, parameters are merged.\n *\n * @param target - Reflection with comment containing `inheritdoc` tag\n * @param source - Parent reflection\n */\nfunction legacyCopyImplementation(\n    target: SignatureReflection,\n    source: SignatureReflection\n) {\n    if (target.parameters && source.parameters) {\n        for (\n            let index = 0, count = target.parameters.length;\n            index < count;\n            index++\n        ) {\n            const sourceParameter = source.parameters[index];\n            if (sourceParameter && sourceParameter.comment) {\n                const targetParameter = target.parameters[index];\n                if (!targetParameter.comment) {\n                    targetParameter.comment = new Comment();\n                    targetParameter.comment.copyFrom(sourceParameter.comment);\n                }\n            }\n        }\n    }\n}\n"]}