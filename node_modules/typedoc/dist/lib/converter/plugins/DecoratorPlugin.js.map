{"version":3,"file":"DecoratorPlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/DecoratorPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from \"typescript\";\n\nimport { ReferenceType } from \"../../models/types/index\";\nimport { Reflection, Decorator } from \"../../models/reflections/index\";\nimport { Component, ConverterComponent } from \"../components\";\nimport { Converter } from \"../converter\";\nimport { Context } from \"../context\";\n\n/**\n * A plugin that detects decorators.\n */\n@Component({ name: \"decorator\" })\nexport class DecoratorPlugin extends ConverterComponent {\n    /**\n     * Defined in this.onBegin\n     */\n    private readonly usages = new Map<ts.Symbol, ReferenceType[]>();\n\n    /**\n     * Create a new ImplementsPlugin instance.\n     */\n    initialize() {\n        this.listenTo(this.owner, {\n            [Converter.EVENT_CREATE_DECLARATION]: this.onDeclaration,\n            [Converter.EVENT_CREATE_PARAMETER]: this.onDeclaration,\n            [Converter.EVENT_RESOLVE]: this.onBeginResolve,\n            [Converter.EVENT_END]: () => this.usages.clear(),\n        });\n    }\n\n    /**\n     * Create an object describing the arguments a decorator is set with.\n     *\n     * @param args  The arguments resolved from the decorator's call expression.\n     * @param signature  The signature definition of the decorator being used.\n     * @returns An object describing the decorator parameters,\n     */\n    private extractArguments(\n        args: ts.NodeArray<ts.Expression>,\n        signature: ts.Signature\n    ): { [name: string]: string | string[] } {\n        const result: any = {};\n        args.forEach((arg: ts.Expression, index: number) => {\n            if (index < signature.parameters.length) {\n                const parameter = signature.parameters[index];\n                result[parameter.name] = arg.getText();\n            } else {\n                if (!result[\"...\"]) {\n                    result[\"...\"] = [];\n                }\n                result[\"...\"].push(arg.getText());\n            }\n        });\n\n        return result;\n    }\n\n    /**\n     * Triggered when the converter has created a declaration or signature reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently processed.\n     * @param node  The node that is currently processed if available.\n     */\n    private onDeclaration(\n        context: Context,\n        reflection: Reflection,\n        node?: ts.Node\n    ) {\n        node?.decorators?.forEach((decorator) => {\n            let callExpression: ts.CallExpression | undefined;\n            let identifier: ts.Expression;\n\n            switch (decorator.expression.kind) {\n                case ts.SyntaxKind.Identifier:\n                    identifier = decorator.expression;\n                    break;\n                case ts.SyntaxKind.CallExpression:\n                    callExpression = <ts.CallExpression>decorator.expression;\n                    identifier = callExpression.expression;\n                    break;\n                default:\n                    return;\n            }\n\n            const info: Decorator = {\n                name: identifier.getText(),\n            };\n\n            const type = context.checker.getTypeAtLocation(identifier);\n            if (type && type.symbol) {\n                info.type = new ReferenceType(\n                    info.name,\n                    context.resolveAliasedSymbol(type.symbol),\n                    context.project\n                );\n\n                if (callExpression && callExpression.arguments) {\n                    const signature = context.checker.getResolvedSignature(\n                        callExpression\n                    );\n                    if (signature) {\n                        info.arguments = this.extractArguments(\n                            callExpression.arguments,\n                            signature\n                        );\n                    }\n                }\n\n                const usages = this.usages.get(type.symbol) ?? [];\n                usages.push(\n                    new ReferenceType(\n                        reflection.name,\n                        reflection,\n                        context.project\n                    )\n                );\n                this.usages.set(type.symbol, usages);\n            }\n\n            reflection.decorators ??= [];\n            reflection.decorators.push(info);\n        });\n    }\n\n    private onBeginResolve(context: Context) {\n        for (const [symbol, ref] of this.usages) {\n            const reflection = context.project.getReflectionFromSymbol(symbol);\n            if (reflection) {\n                reflection.decorates = ref;\n            }\n        }\n    }\n}\n"]}