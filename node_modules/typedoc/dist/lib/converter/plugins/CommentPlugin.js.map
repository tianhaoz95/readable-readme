{"version":3,"file":"CommentPlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/CommentPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from \"typescript\";\n\nimport { Comment, CommentTag } from \"../../models/comments/index\";\nimport {\n    Reflection,\n    ReflectionFlag,\n    ReflectionKind,\n    TypeParameterReflection,\n    DeclarationReflection,\n} from \"../../models/reflections/index\";\nimport { Component, ConverterComponent } from \"../components\";\nimport { parseComment, getRawComment } from \"../factories/comment\";\nimport { Converter } from \"../converter\";\nimport { Context } from \"../context\";\nimport { partition, uniq } from \"lodash\";\nimport { SourceReference } from \"../../models\";\nimport { BindOption, filterMap, removeIfPresent } from \"../../utils\";\n\n/**\n * These tags are not useful to display in the generated documentation.\n * They should be ignored when parsing comments. Any relevant type information\n * (for JS users) will be consumed by TypeScript and need not be preserved\n * in the comment.\n *\n * Note that param/arg/argument/return/returns are not present.\n * These tags will have their type information stripped when parsing, but still\n * provide useful information for documentation.\n */\nconst TAG_BLACKLIST = [\n    \"augments\",\n    \"callback\",\n    \"class\",\n    \"constructor\",\n    \"enum\",\n    \"extends\",\n    \"this\",\n    \"type\",\n    \"typedef\",\n];\n\n/**\n * A handler that parses TypeDoc comments and attaches [[Comment]] instances to\n * the generated reflections.\n */\n@Component({ name: \"comment\" })\nexport class CommentPlugin extends ConverterComponent {\n    @BindOption(\"excludeTags\")\n    excludeTags!: string[];\n\n    /**\n     * Create a new CommentPlugin instance.\n     */\n    initialize() {\n        this.listenTo(this.owner, {\n            [Converter.EVENT_CREATE_DECLARATION]: this.onDeclaration,\n            [Converter.EVENT_CREATE_SIGNATURE]: this.onDeclaration,\n            [Converter.EVENT_CREATE_TYPE_PARAMETER]: this.onCreateTypeParameter,\n            [Converter.EVENT_RESOLVE_BEGIN]: this.onBeginResolve,\n            [Converter.EVENT_RESOLVE]: this.onResolve,\n        });\n    }\n\n    /**\n     * Apply all comment tag modifiers to the given reflection.\n     *\n     * @param reflection  The reflection the modifiers should be applied to.\n     * @param comment  The comment that should be searched for modifiers.\n     */\n    private applyModifiers(reflection: Reflection, comment: Comment) {\n        if (comment.hasTag(\"private\")) {\n            reflection.setFlag(ReflectionFlag.Private);\n            if (reflection.kindOf(ReflectionKind.CallSignature)) {\n                reflection.parent?.setFlag(ReflectionFlag.Private);\n            }\n            comment.removeTags(\"private\");\n        }\n\n        if (comment.hasTag(\"protected\")) {\n            reflection.setFlag(ReflectionFlag.Protected);\n            if (reflection.kindOf(ReflectionKind.CallSignature)) {\n                reflection.parent?.setFlag(ReflectionFlag.Protected);\n            }\n            comment.removeTags(\"protected\");\n        }\n\n        if (comment.hasTag(\"public\")) {\n            reflection.setFlag(ReflectionFlag.Public);\n            if (reflection.kindOf(ReflectionKind.CallSignature)) {\n                reflection.parent?.setFlag(ReflectionFlag.Public);\n            }\n            comment.removeTags(\"public\");\n        }\n\n        if (comment.hasTag(\"event\")) {\n            if (reflection.kindOf(ReflectionKind.CallSignature)) {\n                if (reflection.parent) {\n                    reflection.parent.kind = ReflectionKind.Event;\n                }\n            }\n            reflection.kind = ReflectionKind.Event;\n            comment.removeTags(\"event\");\n        }\n\n        if (\n            reflection.kindOf(\n                ReflectionKind.Module | ReflectionKind.Namespace\n            ) ||\n            reflection.kind === ReflectionKind.Project\n        ) {\n            comment.removeTags(\"packagedocumentation\");\n        }\n    }\n\n    /**\n     * Triggered when the converter has created a type parameter reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently processed.\n     */\n    private onCreateTypeParameter(\n        _context: Context,\n        reflection: TypeParameterReflection,\n        node?: ts.Node\n    ) {\n        if (node && ts.isJSDocTemplateTag(node.parent)) {\n            if (node.parent.comment) {\n                reflection.comment = new Comment(node.parent.comment);\n            }\n        }\n\n        const comment = reflection.parent && reflection.parent.comment;\n        if (comment) {\n            let tag = comment.getTag(\"typeparam\", reflection.name);\n            if (!tag) {\n                tag = comment.getTag(\"template\", reflection.name);\n            }\n            if (!tag) {\n                tag = comment.getTag(\"param\", `<${reflection.name}>`);\n            }\n            if (!tag) {\n                tag = comment.getTag(\"param\", reflection.name);\n            }\n\n            if (tag) {\n                reflection.comment = new Comment(tag.text);\n                removeIfPresent(comment.tags, tag);\n            }\n        }\n    }\n\n    /**\n     * Triggered when the converter has created a declaration or signature reflection.\n     *\n     * Invokes the comment parser.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently processed.\n     * @param node  The node that is currently processed if available.\n     */\n    private onDeclaration(\n        _context: Context,\n        reflection: Reflection,\n        node?: ts.Node\n    ) {\n        if (!node) {\n            return;\n        }\n        if (reflection.kindOf(ReflectionKind.FunctionOrMethod)) {\n            return;\n        }\n        const rawComment = getRawComment(node);\n        if (!rawComment) {\n            return;\n        }\n\n        const comment = parseComment(rawComment, reflection.comment);\n        this.applyModifiers(reflection, comment);\n        this.removeExcludedTags(comment);\n        reflection.comment = comment;\n\n        if (reflection.kindOf(ReflectionKind.Module)) {\n            const tag = reflection.comment?.getTag(\"module\");\n            if (tag) {\n                reflection.name = tag.text.trim();\n                removeIfPresent(reflection.comment?.tags, tag);\n            }\n        }\n    }\n\n    /**\n     * Triggered when the converter begins resolving a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onBeginResolve(context: Context) {\n        const excludeInternal = this.application.options.getValue(\n            \"excludeInternal\"\n        );\n        const excludePrivate = this.application.options.getValue(\n            \"excludePrivate\"\n        );\n        const excludeProtected = this.application.options.getValue(\n            \"excludeProtected\"\n        );\n\n        const project = context.project;\n        const reflections = Object.values(project.reflections);\n\n        // Remove hidden reflections\n        const hidden = reflections.filter((reflection) =>\n            CommentPlugin.isHidden(\n                reflection,\n                excludeInternal,\n                excludePrivate,\n                excludeProtected\n            )\n        );\n        hidden.forEach((reflection) => project.removeReflection(reflection));\n\n        // remove functions with empty signatures after their signatures have been removed\n        const [allRemoved, someRemoved] = partition(\n            filterMap(hidden, (reflection) =>\n                reflection.parent?.kindOf(\n                    ReflectionKind.FunctionOrMethod | ReflectionKind.Constructor\n                )\n                    ? reflection.parent\n                    : void 0\n            ) as DeclarationReflection[],\n            (method) => method.signatures?.length === 0\n        );\n        allRemoved.forEach((reflection) =>\n            project.removeReflection(reflection)\n        );\n        someRemoved.forEach((reflection) => {\n            reflection.sources = uniq(\n                reflection.signatures!.reduce<SourceReference[]>(\n                    (c, s) => c.concat(s.sources || []),\n                    []\n                )\n            );\n        });\n    }\n\n    /**\n     * Triggered when the converter resolves a reflection.\n     *\n     * Cleans up comment tags related to signatures like @param or @return\n     * and moves their data to the corresponding parameter reflections.\n     *\n     * This hook also copies over the comment of function implementations to their\n     * signatures.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently resolved.\n     */\n    private onResolve(_context: Context, reflection: DeclarationReflection) {\n        if (!(reflection instanceof DeclarationReflection)) {\n            return;\n        }\n\n        const signatures = reflection.getAllSignatures();\n        if (signatures.length) {\n            const comment = reflection.comment;\n            if (comment && comment.hasTag(\"returns\")) {\n                comment.returns = comment.getTag(\"returns\")!.text;\n                comment.removeTags(\"returns\");\n            }\n\n            signatures.forEach((signature) => {\n                let childComment = signature.comment;\n                if (childComment && childComment.hasTag(\"returns\")) {\n                    childComment.returns = childComment.getTag(\"returns\")!.text;\n                    childComment.removeTags(\"returns\");\n                }\n\n                if (comment) {\n                    if (!childComment) {\n                        childComment = signature.comment = new Comment();\n                    }\n\n                    childComment.shortText =\n                        childComment.shortText || comment.shortText;\n                    childComment.text = childComment.text || comment.text;\n                    childComment.returns =\n                        childComment.returns || comment.returns;\n                    childComment.tags = childComment.tags || comment.tags;\n                }\n\n                if (signature.parameters) {\n                    signature.parameters.forEach((parameter) => {\n                        let tag: CommentTag | undefined;\n                        if (childComment) {\n                            tag = childComment.getTag(\"param\", parameter.name);\n                        }\n                        if (comment && !tag) {\n                            tag = comment.getTag(\"param\", parameter.name);\n                        }\n                        if (tag) {\n                            parameter.comment = new Comment(tag.text);\n                        }\n                    });\n                }\n\n                childComment?.removeTags(\"param\");\n            });\n\n            comment?.removeTags(\"param\");\n        }\n    }\n\n    private removeExcludedTags(comment: Comment) {\n        for (const tag of TAG_BLACKLIST) {\n            comment.removeTags(tag);\n        }\n        for (const tag of this.excludeTags) {\n            comment.removeTags(tag);\n        }\n    }\n\n    /**\n     * Determines whether or not a reflection has been hidden\n     *\n     * @param reflection Reflection to check if hidden\n     */\n    private static isHidden(\n        reflection: Reflection,\n        excludeInternal: boolean,\n        excludePrivate: boolean,\n        excludeProtected: boolean\n    ) {\n        const comment = reflection.comment;\n\n        if (\n            reflection.flags.hasFlag(ReflectionFlag.Private) &&\n            excludePrivate\n        ) {\n            return true;\n        }\n\n        if (\n            reflection.flags.hasFlag(ReflectionFlag.Protected) &&\n            excludeProtected\n        ) {\n            return true;\n        }\n\n        if (!comment) {\n            return false;\n        }\n\n        return (\n            comment.hasTag(\"hidden\") ||\n            comment.hasTag(\"ignore\") ||\n            (comment.hasTag(\"internal\") && excludeInternal)\n        );\n    }\n}\n"]}