{"version":3,"file":"CommentPlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/CommentPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\n\nimport { Comment, CommentTag } from '../../models/comments/index';\nimport {\n    Reflection,\n    ReflectionFlag,\n    ReflectionKind,\n    TypeParameterReflection,\n    DeclarationReflection,\n    ProjectReflection\n} from '../../models/reflections/index';\nimport { Component, ConverterComponent } from '../components';\nimport { parseComment, getRawComment } from '../factories/comment';\nimport { Converter } from '../converter';\nimport { Context } from '../context';\nimport { partition, uniq } from 'lodash';\nimport { SourceReference } from '../../models';\nimport { BindOption } from '../../utils';\n\n/**\n * These tags are not useful to display in the generated documentation.\n * They should be ignored when parsing comments. Any relevant type information\n * (for JS users) will be consumed by TypeScript and need not be preserved\n * in the comment.\n *\n * Note that param/arg/argument/return/returns are not present.\n * These tags will have their type information stripped when parsing, but still\n * provide useful information for documentation.\n */\nconst TAG_BLACKLIST = [\n    'augments',\n    'callback',\n    'class',\n    'constructor',\n    'enum',\n    'extends',\n    'this',\n    'type',\n    'typedef'\n];\n\n/**\n * Structure used by [[ContainerCommentHandler]] to store discovered module comments.\n */\ninterface ModuleComment {\n    /**\n     * The module reflection this comment is targeting.\n     */\n    reflection: Reflection;\n\n    /**\n     * The full text of the best matched comment.\n     */\n    fullText: string;\n\n    /**\n     * Has the full text been marked as being preferred?\n     */\n    isPreferred: boolean;\n}\n\n/**\n * A handler that parses TypeDoc comments and attaches [[Comment]] instances to\n * the generated reflections.\n */\n@Component({name: 'comment'})\nexport class CommentPlugin extends ConverterComponent {\n    @BindOption('excludeTags')\n    excludeTags!: string[];\n\n    /**\n     * List of discovered module comments.\n     * Defined in this.onBegin\n     */\n    private comments!: {[id: number]: ModuleComment};\n\n    /**\n     * Create a new CommentPlugin instance.\n     */\n    initialize() {\n        this.listenTo(this.owner, {\n            [Converter.EVENT_BEGIN]:                   this.onBegin,\n            [Converter.EVENT_CREATE_DECLARATION]:      this.onDeclaration,\n            [Converter.EVENT_CREATE_SIGNATURE]:        this.onDeclaration,\n            [Converter.EVENT_CREATE_TYPE_PARAMETER]:   this.onCreateTypeParameter,\n            [Converter.EVENT_FUNCTION_IMPLEMENTATION]: this.onFunctionImplementation,\n            [Converter.EVENT_RESOLVE_BEGIN]:           this.onBeginResolve,\n            [Converter.EVENT_RESOLVE]:                 this.onResolve\n        });\n    }\n\n    private storeModuleComment(comment: string, reflection: Reflection) {\n        const isPreferred = (comment.toLowerCase().includes('@preferred'));\n\n        if (this.comments[reflection.id]) {\n            const info = this.comments[reflection.id];\n            if (!isPreferred && (info.isPreferred || info.fullText.length > comment.length)) {\n                return;\n            }\n\n            info.fullText    = comment;\n            info.isPreferred = isPreferred;\n        } else {\n            this.comments[reflection.id] = {\n                reflection:  reflection,\n                fullText:    comment,\n                isPreferred: isPreferred\n            };\n        }\n    }\n\n    /**\n     * Apply all comment tag modifiers to the given reflection.\n     *\n     * @param reflection  The reflection the modifiers should be applied to.\n     * @param comment  The comment that should be searched for modifiers.\n     */\n    private applyModifiers(reflection: Reflection, comment: Comment) {\n        if (comment.hasTag('private')) {\n            reflection.setFlag(ReflectionFlag.Private);\n            comment.removeTags('private');\n        }\n\n        if (comment.hasTag('protected')) {\n            reflection.setFlag(ReflectionFlag.Protected);\n            comment.removeTags('protected');\n        }\n\n        if (comment.hasTag('public')) {\n            reflection.setFlag(ReflectionFlag.Public);\n            comment.removeTags('public');\n        }\n\n        if (comment.hasTag('event')) {\n            reflection.kind = ReflectionKind.Event;\n            // reflection.setFlag(ReflectionFlag.Event);\n            comment.removeTags('event');\n        }\n\n        if (reflection.kindOf(ReflectionKind.Module)) {\n            comment.removeTags('packagedocumentation');\n        }\n    }\n\n    /**\n     * Triggered when the converter begins converting a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onBegin(context: Context) {\n        this.comments = {};\n    }\n\n    /**\n     * Triggered when the converter has created a type parameter reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently processed.\n     * @param node  The node that is currently processed if available.\n     */\n    private onCreateTypeParameter(context: Context, reflection: TypeParameterReflection, node?: ts.Node) {\n        const comment = reflection.parent && reflection.parent.comment;\n        if (comment) {\n            let tag = comment.getTag('typeparam', reflection.name);\n            if (!tag) {\n                tag = comment.getTag('template', reflection.name);\n            }\n            if (!tag) {\n                tag = comment.getTag('param', `<${reflection.name}>`);\n            }\n            if (!tag) {\n                tag = comment.getTag('param', reflection.name);\n            }\n\n            if (tag) {\n                reflection.comment = new Comment(tag.text);\n                // comment.tags must be set if we found a tag.\n                comment.tags!.splice(comment.tags!.indexOf(tag), 1);\n            }\n        }\n    }\n\n    /**\n     * Triggered when the converter has created a declaration or signature reflection.\n     *\n     * Invokes the comment parser.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently processed.\n     * @param node  The node that is currently processed if available.\n     */\n    private onDeclaration(context: Context, reflection: Reflection, node?: ts.Node) {\n        if (!node) {\n            return;\n        }\n        const rawComment = getRawComment(node);\n        if (!rawComment) {\n            return;\n        }\n\n        if (reflection.kindOf(ReflectionKind.FunctionOrMethod) || (reflection.kindOf(ReflectionKind.Event) && reflection['signatures'])) {\n            const comment = parseComment(rawComment, reflection.comment);\n            this.applyModifiers(reflection, comment);\n            this.removeExcludedTags(comment);\n        } else if (reflection.kindOf(ReflectionKind.Namespace)) {\n            this.storeModuleComment(rawComment, reflection);\n        } else {\n            const comment = parseComment(rawComment, reflection.comment);\n            this.applyModifiers(reflection, comment);\n            this.removeExcludedTags(comment);\n            reflection.comment = comment;\n        }\n    }\n\n    /**\n     * Triggered when the converter has found a function implementation.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently processed.\n     * @param node  The node that is currently processed if available.\n     */\n    private onFunctionImplementation(context: Context, reflection: Reflection, node?: ts.Node) {\n        if (!node) {\n            return;\n        }\n\n        const comment = getRawComment(node);\n        if (comment) {\n            reflection.comment = parseComment(comment, reflection.comment);\n        }\n    }\n\n    /**\n     * Triggered when the converter begins resolving a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onBeginResolve(context: Context) {\n        for (const id in this.comments) {\n            if (!this.comments.hasOwnProperty(id)) {\n                continue;\n            }\n\n            const info    = this.comments[id];\n            const comment = parseComment(info.fullText);\n            comment.removeTags('preferred');\n\n            this.applyModifiers(info.reflection, comment);\n            info.reflection.comment = comment;\n        }\n\n        const stripInternal = !!this.application.options.getCompilerOptions().stripInternal;\n        const excludePrivate = this.application.options.getValue('excludePrivate');\n        const excludeProtected = this.application.options.getValue('excludeProtected');\n\n        const project = context.project;\n        const reflections = Object.values(project.reflections);\n\n        // remove signatures\n        // TODO: This doesn't really belong here. Removing comments due to @hidden yes, but private/protected no.\n        //   it needs to be here for now because users can use @public/@private/@protected to override visibility.\n        //   the converter should probably have a post resolve step in which it handles the excludePrivate/protected options.\n        const hidden = reflections.filter(reflection => CommentPlugin.isHidden(reflection, stripInternal, excludePrivate, excludeProtected));\n        hidden.forEach(reflection => project.removeReflection(reflection, true));\n\n        // remove functions with empty signatures after their signatures have been removed\n        const [ allRemoved, someRemoved ] = partition(\n            hidden.map(reflection => reflection.parent!)\n                .filter(method => method.kindOf(ReflectionKind.FunctionOrMethod)) as DeclarationReflection[],\n            method => method.signatures?.length === 0\n        );\n        allRemoved.forEach(reflection => project.removeReflection(reflection, true));\n        someRemoved.forEach(reflection => {\n            reflection.sources = uniq(reflection.signatures!.reduce<SourceReference[]>((c, s) => c.concat(s.sources || []), []));\n        });\n    }\n\n    /**\n     * Triggered when the converter resolves a reflection.\n     *\n     * Cleans up comment tags related to signatures like @param or @return\n     * and moves their data to the corresponding parameter reflections.\n     *\n     * This hook also copies over the comment of function implementations to their\n     * signatures.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently resolved.\n     */\n    private onResolve(context: Context, reflection: DeclarationReflection) {\n        if (!(reflection instanceof DeclarationReflection)) {\n            return;\n        }\n\n        const signatures = reflection.getAllSignatures();\n        if (signatures.length) {\n            const comment = reflection.comment;\n            if (comment && comment.hasTag('returns')) {\n                comment.returns = comment.getTag('returns')!.text;\n                comment.removeTags('returns');\n            }\n\n            signatures.forEach((signature) => {\n                let childComment = signature.comment;\n                if (childComment && childComment.hasTag('returns')) {\n                    childComment.returns = childComment.getTag('returns')!.text;\n                    childComment.removeTags('returns');\n                }\n\n                if (comment) {\n                    if (!childComment) {\n                        childComment = signature.comment = new Comment();\n                    }\n\n                    childComment.shortText = childComment.shortText || comment.shortText;\n                    childComment.text      = childComment.text      || comment.text;\n                    childComment.returns   = childComment.returns   || comment.returns;\n                    childComment.tags      = childComment.tags      || comment.tags;\n                }\n\n                if (signature.parameters) {\n                    signature.parameters.forEach((parameter) => {\n                        let tag: CommentTag | undefined;\n                        if (childComment) {\n                            tag = childComment.getTag('param', parameter.name);\n                        }\n                        if (comment && !tag) {\n                            tag = comment.getTag('param', parameter.name);\n                        }\n                        if (tag) {\n                            parameter.comment = new Comment(tag.text);\n                        }\n                    });\n                }\n\n                childComment?.removeTags('param');\n            });\n\n            comment?.removeTags('param');\n        }\n    }\n\n    private removeExcludedTags(comment: Comment) {\n        for (const tag of TAG_BLACKLIST) {\n            comment.removeTags(tag);\n        }\n        for (const tag of this.excludeTags) {\n            comment.removeTags(tag);\n        }\n    }\n\n    /**\n     * Remove all tags with the given name from the given comment instance.\n     * @deprecated Use [[Comment.removeTags]] instead.\n     * Warn in 0.17, remove in 0.18.\n     *\n     * @param comment  The comment that should be modified.\n     * @param tagName  The name of the that that should be removed.\n     */\n    static removeTags(comment: Comment | undefined, tagName: string) {\n        // Can't use a logger here, we don't have one.\n        console.warn('Using deprecated function removeTags. This function will be removed in the next minor release.');\n        comment?.removeTags(tagName);\n    }\n\n    /**\n     * Remove the specified reflections from the project.\n     * @deprecated use [[ProjectReflection.removeReflection]]\n     * Warn in 0.17, remove in 0.18\n     */\n    static removeReflections(project: ProjectReflection, reflections: Reflection[]) {\n        // Can't use a logger here, we don't have one.\n        console.warn('Using deprecated function removeReflections. This function will be removed in the next minor release.');\n        for (const reflection of reflections) {\n            project.removeReflection(reflection, true);\n        }\n    }\n\n    /**\n     * Remove the given reflection from the project.\n     * @deprecated use [[ProjectReflection.removeReflection]]\n     * Warn in 0.17, remove in 0.18\n     */\n    static removeReflection(project: ProjectReflection, reflection: Reflection) {\n        // Can't use a logger here, we don't have one.\n        console.warn('Using deprecated function removeReflections. This function will be removed in the next minor release.');\n        project.removeReflection(reflection, true);\n    }\n\n    /**\n     * Determines whether or not a reflection has been hidden\n     *\n     * @param reflection Reflection to check if hidden\n     */\n    private static isHidden(\n        reflection: Reflection,\n        stripInternal: boolean,\n        excludePrivate: boolean,\n        excludeProtected: boolean\n    ) {\n        const comment = reflection.comment;\n\n        if (reflection.flags.hasFlag(ReflectionFlag.Private) && excludePrivate) {\n            return true;\n        }\n\n        if (reflection.flags.hasFlag(ReflectionFlag.Protected) && excludeProtected) {\n            return true;\n        }\n\n        if (!comment) {\n            return false;\n        }\n\n        return (\n            comment.hasTag('hidden')\n            || comment.hasTag('ignore')\n            || (comment.hasTag('internal') && stripInternal)\n        );\n    }\n}\n"]}