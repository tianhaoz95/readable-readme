{"version":3,"file":"InheritDocPlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/InheritDocPlugin.ts"],"names":[],"mappings":";;;;;;;;;AAAA,yCAMsB;AACtB,8CAA8D;AAC9D,4CAAyC;AAEzC,sDAAmD;AACnD,gEAG2C;AAE3C;;;;;;;;;;GAUG;AAEH,IAAa,gBAAgB,GAA7B,MAAa,gBAAiB,SAAQ,+BAAkB;IACpD;;OAEG;IACH,UAAU;QACN,IAAI,CAAC,QAAQ,CACT,IAAI,CAAC,KAAK,EACV;YACI,CAAC,qBAAS,CAAC,aAAa,CAAC,EAAE,IAAI,CAAC,SAAS;SAC5C,EACD,SAAS,EACT,CAAC,GAAG,CACP,CAAC;IACN,CAAC;IAED;;;;;;;;;OASG;IACK,SAAS,CAAC,QAAiB,EAAE,UAAiC;QAClE,IAAI,UAAU,YAAY,4BAAmB,EAAE;YAC3C,MAAM,mBAAmB,GAAqB,CAAC,IAAI,EAAE,EAAE;;gBACnD,IAAI,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC;gBACnC,MAAM,UAAU,eAAG,IAAI,CAAC,OAAO,0CAAE,MAAM,CAAC,YAAY,2CAC9C,SAAS,CAAC;gBAChB,MAAM,MAAM,GACR,UAAU,IAAI,UAAU,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;gBAC9D,IAAI,oBAAoB,GAAG,MAAM,CAAC;gBAClC,IACI,MAAM,YAAY,8BAAqB;oBACvC,IAAI,YAAY,4BAAmB,EACrC;oBACE,MAAM,UAAU,GAAG,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,MAAM,CAC7B,uBAAc,CAAC,gBAAgB,CAClC,CAAC;oBACF,IAAI,UAAU,EAAE;wBACZ,oBAAoB,eAChB,MAAM,CAAC,UAAU,0CAAE,IAAI,CAAC,CAAC,SAAS,EAAE,EAAE;4BAClC,OAAO,aAAI,CAAC,eAAe,CACvB,SAAS,CAAC,iBAAiB,EAAE,EAC7B,IAAI,CAAC,iBAAiB,EAAE,CAC3B,CAAC;wBACN,CAAC,0CAAK,MAAM,CAAC,UAAU,0CAAG,CAAC,CAAC,CAAC;qBACpC;iBACJ;gBAED,IAAI,oBAAoB,YAAY,qBAAU,EAAE;oBAC5C,yBAAW,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC;iBAC3C;YACL,CAAC,CAAC;YACF,UAAU,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC;SAC5C;IACL,CAAC;CACJ,CAAA;AA3DY,gBAAgB;IAD5B,sBAAS,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;GACrB,gBAAgB,CA2D5B;AA3DY,4CAAgB","sourcesContent":["import {\n    ContainerReflection,\n    DeclarationReflection,\n    ReflectionKind,\n    SignatureReflection,\n    Type,\n} from \"../../models\";\nimport { Component, ConverterComponent } from \"../components\";\nimport { Converter } from \"../converter\";\nimport { Context } from \"../context\";\nimport { copyComment } from \"../utils/reflections\";\nimport {\n    Reflection,\n    TraverseCallback,\n} from \"../../models/reflections/abstract\";\n\n/**\n * A plugin that handles `inheritDoc` by copying documentation from another API item.\n *\n * What gets copied:\n * - short text\n * - text\n * - `@remarks` block\n * - `@params` block\n * - `@typeParam` block\n * - `@return` block\n */\n@Component({ name: \"inheritDoc\" })\nexport class InheritDocPlugin extends ConverterComponent {\n    /**\n     * Create a new InheritDocPlugin instance.\n     */\n    initialize() {\n        this.listenTo(\n            this.owner,\n            {\n                [Converter.EVENT_RESOLVE]: this.onResolve,\n            },\n            undefined,\n            -200\n        );\n    }\n\n    /**\n     * Triggered when the converter resolves a reflection.\n     *\n     * Traverse through reflection descendant to check for `inheritDoc` tag.\n     * If encountered, the parameter of the tag iss used to determine a source reflection\n     * that will provide actual comment.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently resolved.\n     */\n    private onResolve(_context: Context, reflection: DeclarationReflection) {\n        if (reflection instanceof ContainerReflection) {\n            const descendantsCallback: TraverseCallback = (item) => {\n                item.traverse(descendantsCallback);\n                const inheritDoc = item.comment?.getTag(\"inheritdoc\")\n                    ?.paramName;\n                const source =\n                    inheritDoc && reflection.findReflectionByName(inheritDoc);\n                let referencedReflection = source;\n                if (\n                    source instanceof DeclarationReflection &&\n                    item instanceof SignatureReflection\n                ) {\n                    const isFunction = source?.kindOf(\n                        ReflectionKind.FunctionOrMethod\n                    );\n                    if (isFunction) {\n                        referencedReflection =\n                            source.signatures?.find((signature) => {\n                                return Type.isTypeListEqual(\n                                    signature.getParameterTypes(),\n                                    item.getParameterTypes()\n                                );\n                            }) ?? source.signatures?.[0];\n                    }\n                }\n\n                if (referencedReflection instanceof Reflection) {\n                    copyComment(item, referencedReflection);\n                }\n            };\n            reflection.traverse(descendantsCallback);\n        }\n    }\n}\n"]}