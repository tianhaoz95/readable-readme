{"version":3,"file":"PackagePlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/PackagePlugin.ts"],"names":[],"mappings":";;;;;;;;;AAAA,6BAA6B;AAC7B,yBAAyB;AAEzB,8CAA8D;AAC9D,4CAAyC;AAEzC,uCAAmD;AACnD,uCAAoD;AAEpD;;;GAGG;AAEH,IAAa,aAAa,GAA1B,MAAa,aAAc,SAAQ,+BAAkB;IAiBjD;;OAEG;IACH,UAAU;QACN,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE;YACtB,CAAC,qBAAS,CAAC,WAAW,CAAC,EAAE,IAAI,CAAC,OAAO;YACrC,CAAC,qBAAS,CAAC,mBAAmB,CAAC,EAAE,IAAI,CAAC,cAAc;SACvD,CAAC,CAAC;IACP,CAAC;IAED;;OAEG;IACK,OAAO,CAAC,QAAiB;QAC7B,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,CAAC,WAAW,GAAG,SAAS,CAAC;QAE7B,IAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;QACzB,MAAM,YAAY,GAAG,MAAM,KAAK,MAAM,CAAC;QACvC,IAAI,CAAC,YAAY,IAAI,MAAM,EAAE;YACzB,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAC9B,IAAI,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;gBACvB,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;aAC5B;SACJ;QAED,MAAM,qBAAqB,GAAG,GAAG,EAAE,CAC/B,CAAC,YAAY,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,WAAW,CAAC;QAC1D,MAAM,mBAAmB,GAAG,CAAC,OAAe,EAAE,EAAE,CAC5C,OAAO,KAAK,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;QAEvD,IAAI,OAAO,GAAG,IAAI,CAAC,OAAO,CACtB,uBAAkB,CACd,IAAI,CAAC,WAAW,CAAC,OAAO;aACnB,QAAQ,CAAC,aAAa,CAAC;aACvB,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CACzC,CACJ,CAAC;QACF,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,0BAA0B,OAAO,EAAE,CAAC,CAAC;QACrE,OAAO,CAAC,qBAAqB,EAAE,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAAC,EAAE;YAC9D,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;gBACrC,MAAM,iBAAiB,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;gBAC7C,IACI,CAAC,YAAY;oBACb,CAAC,IAAI,CAAC,UAAU;oBAChB,iBAAiB,KAAK,WAAW,EACnC;oBACE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;iBAC9C;gBAED,IAAI,CAAC,IAAI,CAAC,WAAW,IAAI,iBAAiB,KAAK,cAAc,EAAE;oBAC3D,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;iBAC/C;YACL,CAAC,CAAC,CAAC;YAEH,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;SACpD;IACL,CAAC;IAED;;;;OAIG;IACK,cAAc,CAAC,OAAgB;QACnC,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QAChC,IAAI,IAAI,CAAC,UAAU,EAAE;YACjB,OAAO,CAAC,MAAM,GAAG,gBAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC9C;QAED,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,gBAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YAC7D,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE;gBACf,OAAO,CAAC,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;aACnD;YACD,IAAI,IAAI,CAAC,cAAc,EAAE;gBACrB,OAAO,CAAC,IAAI,GAAG,GAAG,OAAO,CAAC,IAAI,OAAO,OAAO,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC;aACtE;SACJ;IACL,CAAC;CACJ,CAAA;AA/FG;IADC,kBAAU,CAAC,QAAQ,CAAC;6CACL;AAGhB;IADC,kBAAU,CAAC,gBAAgB,CAAC;qDACJ;AALhB,aAAa;IADzB,sBAAS,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;GAClB,aAAa,CAiGzB;AAjGY,sCAAa","sourcesContent":["import * as Path from \"path\";\nimport * as FS from \"fs\";\n\nimport { Component, ConverterComponent } from \"../components\";\nimport { Converter } from \"../converter\";\nimport { Context } from \"../context\";\nimport { BindOption, readFile } from \"../../utils\";\nimport { getCommonDirectory } from \"../../utils/fs\";\n\n/**\n * A handler that tries to find the package.json and readme.md files of the\n * current project.\n */\n@Component({ name: \"package\" })\nexport class PackagePlugin extends ConverterComponent {\n    @BindOption(\"readme\")\n    readme!: string;\n\n    @BindOption(\"includeVersion\")\n    includeVersion!: boolean;\n\n    /**\n     * The file name of the found readme.md file.\n     */\n    private readmeFile?: string;\n\n    /**\n     * The file name of the found package.json file.\n     */\n    private packageFile?: string;\n\n    /**\n     * Create a new PackageHandler instance.\n     */\n    initialize() {\n        this.listenTo(this.owner, {\n            [Converter.EVENT_BEGIN]: this.onBegin,\n            [Converter.EVENT_RESOLVE_BEGIN]: this.onBeginResolve,\n        });\n    }\n\n    /**\n     * Triggered when the converter begins converting a project.\n     */\n    private onBegin(_context: Context) {\n        this.readmeFile = undefined;\n        this.packageFile = undefined;\n\n        let readme = this.readme;\n        const noReadmeFile = readme === \"none\";\n        if (!noReadmeFile && readme) {\n            readme = Path.resolve(readme);\n            if (FS.existsSync(readme)) {\n                this.readmeFile = readme;\n            }\n        }\n\n        const packageAndReadmeFound = () =>\n            (noReadmeFile || this.readmeFile) && this.packageFile;\n        const reachedTopDirectory = (dirName: string) =>\n            dirName === Path.resolve(Path.join(dirName, \"..\"));\n\n        let dirName = Path.resolve(\n            getCommonDirectory(\n                this.application.options\n                    .getValue(\"entryPoints\")\n                    .map((path) => Path.resolve(path))\n            )\n        );\n        this.application.logger.verbose(`Begin readme search at ${dirName}`);\n        while (!packageAndReadmeFound() && !reachedTopDirectory(dirName)) {\n            FS.readdirSync(dirName).forEach((file) => {\n                const lowercaseFileName = file.toLowerCase();\n                if (\n                    !noReadmeFile &&\n                    !this.readmeFile &&\n                    lowercaseFileName === \"readme.md\"\n                ) {\n                    this.readmeFile = Path.join(dirName, file);\n                }\n\n                if (!this.packageFile && lowercaseFileName === \"package.json\") {\n                    this.packageFile = Path.join(dirName, file);\n                }\n            });\n\n            dirName = Path.resolve(Path.join(dirName, \"..\"));\n        }\n    }\n\n    /**\n     * Triggered when the converter begins resolving a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onBeginResolve(context: Context) {\n        const project = context.project;\n        if (this.readmeFile) {\n            project.readme = readFile(this.readmeFile);\n        }\n\n        if (this.packageFile) {\n            project.packageInfo = JSON.parse(readFile(this.packageFile));\n            if (!project.name) {\n                project.name = String(project.packageInfo.name);\n            }\n            if (this.includeVersion) {\n                project.name = `${project.name} - v${project.packageInfo.version}`;\n            }\n        }\n    }\n}\n"]}