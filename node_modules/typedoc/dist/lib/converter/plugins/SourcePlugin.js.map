{"version":3,"file":"SourcePlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/SourcePlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Path from \"path\";\nimport * as ts from \"typescript\";\n\nimport {\n    Reflection,\n    ProjectReflection,\n    DeclarationReflection,\n} from \"../../models/reflections/index\";\nimport { SourceDirectory, SourceFile } from \"../../models/sources/index\";\nimport { Component, ConverterComponent } from \"../components\";\nimport { Converter } from \"../converter\";\nimport { Context } from \"../context\";\nimport { BindOption } from \"../../utils\";\nimport { isNamedNode } from \"../utils/nodes\";\nimport { getCommonDirectory, normalizePath } from \"../../utils/fs\";\nimport { relative } from \"path\";\nimport * as assert from \"assert\";\n\n/**\n * A handler that attaches source file information to reflections.\n */\n@Component({ name: \"source\" })\nexport class SourcePlugin extends ConverterComponent {\n    @BindOption(\"disableSources\")\n    readonly disableSources!: boolean;\n\n    /**\n     * A map of all generated [[SourceFile]] instances.\n     */\n    private fileMappings: { [name: string]: SourceFile } = {};\n\n    /**\n     * All file names to find the base path from.\n     */\n    private fileNames = new Set<string>();\n    private basePath?: string;\n\n    /**\n     * Create a new SourceHandler instance.\n     */\n    initialize() {\n        this.listenTo(this.owner, {\n            [Converter.EVENT_BEGIN]: this.onBegin,\n            [Converter.EVENT_CREATE_DECLARATION]: this.onDeclaration,\n            [Converter.EVENT_CREATE_SIGNATURE]: this.onDeclaration,\n            [Converter.EVENT_RESOLVE_BEGIN]: this.onBeginResolve,\n            [Converter.EVENT_RESOLVE]: this.onResolve,\n            [Converter.EVENT_RESOLVE_END]: this.onEndResolve,\n        });\n    }\n\n    private getSourceFile(\n        fileName: string,\n        project: ProjectReflection\n    ): SourceFile {\n        if (!this.fileMappings[fileName]) {\n            const file = new SourceFile(fileName);\n            this.fileMappings[fileName] = file;\n            project.files.push(file);\n        }\n\n        return this.fileMappings[fileName];\n    }\n\n    /**\n     * Triggered once per project before the dispatcher invokes the compiler.\n     *\n     * @param event  An event object containing the related project and compiler instance.\n     */\n    private onBegin() {\n        this.fileNames.clear();\n        this.fileMappings = {};\n    }\n\n    /**\n     * Triggered when the converter has created a declaration reflection.\n     *\n     * Attach the current source file to the [[DeclarationReflection.sources]] array.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently processed.\n     * @param node  The node that is currently processed if available.\n     */\n    private onDeclaration(\n        context: Context,\n        reflection: Reflection,\n        node?: ts.Node\n    ) {\n        if (!node || this.disableSources) {\n            return;\n        }\n        const sourceFile = node.getSourceFile();\n        const fileName = sourceFile.fileName;\n        this.fileNames.add(fileName);\n        const file: SourceFile = this.getSourceFile(fileName, context.project);\n\n        let position: ts.LineAndCharacter;\n        if (isNamedNode(node)) {\n            position = ts.getLineAndCharacterOfPosition(\n                sourceFile,\n                node.name.end\n            );\n        } else {\n            position = ts.getLineAndCharacterOfPosition(sourceFile, node.pos);\n        }\n\n        if (reflection instanceof DeclarationReflection) {\n            file.reflections.push(reflection);\n        }\n\n        if (!reflection.sources) {\n            reflection.sources = [];\n        }\n\n        reflection.sources.push({\n            file: file,\n            fileName: fileName,\n            line: position.line + 1,\n            character: position.character,\n        });\n    }\n\n    /**\n     * Triggered when the converter begins resolving a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onBeginResolve(context: Context) {\n        this.basePath = getCommonDirectory([...this.fileNames]);\n        for (const file of context.project.files) {\n            const fileName = (file.fileName = normalizePath(\n                relative(this.basePath, file.fileName)\n            ));\n            this.fileMappings[fileName] = file;\n        }\n    }\n\n    /**\n     * Triggered when the converter resolves a reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently resolved.\n     */\n    private onResolve(_context: Context, reflection: Reflection) {\n        assert(this.basePath != null);\n        for (const source of reflection.sources ?? []) {\n            source.fileName = normalizePath(\n                relative(this.basePath, source.fileName)\n            );\n        }\n    }\n\n    /**\n     * Triggered when the converter has finished resolving a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onEndResolve(context: Context) {\n        const project = context.project;\n        const home = project.directory;\n        project.files.forEach((file) => {\n            const reflections: Reflection[] = [];\n            file.reflections.forEach((reflection) => {\n                reflections.push(reflection);\n            });\n\n            let directory = home;\n            const path = Path.dirname(file.fileName);\n            if (path !== \".\") {\n                path.split(\"/\").forEach((pathPiece) => {\n                    if (\n                        !Object.prototype.hasOwnProperty.call(\n                            directory.directories,\n                            pathPiece\n                        )\n                    ) {\n                        directory.directories[pathPiece] = new SourceDirectory(\n                            pathPiece,\n                            directory\n                        );\n                    }\n                    directory = directory.directories[pathPiece];\n                });\n            }\n\n            directory.files.push(file);\n            // reflections.sort(GroupHandler.sortCallback);\n            file.parent = directory;\n            file.reflections = reflections;\n        });\n    }\n}\n"]}