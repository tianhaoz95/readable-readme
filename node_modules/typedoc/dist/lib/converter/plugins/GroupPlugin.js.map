{"version":3,"file":"GroupPlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/GroupPlugin.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,0DAKwC;AACxC,kEAA+D;AAE/D,8CAA8D;AAC9D,4CAAyC;AAGzC;;;;GAIG;AAEH,IAAa,WAAW,mBAAxB,MAAa,WAAY,SAAQ,+BAAkB;IAoD/C;;OAEG;IACH,UAAU;QACN,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE;YACtB,CAAC,qBAAS,CAAC,aAAa,CAAC,EAAE,IAAI,CAAC,SAAS;YACzC,CAAC,qBAAS,CAAC,iBAAiB,CAAC,EAAE,IAAI,CAAC,YAAY;SACnD,CAAC,CAAC;IACP,CAAC;IAED;;;;;OAKG;IACK,SAAS,CAAC,QAAiB,EAAE,UAAsB;QACvD,UAAU,CAAC,UAAU,GAAG,aAAW,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAErE,IAAI,UAAU,YAAY,2BAAmB,EAAE;YAC3C,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;SAC1B;IACL,CAAC;IAED;;;;OAIG;IACK,YAAY,CAAC,OAAgB;QACjC,SAAS,aAAa,CAAC,SAA0B;YAC7C,SAAS,CAAC,MAAM,GAAG,aAAW,CAAC,mBAAmB,CAC9C,SAAS,CAAC,iBAAiB,EAAE,CAChC,CAAC;YAEF,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,CAAC,EAAE;gBACpD,aAAa,CAAC,GAAG,CAAC,CAAC;aACtB;QACL,CAAC;QAED,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QAChC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QAEpB,aAAa,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACjC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YAC3B,IAAI,CAAC,MAAM,GAAG,aAAW,CAAC,mBAAmB,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;IACP,CAAC;IAEO,KAAK,CAAC,UAA+B;QACzC,IACI,UAAU,CAAC,QAAQ;YACnB,UAAU,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC;YAC9B,CAAC,UAAU,CAAC,MAAM,EACpB;YACE,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAW,CAAC,YAAY,CAAC,CAAC;YACnD,UAAU,CAAC,MAAM,GAAG,aAAW,CAAC,mBAAmB,CAC/C,UAAU,CAAC,QAAQ,CACtB,CAAC;SACL;IACL,CAAC;IAED;;;;;;;OAOG;IACH,MAAM,CAAC,mBAAmB,CAAC,WAAyB;QAChD,MAAM,MAAM,GAAsB,EAAE,CAAC;QACrC,WAAW,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACpC,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;gBACxB,IAAI,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,EAAE;oBAC3B,SAAS;iBACZ;gBAED,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC3B,OAAO;aACV;YAED,MAAM,KAAK,GAAG,IAAI,iCAAe,CAC7B,aAAW,CAAC,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,EACrC,KAAK,CAAC,IAAI,CACb,CAAC;YACF,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAC3B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvB,CAAC,CAAC,CAAC;QAEH,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YACrB,IAAI,YAAY,GAAG,IAAI,CAAC;YACxB,IAAI,UAAU,GAAG,IAAI,CAAC;YACtB,IAAI,YAAY,GAAG,IAAI,CAAC;YACxB,IAAI,WAAW,GAAG,IAAI,CAAC;YAEvB,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC7B,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS,IAAI,UAAU,CAAC;gBACjD,YAAY;oBACR,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC;wBAClD,YAAY,CAAC;gBACjB,WAAW,GAAG,KAAK,CAAC,KAAK,CAAC,UAAU,IAAI,WAAW,CAAC;gBAEpD,IAAI,KAAK,YAAY,6BAAqB,EAAE;oBACxC,YAAY,GAAG,CAAC,CAAC,KAAK,CAAC,aAAa,IAAI,YAAY,CAAC;iBACxD;qBAAM;oBACH,YAAY,GAAG,KAAK,CAAC;iBACxB;YACL,CAAC,CAAC,CAAC;YAEH,KAAK,CAAC,uBAAuB,GAAG,YAAY,CAAC;YAC7C,KAAK,CAAC,qBAAqB,GAAG,UAAU,CAAC;YACzC,KAAK,CAAC,gCAAgC,GAAG,YAAY,CAAC;YACtD,KAAK,CAAC,sBAAsB,GAAG,WAAW,CAAC;QAC/C,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IAClB,CAAC;IAED;;;;;OAKG;IACK,MAAM,CAAC,aAAa,CAAC,IAAoB;QAC7C,IAAI,GAAG,GAAG,sBAAc,CAAC,IAAI,CAAC,CAAC;QAC/B,GAAG,GAAG,GAAG,CAAC,OAAO,CACb,aAAa,EACb,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,WAAW,EAAE,CAC1C,CAAC;QACF,OAAO,GAAG,CAAC;IACf,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,eAAe,CAAC,IAAoB;QACvC,IAAI,IAAI,IAAI,aAAW,CAAC,SAAS,EAAE;YAC/B,OAAO,aAAW,CAAC,SAAS,CACxB,IAA0C,CAC7C,CAAC;SACL;aAAM;YACH,OAAO,aAAW,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;SAC1C;IACL,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,aAAa,CAAC,IAAoB;QACrC,IAAI,IAAI,IAAI,aAAW,CAAC,OAAO,EAAE;YAC7B,OAAO,aAAW,CAAC,OAAO,CACtB,IAAwC,CAC3C,CAAC;SACL;aAAM;YACH,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;SACzC;IACL,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,YAAY,CAAC,CAAa,EAAE,CAAa;QAC5C,MAAM,OAAO,GAAG,aAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACpD,MAAM,OAAO,GAAG,aAAW,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;QACpD,IAAI,OAAO,KAAK,OAAO,EAAE;YACrB,IAAI,CAAC,CAAC,KAAK,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE;gBACvC,OAAO,CAAC,CAAC;aACZ;YACD,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,IAAI,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE;gBACvC,OAAO,CAAC,CAAC,CAAC;aACb;YACD,IAAI,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,EAAE;gBACnB,OAAO,CAAC,CAAC;aACZ;YACD,OAAO,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACnC;aAAM;YACH,OAAO,OAAO,GAAG,OAAO,CAAC;SAC5B;IACL,CAAC;CACJ,CAAA;AAnPG;;GAEG;AACI,mBAAO,GAAG;IACb,sBAAc,CAAC,OAAO;IACtB,sBAAc,CAAC,MAAM;IACrB,sBAAc,CAAC,SAAS;IACxB,sBAAc,CAAC,IAAI;IACnB,sBAAc,CAAC,UAAU;IACzB,sBAAc,CAAC,KAAK;IACpB,sBAAc,CAAC,SAAS;IACxB,sBAAc,CAAC,SAAS;IAExB,sBAAc,CAAC,WAAW;IAC1B,sBAAc,CAAC,KAAK;IACpB,sBAAc,CAAC,QAAQ;IACvB,sBAAc,CAAC,QAAQ;IACvB,sBAAc,CAAC,QAAQ;IACvB,sBAAc,CAAC,QAAQ;IACvB,sBAAc,CAAC,MAAM;IACrB,sBAAc,CAAC,aAAa;IAE5B,sBAAc,CAAC,SAAS;IACxB,sBAAc,CAAC,aAAa;IAC5B,sBAAc,CAAC,WAAW;IAC1B,sBAAc,CAAC,aAAa;IAC5B,sBAAc,CAAC,oBAAoB;IACnC,sBAAc,CAAC,cAAc;IAC7B,sBAAc,CAAC,YAAY;IAC3B,sBAAc,CAAC,YAAY;CAC9B,CAAC;AAEF;;GAEG;AACI,qBAAS,GAAG;IACf,CAAC,sBAAc,CAAC,IAAI,CAAC,EAAE,aAAa;IACpC,CAAC,sBAAc,CAAC,UAAU,CAAC,EAAE,oBAAoB;CACpD,CAAC;AAEF;;GAEG;AACI,mBAAO,GAAG;IACb,CAAC,sBAAc,CAAC,KAAK,CAAC,EAAE,SAAS;IACjC,CAAC,sBAAc,CAAC,QAAQ,CAAC,EAAE,YAAY;IACvC,CAAC,sBAAc,CAAC,IAAI,CAAC,EAAE,cAAc;IACrC,CAAC,sBAAc,CAAC,UAAU,CAAC,EAAE,qBAAqB;IAClD,CAAC,sBAAc,CAAC,SAAS,CAAC,EAAE,cAAc;CAC7C,CAAC;AAlDO,WAAW;IADvB,sBAAS,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;GAChB,WAAW,CAoPvB;AApPY,kCAAW","sourcesContent":["import {\n    Reflection,\n    ReflectionKind,\n    ContainerReflection,\n    DeclarationReflection,\n} from \"../../models/reflections/index\";\nimport { ReflectionGroup } from \"../../models/ReflectionGroup\";\nimport { SourceDirectory } from \"../../models/sources/directory\";\nimport { Component, ConverterComponent } from \"../components\";\nimport { Converter } from \"../converter\";\nimport { Context } from \"../context\";\n\n/**\n * A handler that sorts and groups the found reflections in the resolving phase.\n *\n * The handler sets the ´groups´ property of all reflections.\n */\n@Component({ name: \"group\" })\nexport class GroupPlugin extends ConverterComponent {\n    /**\n     * Define the sort order of reflections.\n     */\n    static WEIGHTS = [\n        ReflectionKind.Project,\n        ReflectionKind.Module,\n        ReflectionKind.Namespace,\n        ReflectionKind.Enum,\n        ReflectionKind.EnumMember,\n        ReflectionKind.Class,\n        ReflectionKind.Interface,\n        ReflectionKind.TypeAlias,\n\n        ReflectionKind.Constructor,\n        ReflectionKind.Event,\n        ReflectionKind.Property,\n        ReflectionKind.Variable,\n        ReflectionKind.Function,\n        ReflectionKind.Accessor,\n        ReflectionKind.Method,\n        ReflectionKind.ObjectLiteral,\n\n        ReflectionKind.Parameter,\n        ReflectionKind.TypeParameter,\n        ReflectionKind.TypeLiteral,\n        ReflectionKind.CallSignature,\n        ReflectionKind.ConstructorSignature,\n        ReflectionKind.IndexSignature,\n        ReflectionKind.GetSignature,\n        ReflectionKind.SetSignature,\n    ];\n\n    /**\n     * Define the singular name of individual reflection kinds.\n     */\n    static SINGULARS = {\n        [ReflectionKind.Enum]: \"Enumeration\",\n        [ReflectionKind.EnumMember]: \"Enumeration member\",\n    };\n\n    /**\n     * Define the plural name of individual reflection kinds.\n     */\n    static PLURALS = {\n        [ReflectionKind.Class]: \"Classes\",\n        [ReflectionKind.Property]: \"Properties\",\n        [ReflectionKind.Enum]: \"Enumerations\",\n        [ReflectionKind.EnumMember]: \"Enumeration members\",\n        [ReflectionKind.TypeAlias]: \"Type aliases\",\n    };\n\n    /**\n     * Create a new GroupPlugin instance.\n     */\n    initialize() {\n        this.listenTo(this.owner, {\n            [Converter.EVENT_RESOLVE]: this.onResolve,\n            [Converter.EVENT_RESOLVE_END]: this.onEndResolve,\n        });\n    }\n\n    /**\n     * Triggered when the converter resolves a reflection.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     * @param reflection  The reflection that is currently resolved.\n     */\n    private onResolve(_context: Context, reflection: Reflection) {\n        reflection.kindString = GroupPlugin.getKindSingular(reflection.kind);\n\n        if (reflection instanceof ContainerReflection) {\n            this.group(reflection);\n        }\n    }\n\n    /**\n     * Triggered when the converter has finished resolving a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onEndResolve(context: Context) {\n        function walkDirectory(directory: SourceDirectory) {\n            directory.groups = GroupPlugin.getReflectionGroups(\n                directory.getAllReflections()\n            );\n\n            for (const dir of Object.values(directory.directories)) {\n                walkDirectory(dir);\n            }\n        }\n\n        const project = context.project;\n        this.group(project);\n\n        walkDirectory(project.directory);\n        project.files.forEach((file) => {\n            file.groups = GroupPlugin.getReflectionGroups(file.reflections);\n        });\n    }\n\n    private group(reflection: ContainerReflection) {\n        if (\n            reflection.children &&\n            reflection.children.length > 0 &&\n            !reflection.groups\n        ) {\n            reflection.children.sort(GroupPlugin.sortCallback);\n            reflection.groups = GroupPlugin.getReflectionGroups(\n                reflection.children\n            );\n        }\n    }\n\n    /**\n     * Create a grouped representation of the given list of reflections.\n     *\n     * Reflections are grouped by kind and sorted by weight and name.\n     *\n     * @param reflections  The reflections that should be grouped.\n     * @returns An array containing all children of the given reflection grouped by their kind.\n     */\n    static getReflectionGroups(reflections: Reflection[]): ReflectionGroup[] {\n        const groups: ReflectionGroup[] = [];\n        reflections.forEach((child) => {\n            for (let i = 0; i < groups.length; i++) {\n                const group = groups[i];\n                if (group.kind !== child.kind) {\n                    continue;\n                }\n\n                group.children.push(child);\n                return;\n            }\n\n            const group = new ReflectionGroup(\n                GroupPlugin.getKindPlural(child.kind),\n                child.kind\n            );\n            group.children.push(child);\n            groups.push(group);\n        });\n\n        groups.forEach((group) => {\n            let allInherited = true;\n            let allPrivate = true;\n            let allProtected = true;\n            let allExternal = true;\n\n            group.children.forEach((child) => {\n                allPrivate = child.flags.isPrivate && allPrivate;\n                allProtected =\n                    (child.flags.isPrivate || child.flags.isProtected) &&\n                    allProtected;\n                allExternal = child.flags.isExternal && allExternal;\n\n                if (child instanceof DeclarationReflection) {\n                    allInherited = !!child.inheritedFrom && allInherited;\n                } else {\n                    allInherited = false;\n                }\n            });\n\n            group.allChildrenAreInherited = allInherited;\n            group.allChildrenArePrivate = allPrivate;\n            group.allChildrenAreProtectedOrPrivate = allProtected;\n            group.allChildrenAreExternal = allExternal;\n        });\n\n        return groups;\n    }\n\n    /**\n     * Transform the internal typescript kind identifier into a human readable version.\n     *\n     * @param kind  The original typescript kind identifier.\n     * @returns A human readable version of the given typescript kind identifier.\n     */\n    private static getKindString(kind: ReflectionKind): string {\n        let str = ReflectionKind[kind];\n        str = str.replace(\n            /(.)([A-Z])/g,\n            (_m, a, b) => a + \" \" + b.toLowerCase()\n        );\n        return str;\n    }\n\n    /**\n     * Return the singular name of a internal typescript kind identifier.\n     *\n     * @param kind The original internal typescript kind identifier.\n     * @returns The singular name of the given internal typescript kind identifier\n     */\n    static getKindSingular(kind: ReflectionKind): string {\n        if (kind in GroupPlugin.SINGULARS) {\n            return GroupPlugin.SINGULARS[\n                kind as keyof typeof GroupPlugin.SINGULARS\n            ];\n        } else {\n            return GroupPlugin.getKindString(kind);\n        }\n    }\n\n    /**\n     * Return the plural name of a internal typescript kind identifier.\n     *\n     * @param kind The original internal typescript kind identifier.\n     * @returns The plural name of the given internal typescript kind identifier\n     */\n    static getKindPlural(kind: ReflectionKind): string {\n        if (kind in GroupPlugin.PLURALS) {\n            return GroupPlugin.PLURALS[\n                kind as keyof typeof GroupPlugin.PLURALS\n            ];\n        } else {\n            return this.getKindString(kind) + \"s\";\n        }\n    }\n\n    /**\n     * Callback used to sort reflections by weight defined by ´GroupPlugin.WEIGHTS´ and name.\n     *\n     * @param a The left reflection to sort.\n     * @param b The right reflection to sort.\n     * @returns The sorting weight.\n     */\n    static sortCallback(a: Reflection, b: Reflection): number {\n        const aWeight = GroupPlugin.WEIGHTS.indexOf(a.kind);\n        const bWeight = GroupPlugin.WEIGHTS.indexOf(b.kind);\n        if (aWeight === bWeight) {\n            if (a.flags.isStatic && !b.flags.isStatic) {\n                return 1;\n            }\n            if (!a.flags.isStatic && b.flags.isStatic) {\n                return -1;\n            }\n            if (a.name === b.name) {\n                return 0;\n            }\n            return a.name > b.name ? 1 : -1;\n        } else {\n            return aWeight - bWeight;\n        }\n    }\n}\n"]}