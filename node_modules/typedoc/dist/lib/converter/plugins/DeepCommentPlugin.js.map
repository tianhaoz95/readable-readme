{"version":3,"file":"DeepCommentPlugin.js","sourceRoot":"","sources":["../../../../src/lib/converter/plugins/DeepCommentPlugin.ts"],"names":[],"mappings":";;;;;;;;;AAAA,0DAKwC;AACxC,uDAAkE;AAClE,8CAA8D;AAC9D,4CAAyC;AAEzC,uCAA8C;AAE9C;;GAEG;AAEH,IAAa,iBAAiB,GAA9B,MAAa,iBAAkB,SAAQ,+BAAkB;IACrD;;OAEG;IACH,UAAU;QACN,IAAI,CAAC,QAAQ,CACT,IAAI,CAAC,KAAK,EACV,qBAAS,CAAC,mBAAmB,EAC7B,IAAI,CAAC,cAAc,EACnB,GAAG,CACN,CAAC;IACN,CAAC;IAED;;;;OAIG;IACK,cAAc,CAAC,OAAgB;QACnC,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;QAChC,IAAI,IAAY,CAAC;QACjB,KAAK,MAAM,GAAG,IAAI,OAAO,CAAC,WAAW,EAAE;YACnC,MAAM,UAAU,GAAG,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;YAC5C,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE;gBACrB,eAAe,CAAC,UAAU,CAAC,CAAC;aAC/B;SACJ;QAED,SAAS,IAAI,CAAC,MAAkB;YAC5B,IAAI,IAAI,GAAG,MAAM,CAAC,YAAY,CAAC;YAC/B,IACI,CAAC,IAAI;gBACL,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI;gBAC1B,MAAM,YAAY,2BAAmB,EACvC;gBACE,IAAI,GAAG,EAAE,CAAC;aACb;YAED,IAAI,IAAI,IAAI,IAAI,KAAK,EAAE,EAAE;gBACrB,IAAI,GAAG,IAAI,KAAK,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,GAAG,GAAG,GAAG,IAAI,CAAC;aACjD;QACL,CAAC;QAED,SAAS,eAAe,CAAC,UAAsB;YAC3C,IAAI,GAAG,EAAE,CAAC;YACV,IAAI,CAAC,UAAU,CAAC,CAAC;YACjB,IAAI,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;YAE/B,OAAO,MAAM,IAAI,CAAC,CAAC,MAAM,YAAY,yBAAiB,CAAC,EAAE;gBACrD,IAAI,CAAC,MAAM,CAAC,CAAC;gBACb,IAAI,MAAM,CAAC,OAAO,EAAE;oBAChB,IAAI,GAA2B,CAAC;oBAChC,IAAI,UAAU,YAAY,+BAAuB,EAAE;wBAC/C,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CACvB,WAAW,EACX,UAAU,CAAC,IAAI,CAClB,CAAC;wBACF,IAAI,CAAC,GAAG,EAAE;4BACN,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CACvB,UAAU,EACV,UAAU,CAAC,IAAI,CAClB,CAAC;yBACL;wBACD,IAAI,CAAC,GAAG,EAAE;4BACN,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CACvB,OAAO,EACP,GAAG,GAAG,UAAU,CAAC,IAAI,GAAG,GAAG,CAC9B,CAAC;yBACL;qBACJ;oBAED,IAAI,CAAC,GAAG,EAAE;wBACN,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;qBAC9C;oBAED,IAAI,GAAG,EAAE;wBACL,uBAAe,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;wBAC1C,UAAU,CAAC,OAAO,GAAG,IAAI,eAAO,CAAC,EAAE,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;wBAC/C,MAAM;qBACT;iBACJ;gBAED,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;aAC1B;QACL,CAAC;IACL,CAAC;CACJ,CAAA;AAtFY,iBAAiB;IAD7B,sBAAS,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC;GACvB,iBAAiB,CAsF7B;AAtFY,8CAAiB","sourcesContent":["import {\n    Reflection,\n    SignatureReflection,\n    ProjectReflection,\n    TypeParameterReflection,\n} from \"../../models/reflections/index\";\nimport { Comment, CommentTag } from \"../../models/comments/index\";\nimport { Component, ConverterComponent } from \"../components\";\nimport { Converter } from \"../converter\";\nimport { Context } from \"../context\";\nimport { removeIfPresent } from \"../../utils\";\n\n/**\n * A handler that moves comments with dot syntax to their target.\n */\n@Component({ name: \"deep-comment\" })\nexport class DeepCommentPlugin extends ConverterComponent {\n    /**\n     * Create a new CommentHandler instance.\n     */\n    initialize() {\n        this.listenTo(\n            this.owner,\n            Converter.EVENT_RESOLVE_BEGIN,\n            this.onBeginResolve,\n            512\n        );\n    }\n\n    /**\n     * Triggered when the converter begins resolving a project.\n     *\n     * @param context  The context object describing the current state the converter is in.\n     */\n    private onBeginResolve(context: Context) {\n        const project = context.project;\n        let name: string;\n        for (const key in project.reflections) {\n            const reflection = project.reflections[key];\n            if (!reflection.comment) {\n                findDeepComment(reflection);\n            }\n        }\n\n        function push(parent: Reflection) {\n            let part = parent.originalName;\n            if (\n                !part ||\n                part.substr(0, 2) === \"__\" ||\n                parent instanceof SignatureReflection\n            ) {\n                part = \"\";\n            }\n\n            if (part && part !== \"\") {\n                name = name === \"\" ? part : part + \".\" + name;\n            }\n        }\n\n        function findDeepComment(reflection: Reflection) {\n            name = \"\";\n            push(reflection);\n            let target = reflection.parent;\n\n            while (target && !(target instanceof ProjectReflection)) {\n                push(target);\n                if (target.comment) {\n                    let tag: CommentTag | undefined;\n                    if (reflection instanceof TypeParameterReflection) {\n                        tag = target.comment.getTag(\n                            \"typeparam\",\n                            reflection.name\n                        );\n                        if (!tag) {\n                            tag = target.comment.getTag(\n                                \"template\",\n                                reflection.name\n                            );\n                        }\n                        if (!tag) {\n                            tag = target.comment.getTag(\n                                \"param\",\n                                \"<\" + reflection.name + \">\"\n                            );\n                        }\n                    }\n\n                    if (!tag) {\n                        tag = target.comment.getTag(\"param\", name);\n                    }\n\n                    if (tag) {\n                        removeIfPresent(target.comment.tags, tag);\n                        reflection.comment = new Comment(\"\", tag.text);\n                        break;\n                    }\n                }\n\n                target = target.parent;\n            }\n        }\n    }\n}\n"]}