{"version":3,"file":"MarkedPlugin.js","sourceRoot":"","sources":["../../../../src/lib/output/plugins/MarkedPlugin.ts"],"names":[],"mappings":";;;;;;;;;AAAA,+BAA+B;AAC/B,6BAA6B;AAC7B,iCAAiC;AACjC,yCAAyC;AAEzC,8CAAyE;AACzE,sCAAyD;AACzD,uCAAmD;AACnD,yDAAyE;AAEzE,MAAM,oBAAoB,GAAG,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC;AAEnD,oBAAoB,CAAC,OAAO,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,CAAC,EAAE,OAAO,EAAE,EAAE;IACvD,MAAM,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAEhC,OAAO;YACC,IAAI,SAAS,IAAI;MACvB,KAAK,IAAI,IAAI,MAAM,KAAK;;CAE7B,CAAC;AACF,CAAC,CAAC;AAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA6BG;AAEH,IAAa,YAAY,GAAzB,MAAa,YAAa,SAAQ,0CAA6B;IAA/D;;QAiBI;;WAEG;QACK,mBAAc,GAAG,4BAA4B,CAAC;QAEtD;;WAEG;QACK,iBAAY,GAAG,yBAAyB,CAAC;IA6KrD,CAAC;IA3KG;;OAEG;IACH,UAAU;QACN,KAAK,CAAC,UAAU,EAAE,CAAC;QACnB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,sBAAa,CAAC,KAAK,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QAErE,4DAA4D;QAC5D,MAAM,IAAI,GAAG,IAAI,CAAC;QAClB,UAAU,CAAC,cAAc,CAAC,UAAU,EAAE,UAAqB,GAAQ;YAC/D,OAAO,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QACH,UAAU,CAAC,cAAc,CAAC,aAAa,EAAE,CAAC,GAAW,EAAE,EAAE,CACrD,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CACvC,CAAC;IACN,CAAC;IAED;;;;;;OAMG;IACI,cAAc,CAAC,IAAY,EAAE,IAAa;QAC7C,IAAI,GAAG,IAAI,IAAI,YAAY,CAAC;QAC5B,IAAI,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;QAC1B,IAAI,CAAC,iCAAmB,CAAC,IAAI,CAAC,EAAE;YAC5B,4CAA4C;YAC5C,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CACxB,qCAAqC,IAAI,kFAAkF,CAC9H,CAAC;YACF,OAAO,IAAI,CAAC;SACf;QAED,OAAO,uBAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IACjC,CAAC;IAED;;;;;;OAMG;IACI,aAAa,CAAC,IAAY,EAAE,OAAY;QAC3C,IAAI,IAAI,CAAC,QAAQ,EAAE;YACf,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE;gBACtD,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAS,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;gBAC9C,IAAI,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;oBACnD,MAAM,QAAQ,GAAG,gBAAQ,CAAC,IAAI,CAAC,CAAC;oBAChC,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,iBAAiB,EAAE,KAAK,MAAM,EAAE;wBAChD,MAAM,QAAQ,GAAG,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;wBAC9C,OAAO,QAAQ,CAAC,OAAO,EAAE;4BACrB,0BAA0B,EAAE,IAAI;4BAChC,6BAA6B,EAAE,IAAI;yBACtC,CAAC,CAAC;qBACN;yBAAM;wBACH,OAAO,QAAQ,CAAC;qBACnB;iBACJ;qBAAM;oBACH,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CACxB,kCAAkC,GAAG,IAAI,CAC5C,CAAC;oBACF,OAAO,EAAE,CAAC;iBACb;YACL,CAAC,CAAC,CAAC;SACN;QAED,IAAI,IAAI,CAAC,cAAc,EAAE;YACrB,IAAI,GAAG,IAAI,CAAC,OAAO,CACf,IAAI,CAAC,YAAY,EACjB,CAAC,KAAa,EAAE,IAAY,EAAE,EAAE;gBAC5B,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,cAAe,EAAE,IAAI,CAAC,CAAC;gBAEvD,IACI,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC;oBACvB,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,MAAM,EAAE,EAChC;oBACE,OAAO,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC;iBACpD;qBAAM;oBACH,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CACxB,6BAA6B,GAAG,QAAQ,CAC3C,CAAC;oBACF,OAAO,KAAK,CAAC;iBAChB;YACL,CAAC,CACJ,CAAC;SACL;QAED,MAAM,KAAK,GAAG,IAAI,sBAAa,CAAC,sBAAa,CAAC,KAAK,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QAEjE,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC1B,OAAO,KAAK,CAAC,UAAU,CAAC;IAC5B,CAAC;IAED;;;;OAIG;IACO,eAAe,CAAC,KAAoB;QAC1C,KAAK,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;QAE7B,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC;QAE9C,OAAO,IAAI,CAAC,QAAQ,CAAC;QACrB,IAAI,IAAI,CAAC,aAAa,EAAE;YACpB,MAAM,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YAClD,IACI,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC;gBACvB,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,EACrC;gBACE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;aAC5B;iBAAM;gBACH,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CACxB,8CAA8C,GAAG,QAAQ,CAC5D,CAAC;aACL;SACJ;QAED,IAAI,IAAI,CAAC,WAAW,EAAE;YAClB,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAC7C,IAAI,EAAE,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,EAAE;gBAC1D,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;gBAChE,EAAE,CAAC,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;aAC3C;iBAAM;gBACH,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;gBAChC,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC,IAAI,CACxB,2CAA2C,GAAG,KAAK,CACtD,CAAC;aACL;SACJ;IACL,CAAC;IAED;;;;OAIG;IACK,mBAAmB;;QACvB,MAAM,aAAa,GAAG,OAAC,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,CACpD,eAAe,CAClB,mCAAI,EAAE,CAAyB,CAAC;QAEjC,IACI,OAAO,aAAa,KAAK,QAAQ;YACjC,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,EAC/B;YACE,2EAA2E;YAC3E,MAAA,aAAa,CAAC,SAAS,oCAAvB,aAAa,CAAC,SAAS,GAAK,CAAC,IAAS,EAAE,IAAS,EAAE,EAAE,CACjD,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,EAAC;YACpC,MAAA,aAAa,CAAC,QAAQ,oCAAtB,aAAa,CAAC,QAAQ,GAAK,oBAAoB,EAAC;YAChD,MAAA,aAAa,CAAC,MAAM,oCAApB,aAAa,CAAC,MAAM,GAAK,KAAK,EAAC,CAAC,wDAAwD;YAExF,OAAO,aAAa,CAAC;SACxB;QAED,MAAM,IAAI,KAAK,CACX,+EAA+E,CAClF,CAAC;IACN,CAAC;IAED;;;;OAIG;IACH,eAAe,CAAC,KAAoB;QAChC,KAAK,CAAC,UAAU,GAAG,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;IAChD,CAAC;CACJ,CAAA;AApMG;IADC,kBAAU,CAAC,UAAU,CAAC;mDACA;AAGvB;IADC,kBAAU,CAAC,OAAO,CAAC;iDACC;AALZ,YAAY;IADxB,sBAAS,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;GACjB,YAAY,CAsMxB;AAtMY,oCAAY","sourcesContent":["import * as FS from \"fs-extra\";\nimport * as Path from \"path\";\nimport * as Marked from \"marked\";\nimport * as Handlebars from \"handlebars\";\n\nimport { Component, ContextAwareRendererComponent } from \"../components\";\nimport { RendererEvent, MarkdownEvent } from \"../events\";\nimport { BindOption, readFile } from \"../../utils\";\nimport { highlight, isSupportedLanguage } from \"../../utils/highlighter\";\n\nconst customMarkedRenderer = new Marked.Renderer();\n\ncustomMarkedRenderer.heading = (text, level, _, slugger) => {\n    const slug = slugger.slug(text);\n\n    return `\n<a href=\"#${slug}\" id=\"${slug}\" style=\"color: inherit; text-decoration: none;\">\n  <h${level}>${text}</h${level}>\n</a>\n`;\n};\n\n/**\n * A plugin that exposes the markdown, compact and relativeURL helper to handlebars.\n *\n * Templates should parse all comments with the markdown handler so authors can\n * easily format their documentation. TypeDoc uses the Marked (https://github.com/markedjs/marked)\n * markdown parser and HighlightJS (https://github.com/isagalaev/highlight.js) to highlight\n * code blocks within markdown sections. Additionally this plugin allows to link to other symbols\n * using double angle brackets.\n *\n * You can use the markdown helper anywhere in the templates to convert content to html:\n *\n * ```handlebars\n * {{#markdown}}{{{comment.text}}}{{/markdown}}\n * ```\n *\n * The compact helper removes all newlines of its content:\n *\n * ```handlebars\n * {{#compact}}\n *   Compact\n *   this\n * {{/compact}}\n * ```\n *\n * The relativeURL helper simply transforms an absolute url into a relative url:\n *\n * ```handlebars\n * {{#relativeURL url}}\n * ```\n */\n@Component({ name: \"marked\" })\nexport class MarkedPlugin extends ContextAwareRendererComponent {\n    @BindOption(\"includes\")\n    includeSource!: string;\n\n    @BindOption(\"media\")\n    mediaSource!: string;\n\n    /**\n     * The path referenced files are located in.\n     */\n    private includes?: string;\n\n    /**\n     * Path to the output media directory.\n     */\n    private mediaDirectory?: string;\n\n    /**\n     * The pattern used to find references in markdown.\n     */\n    private includePattern = /\\[\\[include:([^\\]]+?)\\]\\]/g;\n\n    /**\n     * The pattern used to find media links.\n     */\n    private mediaPattern = /media:\\/\\/([^ \")\\]}]+)/g;\n\n    /**\n     * Create a new MarkedPlugin instance.\n     */\n    initialize() {\n        super.initialize();\n        this.listenTo(this.owner, MarkdownEvent.PARSE, this.onParseMarkdown);\n\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const that = this;\n        Handlebars.registerHelper(\"markdown\", function (this: any, arg: any) {\n            return that.parseMarkdown(arg.fn(this), this);\n        });\n        Handlebars.registerHelper(\"relativeURL\", (url: string) =>\n            url ? this.getRelativeUrl(url) : url\n        );\n    }\n\n    /**\n     * Highlight the syntax of the given text using HighlightJS.\n     *\n     * @param text  The text that should be highlighted.\n     * @param lang  The language that should be used to highlight the string.\n     * @return A html string with syntax highlighting.\n     */\n    public getHighlighted(text: string, lang?: string): string {\n        lang = lang || \"typescript\";\n        lang = lang.toLowerCase();\n        if (!isSupportedLanguage(lang)) {\n            // Extra newline because of the progress bar\n            this.application.logger.warn(\n                `\\nUnsupported highlight language \"${lang}\" will not be highlighted. Run typedoc --help for a list of supported languages.`\n            );\n            return text;\n        }\n\n        return highlight(text, lang);\n    }\n\n    /**\n     * Parse the given markdown string and return the resulting html.\n     *\n     * @param text  The markdown string that should be parsed.\n     * @param context  The current handlebars context.\n     * @returns The resulting html string.\n     */\n    public parseMarkdown(text: string, context: any) {\n        if (this.includes) {\n            text = text.replace(this.includePattern, (_match, path) => {\n                path = Path.join(this.includes!, path.trim());\n                if (FS.existsSync(path) && FS.statSync(path).isFile()) {\n                    const contents = readFile(path);\n                    if (path.substr(-4).toLocaleLowerCase() === \".hbs\") {\n                        const template = Handlebars.compile(contents);\n                        return template(context, {\n                            allowProtoMethodsByDefault: true,\n                            allowProtoPropertiesByDefault: true,\n                        });\n                    } else {\n                        return contents;\n                    }\n                } else {\n                    this.application.logger.warn(\n                        \"Could not find file to include: \" + path\n                    );\n                    return \"\";\n                }\n            });\n        }\n\n        if (this.mediaDirectory) {\n            text = text.replace(\n                this.mediaPattern,\n                (match: string, path: string) => {\n                    const fileName = Path.join(this.mediaDirectory!, path);\n\n                    if (\n                        FS.existsSync(fileName) &&\n                        FS.statSync(fileName).isFile()\n                    ) {\n                        return this.getRelativeUrl(\"media\") + \"/\" + path;\n                    } else {\n                        this.application.logger.warn(\n                            \"Could not find media file: \" + fileName\n                        );\n                        return match;\n                    }\n                }\n            );\n        }\n\n        const event = new MarkdownEvent(MarkdownEvent.PARSE, text, text);\n\n        this.owner.trigger(event);\n        return event.parsedText;\n    }\n\n    /**\n     * Triggered before the renderer starts rendering a project.\n     *\n     * @param event  An event object describing the current render operation.\n     */\n    protected onBeginRenderer(event: RendererEvent) {\n        super.onBeginRenderer(event);\n\n        Marked.setOptions(this.createMarkedOptions());\n\n        delete this.includes;\n        if (this.includeSource) {\n            const includes = Path.resolve(this.includeSource);\n            if (\n                FS.existsSync(includes) &&\n                FS.statSync(includes).isDirectory()\n            ) {\n                this.includes = includes;\n            } else {\n                this.application.logger.warn(\n                    \"Could not find provided includes directory: \" + includes\n                );\n            }\n        }\n\n        if (this.mediaSource) {\n            const media = Path.resolve(this.mediaSource);\n            if (FS.existsSync(media) && FS.statSync(media).isDirectory()) {\n                this.mediaDirectory = Path.join(event.outputDirectory, \"media\");\n                FS.copySync(media, this.mediaDirectory);\n            } else {\n                this.mediaDirectory = undefined;\n                this.application.logger.warn(\n                    \"Could not find provided media directory: \" + media\n                );\n            }\n        }\n    }\n\n    /**\n     * Creates an object with options that are passed to the markdown parser.\n     *\n     * @returns The options object for the markdown parser.\n     */\n    private createMarkedOptions(): Marked.MarkedOptions {\n        const markedOptions = (this.application.options.getValue(\n            \"markedOptions\"\n        ) ?? {}) as Marked.MarkedOptions;\n\n        if (\n            typeof markedOptions === \"object\" &&\n            !Array.isArray(markedOptions)\n        ) {\n            // Set some default values if they are not specified via the TypeDoc option\n            markedOptions.highlight ??= (text: any, lang: any) =>\n                this.getHighlighted(text, lang);\n            markedOptions.renderer ??= customMarkedRenderer;\n            markedOptions.mangle ??= false; // See https://github.com/TypeStrong/typedoc/issues/1395\n\n            return markedOptions;\n        }\n\n        throw new Error(\n            \"The value provided via the 'markedOptions' option must be a non-array object.\"\n        );\n    }\n\n    /**\n     * Triggered when [[MarkedPlugin]] parses a markdown string.\n     *\n     * @param event\n     */\n    onParseMarkdown(event: MarkdownEvent) {\n        event.parsedText = Marked(event.parsedText);\n    }\n}\n"]}