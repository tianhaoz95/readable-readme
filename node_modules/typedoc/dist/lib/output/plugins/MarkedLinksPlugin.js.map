{"version":3,"file":"MarkedLinksPlugin.js","sourceRoot":"","sources":["../../../../src/lib/output/plugins/MarkedLinksPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Util from \"util\";\n\nimport { Reflection } from \"../../models/reflections/abstract\";\nimport { Component, ContextAwareRendererComponent } from \"../components\";\nimport { MarkdownEvent, RendererEvent } from \"../events\";\nimport { BindOption } from \"../../utils\";\n\n/**\n * A plugin that builds links in markdown texts.\n */\n@Component({ name: \"marked-links\" })\nexport class MarkedLinksPlugin extends ContextAwareRendererComponent {\n    /**\n     * Regular expression for detecting bracket links.\n     */\n    private brackets = /\\[\\[([^\\]]+)\\]\\]/g;\n\n    /**\n     * Regular expression for detecting inline tags like {&amp;link ...}.\n     */\n    private inlineTag = /(?:\\[(.+?)\\])?\\{@(link|linkcode|linkplain)\\s+((?:.|\\n)+?)\\}/gi;\n\n    @BindOption(\"listInvalidSymbolLinks\")\n    listInvalidSymbolLinks!: boolean;\n\n    private warnings: string[] = [];\n\n    /**\n     * Create a new MarkedLinksPlugin instance.\n     */\n    initialize() {\n        super.initialize();\n        this.listenTo(\n            this.owner,\n            {\n                [MarkdownEvent.PARSE]: this.onParseMarkdown,\n                [RendererEvent.END]: this.onEndRenderer,\n            },\n            undefined,\n            100\n        );\n    }\n\n    /**\n     * Find all references to symbols within the given text and transform them into a link.\n     *\n     * This function is aware of the current context and will try to find the symbol within the\n     * current reflection. It will walk up the reflection chain till the symbol is found or the\n     * root reflection is reached. As a last resort the function will search the entire project\n     * for the given symbol.\n     *\n     * @param text  The text that should be parsed.\n     * @returns The text with symbol references replaced by links.\n     */\n    private replaceBrackets(text: string): string {\n        return text.replace(\n            this.brackets,\n            (match: string, content: string): string => {\n                const monospace =\n                    content[0] === \"`\" && content[content.length - 1] === \"`\";\n                const split = MarkedLinksPlugin.splitLinkText(\n                    monospace ? content.slice(1, -1) : content\n                );\n                return this.buildLink(\n                    match,\n                    split.target,\n                    split.caption,\n                    monospace\n                );\n            }\n        );\n    }\n\n    /**\n     * Find symbol {&amp;link ...} strings in text and turn into html links\n     *\n     * @param text  The string in which to replace the inline tags.\n     * @return      The updated string.\n     */\n    private replaceInlineTags(text: string): string {\n        return text.replace(\n            this.inlineTag,\n            (\n                match: string,\n                leading: string,\n                tagName: string,\n                content: string\n            ): string => {\n                const split = MarkedLinksPlugin.splitLinkText(content);\n                const target = split.target;\n                const caption = leading || split.caption;\n                const monospace = tagName === \"linkcode\";\n\n                return this.buildLink(match, target, caption, monospace);\n            }\n        );\n    }\n\n    /**\n     * Format a link with the given text and target.\n     *\n     * @param original   The original link string, will be returned if the target cannot be resolved..\n     * @param target     The link target.\n     * @param caption    The caption of the link.\n     * @param monospace  Whether to use monospace formatting or not.\n     * @returns A html link tag.\n     */\n    private buildLink(\n        original: string,\n        target: string,\n        caption: string,\n        monospace?: boolean\n    ): string {\n        let attributes = \"\";\n        if (this.urlPrefix.test(target)) {\n            attributes = ' class=\"external\"';\n        } else {\n            let reflection: Reflection | undefined;\n            if (this.reflection) {\n                reflection = this.reflection.findReflectionByName(target);\n            } else if (this.project) {\n                reflection = this.project.findReflectionByName(target);\n            }\n\n            if (reflection && reflection.url) {\n                if (this.urlPrefix.test(reflection.url)) {\n                    target = reflection.url;\n                    attributes = ' class=\"external\"';\n                } else {\n                    target = this.getRelativeUrl(reflection.url);\n                }\n            } else {\n                const fullName = (this.reflection ||\n                    this.project)!.getFullName();\n                this.warnings.push(`In ${fullName}: ${original}`);\n                return original;\n            }\n        }\n\n        if (monospace) {\n            caption = \"<code>\" + caption + \"</code>\";\n        }\n\n        return Util.format(\n            '<a href=\"%s\"%s>%s</a>',\n            target,\n            attributes,\n            caption\n        );\n    }\n\n    /**\n     * Triggered when [[MarkedPlugin]] parses a markdown string.\n     *\n     * @param event\n     */\n    onParseMarkdown(event: MarkdownEvent) {\n        event.parsedText = this.replaceInlineTags(\n            this.replaceBrackets(event.parsedText)\n        );\n    }\n\n    /**\n     * Triggered when [[Renderer]] is finished\n     */\n    onEndRenderer(_event: RendererEvent) {\n        if (this.listInvalidSymbolLinks && this.warnings.length > 0) {\n            this.application.logger.write(\"\");\n            this.application.logger.warn(\n                \"[MarkedLinksPlugin]: Found invalid symbol reference(s) in JSDocs, \" +\n                    \"they will not render as links in the generated documentation.\"\n            );\n\n            for (const warning of this.warnings) {\n                this.application.logger.write(\"  \" + warning);\n            }\n        }\n    }\n\n    /**\n     * Split the given link into text and target at first pipe or space.\n     *\n     * @param text  The source string that should be checked for a split character.\n     * @returns An object containing the link text and target.\n     */\n    static splitLinkText(text: string): { caption: string; target: string } {\n        let splitIndex = text.indexOf(\"|\");\n        if (splitIndex === -1) {\n            splitIndex = text.search(/\\s/);\n        }\n\n        if (splitIndex !== -1) {\n            return {\n                caption: text\n                    .substr(splitIndex + 1)\n                    .replace(/\\n+/, \" \")\n                    .trim(),\n                target: text.substr(0, splitIndex).trim(),\n            };\n        } else {\n            return {\n                caption: text,\n                target: text,\n            };\n        }\n    }\n}\n"]}