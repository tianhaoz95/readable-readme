{"version":3,"file":"if-cond.js","sourceRoot":"","sources":["../../../../src/lib/output/helpers/if-cond.ts"],"names":[],"mappings":";;;AAAA;;;;;;;;;GASG;AACH,SAAgB,MAAM,CAElB,EAAO,EACP,QAAa,EACb,EAAO,EACP,OAAY;IAEZ,QAAQ,QAAQ,EAAE;QACd,KAAK,IAAI;YACL,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/D,KAAK,KAAK;YACN,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAChE,KAAK,IAAI;YACL,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/D,KAAK,KAAK;YACN,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAChE,KAAK,GAAG;YACJ,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9D,KAAK,IAAI;YACL,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/D,KAAK,GAAG;YACJ,OAAO,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9D,KAAK,IAAI;YACL,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/D,KAAK,IAAI;YACL,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/D,KAAK,IAAI;YACL,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC/D;YACI,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;KACpC;AACL,CAAC;AA/BD,wBA+BC","sourcesContent":["/**\n * Handlebars if helper with condition.\n *\n * @param v1        The first value to be compared.\n * @param operator  The operand to perform on the two given values.\n * @param v2        The second value to be compared\n * @param options   The current handlebars object.\n * @param this   The current handlebars this.\n * @returns {*}\n */\nexport function ifCond(\n    this: any,\n    v1: any,\n    operator: any,\n    v2: any,\n    options: any\n) {\n    switch (operator) {\n        case \"==\":\n            return v1 == v2 ? options.fn(this) : options.inverse(this);\n        case \"===\":\n            return v1 === v2 ? options.fn(this) : options.inverse(this);\n        case \"!=\":\n            return v1 != v2 ? options.fn(this) : options.inverse(this);\n        case \"!==\":\n            return v1 !== v2 ? options.fn(this) : options.inverse(this);\n        case \"<\":\n            return v1 < v2 ? options.fn(this) : options.inverse(this);\n        case \"<=\":\n            return v1 <= v2 ? options.fn(this) : options.inverse(this);\n        case \">\":\n            return v1 > v2 ? options.fn(this) : options.inverse(this);\n        case \">=\":\n            return v1 >= v2 ? options.fn(this) : options.inverse(this);\n        case \"&&\":\n            return v1 && v2 ? options.fn(this) : options.inverse(this);\n        case \"||\":\n            return v1 || v2 ? options.fn(this) : options.inverse(this);\n        default:\n            return options.inverse(this);\n    }\n}\n"]}