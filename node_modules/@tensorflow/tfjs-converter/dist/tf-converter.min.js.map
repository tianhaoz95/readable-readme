{"version":3,"file":"tf-converter.min.js","sources":["../src/data/compiled_api.ts","../src/operations/custom_op/register.ts","../src/operations/executors/utils.ts","../src/operations/op_list/arithmetic.ts","../src/operations/op_list/basic_math.ts","../src/operations/op_list/control.ts","../src/operations/op_list/convolution.ts","../src/operations/op_list/creation.ts","../src/operations/op_list/dynamic.ts","../src/operations/op_list/evaluation.ts","../src/operations/op_list/graph.ts","../src/operations/op_list/image.ts","../src/operations/op_list/logical.ts","../src/operations/op_list/matrices.ts","../src/operations/op_list/normalization.ts","../src/operations/op_list/reduction.ts","../src/operations/op_list/slice_join.ts","../src/operations/op_list/spectral.ts","../src/operations/op_list/transformation.ts","../src/operations/operation_mapper.ts","../src/operations/custom_op/node_value_impl.ts","../src/operations/executors/arithmetic_executor.ts","../src/operations/executors/basic_math_executor.ts","../src/executor/tensor_array.ts","../src/operations/executors/control_executor.ts","../src/operations/executors/convolution_executor.ts","../src/operations/executors/creation_executor.ts","../src/operations/executors/dynamic_executor.ts","../src/operations/executors/evaluation_executor.ts","../src/operations/executors/graph_executor.ts","../src/operations/executors/image_executor.ts","../src/operations/executors/logical_executor.ts","../src/operations/executors/matrices_executor.ts","../src/operations/executors/normalization_executor.ts","../src/operations/executors/reduction_executor.ts","../src/operations/executors/slice_join_executor.ts","../src/operations/executors/spectral_executor.ts","../src/operations/executors/transformation_executor.ts","../src/operations/operation_executor.ts","../src/executor/execution_context.ts","../src/executor/model_analysis.ts","../src/executor/graph_executor.ts","../src/executor/graph_model.ts","../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n/* tslint:disable */\n\n/** Properties of an Any. */\nexport declare interface IAny {\n  /** Any typeUrl */\n  typeUrl?: (string|null);\n\n  /** Any value */\n  value?: (Uint8Array|null);\n}\n\n/** DataType enum. */\nexport enum DataType {\n  'DT_INVALID' = 0,\n  'DT_FLOAT' = 1,\n  'DT_DOUBLE' = 2,\n  'DT_INT32' = 3,\n  'DT_UINT8' = 4,\n  'DT_INT16' = 5,\n  'DT_INT8' = 6,\n  'DT_STRING' = 7,\n  'DT_COMPLEX64' = 8,\n  'DT_INT64' = 9,\n  'DT_BOOL' = 10,\n  'DT_QINT8' = 11,\n  'DT_QUINT8' = 12,\n  'DT_QINT32' = 13,\n  'DT_BFLOAT16' = 14,\n  'DT_FLOAT_REF' = 101,\n  'DT_DOUBLE_REF' = 102,\n  'DT_INT32_REF' = 103,\n  'DT_UINT8_REF' = 104,\n  'DT_INT16_REF' = 105,\n  'DT_INT8_REF' = 106,\n  'DT_STRING_REF' = 107,\n  'DT_COMPLEX64_REF' = 108,\n  'DT_INT64_REF' = 109,\n  'DT_BOOL_REF' = 110,\n  'DT_QINT8_REF' = 111,\n  'DT_QUINT8_REF' = 112,\n  'DT_QINT32_REF' = 113,\n  'DT_BFLOAT16_REF' = 114\n}\n\n/** Properties of a TensorShape. */\nexport declare interface ITensorShape {\n  /** TensorShape dim */\n  dim?: (TensorShape.IDim[]|null);\n\n  /** TensorShape unknownRank */\n  unknownRank?: (boolean|null);\n}\n\nexport namespace TensorShape {\n  /** Properties of a Dim. */\n  export declare interface IDim {\n    /** Dim size */\n    size?: (number|string|null);\n\n    /** Dim name */\n    name?: (string|null);\n  }\n}\n\n/** Properties of a Tensor. */\nexport declare interface ITensor {\n  /** Tensor dtype */\n  dtype?: (DataType|null);\n\n  /** Tensor tensorShape */\n  tensorShape?: (ITensorShape|null);\n\n  /** Tensor versionNumber */\n  versionNumber?: (number|null);\n\n  /** Tensor tensorContent */\n  tensorContent?: (Uint8Array|null);\n\n  /** Tensor floatVal */\n  floatVal?: (number[]|null);\n\n  /** Tensor doubleVal */\n  doubleVal?: (number[]|null);\n\n  /** Tensor intVal */\n  intVal?: (number[]|null);\n\n  /** Tensor stringVal */\n  stringVal?: (Uint8Array[]|null);\n\n  /** Tensor scomplexVal */\n  scomplexVal?: (number[]|null);\n\n  /** Tensor int64Val */\n  int64Val?: ((number | string)[]|null);\n\n  /** Tensor boolVal */\n  boolVal?: (boolean[]|null);\n\n  /** Tensor uint32Val */\n  uint32Val?: (number[]|null);\n\n  /** Tensor uint64Val */\n  uint64Val?: ((number | string)[]|null);\n}\n\n/** Properties of an AttrValue. */\nexport declare interface IAttrValue {\n  /** AttrValue list */\n  list?: (AttrValue.IListValue|null);\n\n  /** AttrValue s */\n  s?: (string|null);\n\n  /** AttrValue i */\n  i?: (number|string|null);\n\n  /** AttrValue f */\n  f?: (number|null);\n\n  /** AttrValue b */\n  b?: (boolean|null);\n\n  /** AttrValue type */\n  type?: (DataType|null);\n\n  /** AttrValue shape */\n  shape?: (ITensorShape|null);\n\n  /** AttrValue tensor */\n  tensor?: (ITensor|null);\n\n  /** AttrValue placeholder */\n  placeholder?: (string|null);\n\n  /** AttrValue func */\n  func?: (INameAttrList|null);\n}\n\nexport namespace AttrValue {\n  /** Properties of a ListValue. */\n  export declare interface IListValue {\n    /** ListValue s */\n    s?: (string[]|null);\n\n    /** ListValue i */\n    i?: ((number | string)[]|null);\n\n    /** ListValue f */\n    f?: (number[]|null);\n\n    /** ListValue b */\n    b?: (boolean[]|null);\n\n    /** ListValue type */\n    type?: (DataType[]|null);\n\n    /** ListValue shape */\n    shape?: (ITensorShape[]|null);\n\n    /** ListValue tensor */\n    tensor?: (ITensor[]|null);\n\n    /** ListValue func */\n    func?: (INameAttrList[]|null);\n  }\n}\n\n/** Properties of a NameAttrList. */\nexport declare interface INameAttrList {\n  /** NameAttrList name */\n  name?: (string|null);\n\n  /** NameAttrList attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a NodeDef. */\nexport declare interface INodeDef {\n  /** NodeDef name */\n  name?: (string|null);\n\n  /** NodeDef op */\n  op?: (string|null);\n\n  /** NodeDef input */\n  input?: (string[]|null);\n\n  /** NodeDef device */\n  device?: (string|null);\n\n  /** NodeDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a VersionDef. */\nexport declare interface IVersionDef {\n  /** VersionDef producer */\n  producer?: (number|null);\n\n  /** VersionDef minConsumer */\n  minConsumer?: (number|null);\n\n  /** VersionDef badConsumers */\n  badConsumers?: (number[]|null);\n}\n\n/** Properties of a GraphDef. */\nexport declare interface IGraphDef {\n  /** GraphDef node */\n  node?: (INodeDef[]|null);\n\n  /** GraphDef versions */\n  versions?: (IVersionDef|null);\n\n  /** GraphDef library */\n  library?: (IFunctionDefLibrary|null);\n}\n\n/** Properties of a CollectionDef. */\nexport declare interface ICollectionDef {\n  /** CollectionDef nodeList */\n  nodeList?: (CollectionDef.INodeList|null);\n\n  /** CollectionDef bytesList */\n  bytesList?: (CollectionDef.IBytesList|null);\n\n  /** CollectionDef int64List */\n  int64List?: (CollectionDef.IInt64List|null);\n\n  /** CollectionDef floatList */\n  floatList?: (CollectionDef.IFloatList|null);\n\n  /** CollectionDef anyList */\n  anyList?: (CollectionDef.IAnyList|null);\n}\n\nexport namespace CollectionDef {\n  /** Properties of a NodeList. */\n  export declare interface INodeList {\n    /** NodeList value */\n    value?: (string[]|null);\n  }\n\n  /** Properties of a BytesList. */\n  export declare interface IBytesList {\n    /** BytesList value */\n    value?: (Uint8Array[]|null);\n  }\n\n  /** Properties of an Int64List. */\n  export declare interface IInt64List {\n    /** Int64List value */\n    value?: ((number | string)[]|null);\n  }\n\n  /** Properties of a FloatList. */\n  export declare interface IFloatList {\n    /** FloatList value */\n    value?: (number[]|null);\n  }\n\n  /** Properties of an AnyList. */\n  export declare interface IAnyList {\n    /** AnyList value */\n    value?: (IAny[]|null);\n  }\n}\n\n/** Properties of a SaverDef. */\nexport declare interface ISaverDef {\n  /** SaverDef filenameTensorName */\n  filenameTensorName?: (string|null);\n\n  /** SaverDef saveTensorName */\n  saveTensorName?: (string|null);\n\n  /** SaverDef restoreOpName */\n  restoreOpName?: (string|null);\n\n  /** SaverDef maxToKeep */\n  maxToKeep?: (number|null);\n\n  /** SaverDef sharded */\n  sharded?: (boolean|null);\n\n  /** SaverDef keepCheckpointEveryNHours */\n  keepCheckpointEveryNHours?: (number|null);\n\n  /** SaverDef version */\n  version?: (SaverDef.CheckpointFormatVersion|null);\n}\n\nexport namespace SaverDef {\n  /** CheckpointFormatVersion enum. */\n  export enum CheckpointFormatVersion {'LEGACY' = 0, 'V1' = 1, 'V2' = 2}\n}\n\n/** Properties of a TensorInfo. */\nexport declare interface ITensorInfo {\n  /** TensorInfo name */\n  name?: (string|null);\n\n  /** TensorInfo cooSparse */\n  cooSparse?: (TensorInfo.ICooSparse|null);\n\n  /** TensorInfo dtype */\n  dtype?: (DataType|null);\n\n  /** TensorInfo tensorShape */\n  tensorShape?: (ITensorShape|null);\n}\n\nexport namespace TensorInfo {\n  /** Properties of a CooSparse. */\n  export declare interface ICooSparse {\n    /** CooSparse valuesTensorName */\n    valuesTensorName?: (string|null);\n\n    /** CooSparse indicesTensorName */\n    indicesTensorName?: (string|null);\n\n    /** CooSparse denseShapeTensorName */\n    denseShapeTensorName?: (string|null);\n  }\n}\n\n/** Properties of a SignatureDef. */\nexport declare interface ISignatureDef {\n  /** SignatureDef inputs */\n  inputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef outputs */\n  outputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef methodName */\n  methodName?: (string|null);\n}\n\n/** Properties of an AssetFileDef. */\nexport declare interface IAssetFileDef {\n  /** AssetFileDef tensorInfo */\n  tensorInfo?: (ITensorInfo|null);\n\n  /** AssetFileDef filename */\n  filename?: (string|null);\n}\n\n/** Properties of an OpDef. */\nexport declare interface IOpDef {\n  /** OpDef name */\n  name?: (string|null);\n\n  /** OpDef inputArg */\n  inputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef outputArg */\n  outputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef attr */\n  attr?: (OpDef.IAttrDef[]|null);\n\n  /** OpDef deprecation */\n  deprecation?: (OpDef.IOpDeprecation|null);\n\n  /** OpDef summary */\n  summary?: (string|null);\n\n  /** OpDef description */\n  description?: (string|null);\n\n  /** OpDef isCommutative */\n  isCommutative?: (boolean|null);\n\n  /** OpDef isAggregate */\n  isAggregate?: (boolean|null);\n\n  /** OpDef isStateful */\n  isStateful?: (boolean|null);\n\n  /** OpDef allowsUninitializedInput */\n  allowsUninitializedInput?: (boolean|null);\n}\n\nexport namespace OpDef {\n  /** Properties of an ArgDef. */\n  export declare interface IArgDef {\n    /** ArgDef name */\n    name?: (string|null);\n\n    /** ArgDef description */\n    description?: (string|null);\n\n    /** ArgDef type */\n    type?: (DataType|null);\n\n    /** ArgDef typeAttr */\n    typeAttr?: (string|null);\n\n    /** ArgDef numberAttr */\n    numberAttr?: (string|null);\n\n    /** ArgDef typeListAttr */\n    typeListAttr?: (string|null);\n\n    /** ArgDef isRef */\n    isRef?: (boolean|null);\n  }\n\n  /** Properties of an AttrDef. */\n  export declare interface IAttrDef {\n    /** AttrDef name */\n    name?: (string|null);\n\n    /** AttrDef type */\n    type?: (string|null);\n\n    /** AttrDef defaultValue */\n    defaultValue?: (IAttrValue|null);\n\n    /** AttrDef description */\n    description?: (string|null);\n\n    /** AttrDef hasMinimum */\n    hasMinimum?: (boolean|null);\n\n    /** AttrDef minimum */\n    minimum?: (number|string|null);\n\n    /** AttrDef allowedValues */\n    allowedValues?: (IAttrValue|null);\n  }\n\n  /** Properties of an OpDeprecation. */\n  export declare interface IOpDeprecation {\n    /** OpDeprecation version */\n    version?: (number|null);\n\n    /** OpDeprecation explanation */\n    explanation?: (string|null);\n  }\n}\n\n/** Properties of an OpList. */\nexport declare interface IOpList {\n  /** OpList op */\n  op?: (IOpDef[]|null);\n}\n\n/** Properties of a MetaGraphDef. */\nexport declare interface IMetaGraphDef {\n  /** MetaGraphDef metaInfoDef */\n  metaInfoDef?: (MetaGraphDef.IMetaInfoDef|null);\n\n  /** MetaGraphDef graphDef */\n  graphDef?: (IGraphDef|null);\n\n  /** MetaGraphDef saverDef */\n  saverDef?: (ISaverDef|null);\n\n  /** MetaGraphDef collectionDef */\n  collectionDef?: ({[k: string]: ICollectionDef}|null);\n\n  /** MetaGraphDef signatureDef */\n  signatureDef?: ({[k: string]: ISignatureDef}|null);\n\n  /** MetaGraphDef assetFileDef */\n  assetFileDef?: (IAssetFileDef[]|null);\n}\n\nexport namespace MetaGraphDef {\n  /** Properties of a MetaInfoDef. */\n  export declare interface IMetaInfoDef {\n    /** MetaInfoDef metaGraphVersion */\n    metaGraphVersion?: (string|null);\n\n    /** MetaInfoDef strippedOpList */\n    strippedOpList?: (IOpList|null);\n\n    /** MetaInfoDef anyInfo */\n    anyInfo?: (IAny|null);\n\n    /** MetaInfoDef tags */\n    tags?: (string[]|null);\n\n    /** MetaInfoDef tensorflowVersion */\n    tensorflowVersion?: (string|null);\n\n    /** MetaInfoDef tensorflowGitVersion */\n    tensorflowGitVersion?: (string|null);\n  }\n}\n\n/** Properties of a SavedModel. */\nexport declare interface ISavedModel {\n  /** SavedModel savedModelSchemaVersion */\n  savedModelSchemaVersion?: (number|string|null);\n\n  /** SavedModel metaGraphs */\n  metaGraphs?: (IMetaGraphDef[]|null);\n}\n\n/** Properties of a FunctionDefLibrary. */\nexport declare interface IFunctionDefLibrary {\n  /** FunctionDefLibrary function */\n  'function'?: (IFunctionDef[]|null);\n\n  /** FunctionDefLibrary gradient */\n  gradient?: (IGradientDef[]|null);\n}\n\n/** Properties of a FunctionDef. */\nexport declare interface IFunctionDef {\n  /** FunctionDef signature */\n  signature?: (IOpDef|null);\n\n  /** FunctionDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n\n  /** FunctionDef nodeDef */\n  nodeDef?: (INodeDef[]|null);\n\n  /** FunctionDef ret */\n  ret?: ({[k: string]: string}|null);\n}\n\n/** Properties of a GradientDef. */\nexport declare interface IGradientDef {\n  /** GradientDef functionName */\n  functionName?: (string|null);\n\n  /** GradientDef gradientFunc */\n  gradientFunc?: (string|null);\n}\n","\n/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpExecutor, OpMapper} from '../types';\n\nconst CUSTOM_OPS: {[key: string]: OpMapper} = {};\n\n/**\n * Register an Op for graph model executor. This allow you to register\n * TensorFlow custom op or override existing op.\n *\n * Here is an example of registering a new MatMul Op.\n * ```js\n * const customMatmul = (node) =>\n *    tf.matMul(\n *        node.inputs[0], node.inputs[1],\n *        node.attrs['transpose_a'], node.attrs['transpose_b']);\n *\n * tf.registerOp('MatMul', customMatmul);\n * ```\n * The inputs and attrs of the node object is based on the TensorFlow op\n * registry.\n *\n * @param name The Tensorflow Op name.\n * @param opFunc An op function which is called with the current graph node\n * during execution and needs to return a tensor or a list of tensors. The node\n * has the following attributes:\n *    - attr: A map from attribute name to its value\n *    - inputs: A list of input tensors\n */\n/** @doc {heading: 'Models', subheading: 'Op Registry'} */\nexport function registerOp(name: string, opFunc: OpExecutor) {\n  const opMapper: OpMapper = {\n    tfOpName: name,\n    category: 'custom',\n    inputs: [],\n    attrs: [],\n    customExecutor: opFunc\n  };\n\n  CUSTOM_OPS[name] = opMapper;\n}\n\n/**\n * Retrieve the OpMapper object for the registered op.\n *\n * @param name The Tensorflow Op name.\n */\n/** @doc {heading: 'Models', subheading: 'Op Registry'} */\n\nexport function getRegisteredOp(name: string): OpMapper {\n  return CUSTOM_OPS[name];\n}\n\n/**\n * Deregister the Op for graph model executor.\n *\n * @param name The Tensorflow Op name.\n */\n/** @doc {heading: 'Models', subheading: 'Op Registry'} */\nexport function deregisterOp(name: string) {\n  delete CUSTOM_OPS[name];\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node, ValueType} from '../types';\n\nexport function getParamValue(\n    paramName: string, node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): ValueType {\n  const inputParam = node.inputParams[paramName];\n  if (inputParam && inputParam.inputIndexStart !== undefined) {\n    const start = inputParam.inputIndexStart;\n    const end = inputParam.inputIndexEnd === 0 ?\n        undefined :\n        (inputParam.inputIndexEnd === undefined ? start + 1 :\n                                                  inputParam.inputIndexEnd);\n    if (inputParam.type === 'tensor') {\n      return getTensor(\n          node.inputNames[inputParam.inputIndexStart], tensorMap, context);\n    }\n    if (inputParam.type === 'tensors') {\n      const inputs = node.inputNames.slice(start, end);\n\n      return inputs.map(name => getTensor(name, tensorMap, context));\n    }\n    const data = Array.prototype.slice.call(\n        getTensor(node.inputNames.slice(start)[0], tensorMap, context)\n            .dataSync());\n    return inputParam.type === 'number' ? data[0] : data;\n  }\n  const attrParam = node.attrParams[paramName];\n  return attrParam && attrParam.value;\n}\n\n/**\n * Retrieve the tensor based on input name by extracting the node name and\n * output index information.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensor(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor {\n  const [nodeName, index] = parseNodeName(name);\n  const contextId = context.currentContextIds.find(contextId => {\n    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n  });\n\n  return contextId !== undefined ?\n      tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] :\n      undefined;\n}\n\n/**\n * Retrieve the tensors based on input name for current context.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensorsForCurrentContenxt(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor[] {\n  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\n\n/**\n * Returns the node name and index from the Node input name.\n * @param inputName The input name of the node, in format of\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\n * default to 0.\n */\nexport function getNodeNameAndIndex(\n    inputName: string, context?: ExecutionContext): [string, number] {\n  const [nodeName, index] = parseNodeName(inputName);\n\n  return [\n    getNodeNameWithContextId(nodeName, context && context.currentContextId),\n    index\n  ];\n}\n\nfunction getNodeNameWithContextId(name: string, contextId?: string): string {\n  return !!contextId ? `${name}-${contextId}` : name;\n}\n\nexport function parseNodeName(name: string): [string, number] {\n  const index = name.lastIndexOf(':');\n  if (index === -1) {\n    return [name, 0];\n  }\n\n  const nodeName = name.substring(0, index);\n  return [nodeName, Number(name.substring(index + 1))];\n}\n\nexport function split(arr: number[], size: number) {\n  const res = [];\n  for (let i = 0; i < arr.length; i += size) {\n    res.push(arr.slice(i, i + size));\n  }\n  return res;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Add',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddV2',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddN',\n    'category': 'arithmetic',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'BiasAdd',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sub',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'RealDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Div',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'DivNoNan',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mul',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Maximum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Minimum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Pow',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'SquaredDifference',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorMod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Abs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan2',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ceil',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ClipByValue',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'clip_value_min', 'name': 'clipValueMin', 'type': 'number'},\n      {'tfName': 'clip_value_max', 'name': 'clipValueMax', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Complex',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'real', 'type': 'tensor'},\n      {'start': 1, 'name': 'imag', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ComplexAbs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Elu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Exp',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Floor',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Imag',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Neg',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Real',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'Tout',\n        'name': 'outputType',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Prelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'alpha', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu6',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'clipValueMin',\n        'name': 'clipValueMin',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'clipValueMax',\n        'name': 'clipValueMax',\n        'type': 'number',\n        'defaultValue': 6\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Selu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sigmoid',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Rsqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Square',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sign',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Round',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Expm1',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log1p',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Reciprocal',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Softplus',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Erf',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axes', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LeakyRelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 0.2\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'LoopCond',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'pred', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Switch',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'data', 'type': 'tensor'},\n      {'start': 1, 'name': 'pred', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Merge',\n    'category': 'control',\n    'inputs':\n        [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Enter',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'frame_name', 'name': 'frameName', 'type': 'string'},\n      {'tfName': 'is_constant', 'name': 'isConstant', 'type': 'bool'}\n    ]\n  },\n  {\n    'tfOpName': 'Exit',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NextIteration',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'size', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'},\n      {'tfName': 'dynamic_size', 'name': 'dynamicSize', 'type': 'bool'},\n      {'tfName': 'clear_after_read', 'name': 'clearAfterRead', 'type': 'bool'},\n      {\n        'tfName': 'identical_element_shapes',\n        'name': 'identicalElementShapes',\n        'type': 'bool'\n      },\n      {'tfName': 'tensor_array_name', 'name': 'name', 'type': 'string'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayWriteV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayReadV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{\n      'tfName': 'dtype',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  },\n  {\n    'tfOpName': 'TensorArrayGatherV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayScatterV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArrayConcatV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}, {\n        'tfName': 'element_shape_except0',\n        'name': 'elementShapeExcept0',\n        'type': 'shape',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArraySplitV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 2, 'name': 'lengths', 'type': 'number[]'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArraySizeV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayCloseV3',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'tensorArrayId', 'type': 'number'}]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'AvgPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AvgPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Conv1D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'stride', 'name': 'stride', 'type': 'number'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NWC'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'dilation',\n        'name': 'dilation',\n        'type': 'number',\n        'defaultValue': 1\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {'tfName': 'useCudnnOnGpu', 'name': 'useCudnnOnGpu', 'type': 'bool'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': '_FusedConv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {\n        'tfName': 'explicit_paddings',\n        'name': 'explicitPaddings',\n        'type': 'number[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'use_cudnn_on_gpu',\n        'name': 'useCudnnOnGpu',\n        'type': 'bool',\n        'defaultValue': true\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [1, 1, 1, 1]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n    ]\n  },\n  {\n    'tfOpName': 'Conv2DBackpropInput',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 2, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 0, 'name': 'outputShape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2d',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'FusedDepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {\n        'tfName': 'dilations',\n        'name': 'dilations',\n        'type': 'number[]',\n        'defaultValue': [1, 1, 1, 1]\n      },\n      {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv3D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ],\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Fill',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n      {'start': 1, 'name': 'value', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'LinSpace',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'num', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'OneHot',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'depth', 'type': 'number'},\n      {'start': 2, 'name': 'onValue', 'type': 'number', 'defaultValue': 1},\n      {'start': 3, 'name': 'offValue', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [\n      {\n        'tfName': 'axis',\n        'name': 'axis',\n        'type': 'number',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ones',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'OnesLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'RandomUniform',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'minval',\n        'name': 'minval',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'maxval',\n        'name': 'maxval',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Range',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'step', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [{'tfName': 'Tidx', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TruncatedNormal',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'means',\n        'name': 'mean',\n        'type': 'number',\n        'defaultValue': 0.0\n      },\n      {\n        'tfName': 'stddev',\n        'name': 'stdDev',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Zeros',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'ZerosLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'Multinomial',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'logits', 'type': 'tensor'},\n      {'start': 1, 'name': 'numSamples', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'},\n      {'tfName': 'seed2', 'name': 'seed2', 'type': 'number'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'output_dtype', 'name': 'output_dtype', 'type': 'dtype'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'NonMaxSuppressionV2',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV3',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV5',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'},\n      {'start': 5, 'name': 'softNmsSigma', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Where',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ListDiff',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [{\n  'tfOpName': 'TopKV2',\n  'category': 'evaluation',\n  'inputs': [\n    {'start': 0, 'name': 'x', 'type': 'tensor'},\n    {'start': 1, 'name': 'k', 'type': 'number'},\n  ],\n  'attrs': [{'tfName': 'sorted', 'name': 'sorted', 'type': 'bool'}]\n}];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'PlaceholderWithDefault',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'default', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'Placeholder',\n    'category': 'graph',\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {'tfOpName': 'Const', 'category': 'graph'}, {\n    'tfOpName': 'Identity',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IdentityN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Snapshot',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Rank',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Size',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Shape',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'ShapeN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Print',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'data', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'message', 'name': 'message', 'type': 'string'}, {\n        'tfName': 'first_n',\n        'name': 'firstN',\n        'type': 'number',\n        'notSupported': true\n      },\n      {\n        'tfName': 'summarize',\n        'name': 'summarize',\n        'type': 'number',\n        'defaultValue': 3\n      }\n    ]\n  },\n  {'tfOpName': 'NoOp', 'category': 'graph', 'inputs': []}, {\n    'tfOpName': 'StopGradient',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'FakeQuantWithMinMaxVars',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'min', 'name': 'min', 'type': 'number'},\n      {'tfName': 'max', 'name': 'max', 'type': 'number'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ResizeBilinear',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ResizeNearestNeighbor',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'CropAndResize',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'image', 'type': 'tensor'},\n      {'start': 1, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 2, 'name': 'boxInd', 'type': 'tensor'},\n      {'start': 3, 'name': 'cropSize', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'method', 'name': 'method', 'type': 'string'}, {\n        'tfName': 'extrapolation_value',\n        'name': 'extrapolationValue',\n        'type': 'number'\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Equal',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NotEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Greater',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'GreaterEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Less',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LessEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalAnd',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalNot',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalOr',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Select',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n      {'start': 1, 'name': 'a', 'type': 'tensor'},\n      {'start': 2, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {OpMapper} from '../types';\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': '_FusedMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n      {'start': 2, end: 0, 'name': 'args', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'num_args', 'name': 'numArgs', 'type': 'number'}, {\n        'tfName': 'fused_ops',\n        'name': 'fusedOps',\n        'type': 'string[]',\n        'defaultValue': []\n      },\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.0001\n      },\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMulV2',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Transpose',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'perm', 'type': 'number[]'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FusedBatchNorm',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV2',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV3',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LRN',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'depth_radius',\n        'name': 'radius',\n        'type': 'number',\n        'defaultValue': 5\n      },\n      {'tfName': 'bias', 'name': 'bias', 'type': 'number', 'defaultValue': 1.0},\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {\n        'tfName': 'beta',\n        'name': 'beta',\n        'type': 'number',\n        'defaultValue': 0.5\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Softmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'LogSoftmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': true,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Max',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Mean',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Min',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Sum',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'All',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Any',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'ArgMax',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'ArgMin',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ConcatV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': -1, 'name': 'tensors', 'type': 'tensors'},\n      {'start': -1, 'name': 'axis', 'type': 'number'}\n    ],\n    'attrs':\n        [{'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2}]\n  },\n  {\n    'tfOpName': 'Concat',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 1, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n      {'start': 0, 'name': 'axis', 'type': 'number'}\n    ],\n    'attrs': [{'tfName': 'N', 'name': 'n', 'type': 'number', 'defaultValue': 2}]\n\n  },\n  {\n    'tfOpName': 'GatherV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'Gather',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'validate_indices',\n        'name': 'validateIndices',\n        'type': 'bool',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reverse',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'dims', 'type': 'bool', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ReverseV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Slice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'size', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'StridedSlice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'end', 'type': 'number[]'},\n      {'start': 3, 'name': 'strides', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'begin_mask',\n        'name': 'beginMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'end_mask',\n        'name': 'endMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'new_axis_mask',\n        'name': 'newAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'ellipsis_mask',\n        'name': 'ellipsisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'shrink_axis_mask',\n        'name': 'shrinkAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Pack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'Unpack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'num',\n        'name': 'num',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Tile',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'reps', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Split',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'axis', 'type': 'number', 'defaultValue': 0},\n      {'start': 1, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'num_split',\n      'name': 'numOrSizeSplits',\n      'type': 'number',\n      'defaultValue': 1\n    }]\n  },\n  {\n    'tfOpName': 'SplitV',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'numOrSizeSplits', 'type': 'number[]'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'ScatterNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'values', 'type': 'tensor'},\n      {'start': 2, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'GatherNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': false,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IFFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'RFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'IRFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Cast',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'SrcT',\n        'name': 'sdtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {'tfName': 'DstT', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'ExpandDims',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Pad',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'},\n    ],\n    'attrs': [{\n      'tfName': 'constant_value',\n      'name': 'constantValue',\n      'type': 'number',\n      'defaultValue': 0\n    }]\n  },\n  {\n    'tfOpName': 'PadV2',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'}, {\n        'start': 2,\n        'name': 'constantValue',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reshape',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Squeeze',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'axis',\n      'tfDeprecatedName': 'squeeze_dims',\n      'name': 'axis',\n      'type': 'number[]'\n    }]\n  },\n  {\n    'tfOpName': 'SpaceToBatchND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'paddings', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'BatchToSpaceND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'crops', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthToSpace',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'block_size', 'name': 'blockSize', 'type': 'number'},\n      {'tfName': 'data_format', 'name': 'dataFormat', 'type': 'string'}\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, env} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {getRegisteredOp} from './custom_op/register';\n\nimport {getNodeNameAndIndex} from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as spectral from './op_list/spectral';\nimport * as transformation from './op_list/transformation';\nimport {Graph, InputParamValue, Node, OpMapper, ParamValue} from './types';\n\nexport class OperationMapper {\n  private static _instance: OperationMapper;\n\n  private opMappers: {[key: string]: OpMapper};\n\n  // Singleton instance for the mapper\n  public static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n\n  // Loads the op mapping from the JSON file.\n  private constructor() {\n    const ops = [\n      arithmetic, basicMath, control, convolution, creation, dynamic,\n      evaluation, logical, image, graph, matrices, normalization, reduction,\n      sliceJoin, spectral, transformation\n    ];\n    const mappersJson: OpMapper[] = [].concat(...ops.map(op => op.json));\n\n    this.opMappers = mappersJson.reduce<{[key: string]: OpMapper}>(\n        (map, mapper: OpMapper) => {\n          map[mapper.tfOpName] = mapper;\n          return map;\n        },\n        {});\n  }\n\n  // Converts the model from Tensorflow GraphDef to local representation for\n  // TensorFlow.js API\n  transformGraph(\n      graph: tensorflow.IGraphDef,\n      signature: tensorflow.ISignatureDef = {}): Graph {\n    const tfNodes = graph.node;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    const nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n      map[node.name] = this.mapNode(node);\n      if (node.op.startsWith('Placeholder')) {\n        placeholders.push(map[node.name]);\n      }\n      if (node.op === 'Const') {\n        weights.push(map[node.name]);\n      }\n      return map;\n    }, {});\n\n    let inputs: Node[] = [];\n    const outputs: Node[] = [];\n    let inputNodeNameToKey: {[key: string]: string} = {};\n    let outputNodeNameToKey: {[key: string]: string} = {};\n    if (signature != null) {\n      inputNodeNameToKey = this.mapSignatureEntries(signature.inputs);\n      outputNodeNameToKey = this.mapSignatureEntries(signature.outputs);\n    }\n    const allNodes = Object.keys(nodes);\n    allNodes.forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        node.inputs.push(nodes[nodeName]);\n        nodes[nodeName].children.push(node);\n      });\n    });\n\n    // if signature has not outputs set, add any node that does not have\n    // outputs.\n    if (Object.keys(outputNodeNameToKey).length === 0) {\n      allNodes.forEach(key => {\n        const node = nodes[key];\n        if (node.children.length === 0) {\n          outputs.push(node);\n        }\n      });\n    } else {\n      Object.keys(outputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node != null) {\n          node.signatureKey = outputNodeNameToKey[name];\n          outputs.push(node);\n        }\n      });\n    }\n\n    if (Object.keys(inputNodeNameToKey).length > 0) {\n      Object.keys(inputNodeNameToKey).forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        const node = nodes[nodeName];\n        if (node) {\n          node.signatureKey = inputNodeNameToKey[name];\n          inputs.push(node);\n        }\n      });\n    } else {\n      inputs = placeholders;\n    }\n\n    return {nodes, inputs, outputs, weights, placeholders, signature};\n  }\n\n  private mapSignatureEntries(entries: {[k: string]: tensorflow.ITensorInfo}) {\n    return Object.keys(entries || {})\n        .reduce<{[key: string]: string}>((prev, curr) => {\n          prev[entries[curr].name] = curr;\n          return prev;\n        }, {});\n  }\n\n  private mapNode(node: tensorflow.INodeDef): Node {\n    // Unsupported ops will cause an error at run-time (not parse time), since\n    // they may not be used by the actual execution subgraph.\n    const mapper =\n        getRegisteredOp(node.op) || this.opMappers[node.op] || {} as OpMapper;\n    if (node.attr == null) {\n      node.attr = {};\n    }\n\n    const newNode: Node = {\n      name: node.name,\n      op: node.op,\n      category: mapper.category,\n      inputNames:\n          (node.input ||\n           []).map(input => input.startsWith('^') ? input.substr(1) : input),\n      inputs: [],\n      children: [],\n      inputParams: {},\n      attrParams: {},\n      rawAttrs: node.attr\n    };\n\n    if (mapper.inputs != null) {\n      newNode.inputParams =\n          mapper.inputs.reduce<{[key: string]: InputParamValue}>(\n              (map, param) => {\n                map[param.name] = {\n                  type: param.type,\n                  inputIndexStart: param.start,\n                  inputIndexEnd: param.end\n                };\n                return map;\n              },\n              {});\n    }\n    if (mapper.attrs != null) {\n      newNode.attrParams =\n          mapper.attrs.reduce<{[key: string]: ParamValue}>((map, param) => {\n            const type = param.type;\n            let value = undefined;\n            switch (param.type) {\n              case 'string':\n                value = getStringParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'string[]':\n                value = getStringArrayParam(\n                    node.attr, param.tfName, param.defaultValue as string[]);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getStringArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string[]);\n                }\n                break;\n              case 'number':\n                value = getNumberParam(\n                    node.attr, param.tfName,\n                    (param.defaultValue || 0) as number);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumberParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number);\n                }\n                break;\n              case 'number[]':\n                value = getNumericArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getNumericArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'bool':\n                value = getBoolParam(\n                    node.attr, param.tfName, param.defaultValue as boolean);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean);\n                }\n                break;\n              case 'bool[]':\n                value = getBoolArrayParam(\n                    node.attr, param.tfName, param.defaultValue as boolean[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getBoolArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean[]);\n                }\n                break;\n              case 'shape':\n                value = getTensorShapeParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'shape[]':\n                value = getTensorShapeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[][]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getTensorShapeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[][]);\n                }\n                break;\n              case 'dtype':\n                value = getDtypeParam(\n                    node.attr, param.tfName, param.defaultValue as DataType);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType);\n                }\n                break;\n              case 'dtype[]':\n                value = getDtypeArrayParam(\n                    node.attr, param.tfName, param.defaultValue as DataType[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = getDtypeArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType[]);\n                }\n                break;\n              case 'tensor':\n              case 'tensors':\n                break;\n              default:\n                throw new Error(\n                    `Unsupported param type: ${param.type} for op: ${node.op}`);\n            }\n            map[param.name] = {value, type};\n            return map;\n          }, {});\n    }\n    return newNode;\n  }\n}\n\nexport function decodeBase64(text: string): string {\n  const global = env().global;\n  if (typeof global.atob !== 'undefined') {\n    return global.atob(text);\n  } else if (typeof Buffer !== 'undefined') {\n    return new Buffer(text, 'base64').toString();\n  } else {\n    throw new Error(\n        'Unable to decode base64 in this environment. ' +\n        'Missing built-in atob() or Buffer()');\n  }\n}\n\nexport function parseStringParam(s: []|string, keepCase: boolean): string {\n  const value =\n      Array.isArray(s) ? String.fromCharCode.apply(null, s) : decodeBase64(s);\n  return keepCase ? value : value.toLowerCase();\n}\n\nexport function getStringParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string,\n    keepCase = false): string {\n  const param = attrs[name];\n  if (param != null) {\n    return parseStringParam(param.s, keepCase);\n  }\n  return def;\n}\n\nexport function getBoolParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean): boolean {\n  const param = attrs[name];\n  return param ? param.b : def;\n}\n\nexport function getNumberParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number): number {\n  const param = attrs[name] || {};\n  const value =\n      param['i'] != null ? param['i'] : (param['f'] != null ? param['f'] : def);\n  return (typeof value === 'number') ? value : parseInt(value, 10);\n}\n\nexport function parseDtypeParam(value: string|tensorflow.DataType): DataType {\n  if (typeof (value) === 'string') {\n    // tslint:disable-next-line:no-any\n    value = tensorflow.DataType[value as any];\n  }\n  switch (value) {\n    case tensorflow.DataType.DT_FLOAT:\n      return 'float32';\n    case tensorflow.DataType.DT_INT32:\n    case tensorflow.DataType.DT_INT64:\n      return 'int32';\n    case tensorflow.DataType.DT_BOOL:\n      return 'bool';\n    case tensorflow.DataType.DT_DOUBLE:\n      return 'float32';\n    case tensorflow.DataType.DT_STRING:\n      return 'string';\n    default:\n      // Unknown dtype error will happen at runtime (instead of parse time),\n      // since these nodes might not be used by the actual subgraph execution.\n      return null;\n  }\n}\n\nexport function getDtypeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType): DataType {\n  const param = attrs[name];\n  if (param && param.type) {\n    return parseDtypeParam(param.type);\n  }\n  return def;\n}\n\nexport function getDtypeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: DataType[]): DataType[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.type) {\n    return param.list.type.map(v => parseDtypeParam(v));\n  }\n  return def;\n}\n\nexport function parseTensorShapeParam(shape: tensorflow.ITensorShape): number[]|\n    undefined {\n  if (shape.unknownRank) {\n    return undefined;\n  }\n  if (shape.dim != null) {\n    return shape.dim.map(\n        dim =>\n            (typeof dim.size === 'number') ? dim.size : parseInt(dim.size, 10));\n  }\n  return [];\n}\n\nexport function getTensorShapeParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def?: number[]): number[]|undefined {\n  const param = attrs[name];\n  if (param && param.shape) {\n    return parseTensorShapeParam(param.shape);\n  }\n  return def;\n}\n\nexport function getNumericArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[]): number[] {\n  const param = attrs[name];\n  if (param) {\n    return ((param.list.f && param.list.f.length ? param.list.f :\n                                                   param.list.i) ||\n            [])\n        .map(v => (typeof v === 'number') ? v : parseInt(v, 10));\n  }\n  return def;\n}\n\nexport function getStringArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string[],\n    keepCase = false): string[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.s) {\n    return param.list.s.map((v) => {\n      return parseStringParam(v, keepCase);\n    });\n  }\n  return def;\n}\n\nexport function getTensorShapeArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: number[][]): number[][] {\n  const param = attrs[name];\n  if (param && param.list && param.list.shape) {\n    return param.list.shape.map((v) => {\n      return parseTensorShapeParam(v);\n    });\n  }\n  return def;\n}\n\nexport function getBoolArrayParam(\n    attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n    def: boolean[]): boolean[] {\n  const param = attrs[name];\n  if (param && param.list && param.list.b) {\n    return param.list.b;\n  }\n  return def;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {getTensor} from '../executors/utils';\nimport {getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam} from '../operation_mapper';\nimport {GraphNode, Node, ValueType} from '../types';\n\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\nexport class NodeValueImpl implements GraphNode {\n  public readonly inputs: Tensor[] = [];\n  public readonly attrs: {[key: string]: ValueType} = {};\n  constructor(\n      private node: Node, private tensorMap: NamedTensorsMap,\n      private context: ExecutionContext) {\n    this.inputs = node.inputNames.map(name => this.getInput(name));\n    if (node.rawAttrs != null) {\n      this.attrs = Object.keys(node.rawAttrs)\n                       .reduce((attrs: {[key: string]: ValueType}, key) => {\n                         attrs[key] = this.getAttr(key);\n                         return attrs;\n                       }, {});\n    }\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getInput(name: string): Tensor {\n    return getTensor(name, this.tensorMap, this.context);\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getAttr(name: string, defaultValue?: ValueType): ValueType {\n    const value = this.node.rawAttrs[name];\n    if (value.tensor != null) {\n      return getTensor(name, this.tensorMap, this.context);\n    }\n    if (value.i != null || value.f != null) {\n      return getNumberParam(this.node.rawAttrs, name, defaultValue as number);\n    }\n    if (value.s != null) {\n      return getStringParam(this.node.rawAttrs, name, defaultValue as string);\n    }\n    if (value.b != null) {\n      return getBoolParam(this.node.rawAttrs, name, defaultValue as boolean);\n    }\n    if (value.shape != null) {\n      return getTensorShapeParam(\n          this.node.rawAttrs, name, defaultValue as number[]);\n    }\n    if (value.type != null) {\n      return getDtypeParam(this.node.rawAttrs, name, defaultValue as DataType);\n    }\n    if (value.list != null) {\n      if (value.list.i != null || value.list.f != null) {\n        return getNumericArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[]);\n      }\n      if (value.list.s != null) {\n        return getStringArrayParam(\n            this.node.rawAttrs, name, defaultValue as string[]);\n      }\n      if (value.list.shape != null) {\n        return getTensorShapeArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[][]);\n      }\n      if (value.list.b != null) {\n        return getBoolArrayParam(\n            this.node.rawAttrs, name, defaultValue as boolean[]);\n      }\n      if (value.list.type != null) {\n        return getDtypeArrayParam(\n            this.node.rawAttrs, name, defaultValue as DataType[]);\n      }\n    }\n\n    return defaultValue;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'BiasAdd':\n    case 'AddV2':\n    case 'Add': {\n      return [tfc.add(\n          (getParamValue('a', node, tensorMap, context) as tfc.Tensor),\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'AddN': {\n      return [tfc.addN((\n          getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[]))];\n    }\n    case 'FloorMod':\n    case 'Mod':\n      return [tfc.mod(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    case 'Mul':\n      return [tfc.mul(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    case 'RealDiv':\n    case 'Div': {\n      return [tfc.div(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'DivNoNan': {\n      return [tfc.divNoNan(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'FloorDiv': {\n      return [tfc.floorDiv(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sub': {\n      return [tfc.sub(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Minimum': {\n      return [tfc.minimum(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Maximum': {\n      return [tfc.maximum(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Pow': {\n      return [tfc.pow(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'SquaredDifference': {\n      return [tfc.squaredDifference(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'arithmetic';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Abs':\n    case 'ComplexAbs':\n      return [tfc.abs(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Acos':\n      return [tfc.acos(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Acosh':\n      return [tfc.acosh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Asin':\n      return [tfc.asin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Asinh':\n      return [tfc.asinh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atan':\n      return [tfc.atan(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atan2':\n      return [tfc.atan2(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('y', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atanh':\n      return [tfc.atanh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Ceil':\n      return [tfc.ceil(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Complex':\n      return [tfc.complex(\n          getParamValue('real', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('imag', node, tensorMap, context) as tfc.Tensor)];\n    case 'Cos':\n      return [tfc.cos(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Cosh':\n      return [tfc.cosh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Elu':\n      return [tfc.elu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Erf':\n      return [tfc.erf(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Exp':\n      return [tfc.exp(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Expm1': {\n      return [tfc.expm1(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Floor':\n      return [tfc.floor(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Log':\n      return [tfc.log(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Log1p': {\n      return [tfc.log1p(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Imag':\n      return [tfc.imag(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n\n    case 'Neg':\n      return [tfc.neg(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Reciprocal': {\n      return [tfc.reciprocal(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Real':\n      return [tfc.real(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Relu':\n      return [tfc.relu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Round': {\n      return [tfc.round(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Selu':\n      return [tfc.selu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sigmoid':\n      return [tfc.sigmoid(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sin':\n      return [tfc.sin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sign': {\n      return [tfc.sign(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sinh': {\n      return [tfc.sinh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Softplus': {\n      return [tfc.softplus(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sqrt': {\n      return [tfc.sqrt(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Square': {\n      return [tfc.square(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Tanh': {\n      return [tfc.tanh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Tan':\n      return [tfc.tan(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Relu6':\n    case 'ClipByValue':\n      return [tfc.clipByValue(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('clipValueMin', node, tensorMap, context) as number,\n          getParamValue('clipValueMax', node, tensorMap, context) as number)];\n    case 'Rsqrt':\n      return [tfc.rsqrt(getTensor(node.inputNames[0], tensorMap, context))];\n    case 'Prod':\n      return [tfc.prod(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('axes', node, tensorMap, context) as number[])];\n    case 'LeakyRelu':\n      return [tfc.leakyRelu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('alpha', node, tensorMap, context) as number)];\n    case 'Prelu':\n      return [tfc.prelu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('alpha', node, tensorMap, context) as tfc.Tensor)];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'basic_math';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, slice, stack, Tensor, tensor, tidy, unstack, util} from '@tensorflow/tfjs-core';\n\nexport interface TensorWithState {\n  tensor?: Tensor;\n  written?: boolean;\n  read?: boolean;\n  cleared?: boolean;\n}\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n  private static nextId = 0;\n  private tensors: TensorWithState[] = [];\n  private closed_ = false;\n  readonly id: number;\n  constructor(\n      public readonly name: string, public readonly dtype: DataType,\n      private maxSize: number, private elementShape: number[],\n      public readonly identicalElementShapes: boolean,\n      public readonly dynamicSize: boolean,\n      public readonly clearAfterRead: boolean) {\n    this.id = TensorArray.nextId++;\n  }\n\n  get closed() {\n    return this.closed_;\n  }\n\n  /**\n   * Close the current TensorArray.\n   */\n  clearAndClose() {\n    this.tensors.forEach(tensor => tensor.tensor.dispose());\n    this.tensors = [];\n    this.closed_ = true;\n  }\n\n  size(): number {\n    return this.tensors.length;\n  }\n\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n  read(index: number): Tensor {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || index >= this.tensors.length) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${\n          this.tensors.length}`);\n    }\n\n    const tensorWithState = this.tensors[index];\n    if (tensorWithState.cleared) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not read index ${\n              index} twice because it was cleared after a previous read ` +\n          `(perhaps try setting clear_after_read = false?).`);\n    }\n\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n  readMany(indices: number[]): Tensor[] {\n    return indices.map(index => this.read(index));\n  }\n\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n  write(index: number, tensor: Tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${\n          index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n\n    const t = this.tensors[index] || {};\n\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${\n          this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${\n          tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    }\n\n    // Set the shape for the first time write to unknow shape tensor array\n    if (this.size() === 0 &&\n        (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n\n    this.assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape,\n        `TensorArray ${this.name}: Could not write to TensorArray index ${\n            index}.`);\n\n    if (t && t.read) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been read.`);\n    }\n\n    if (t && t.written) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been written.`);\n    }\n\n    t.tensor = tensor;\n    t.written = true;\n\n    this.tensors[index] = t;\n  }\n\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n  writeMany(indices: number[], tensors: Tensor[]) {\n    if (indices.length !== tensors.length) {\n      throw new Error(\n          `TensorArray ${this.name}: could not write multiple tensors,` +\n          `because the index size: ${\n              indices.length} is not the same as tensors size: ${\n              tensors.length}.`);\n    }\n\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n  gather(indices?: number[], dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but gather requested dtype ${dtype}`);\n    }\n\n    if (!indices) {\n      indices = [];\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    }\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n    const tensors = this.readMany(indices);\n\n    this.assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n\n    return stack(tensors, 0);\n  }\n\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n  concat(dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but concat requested dtype ${dtype}`);\n    }\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    const indices = [];\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    }\n    // Collect all the tensors from the tensors array.\n    const tensors = this.readMany(indices);\n\n    this.assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape,\n        `TensorArray shape mismatch: tensor array shape (${\n            this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n\n    return concat(tensors, 0);\n  }\n\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices nummber[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n  scatter(indices: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n          indices.length} vs. ${tensor.shape[0]}`);\n    }\n\n    const maxIndex = Math.max(...indices);\n\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(\n          `Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n  split(length: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(\n          `TensorArray's size is not equal to the size of lengths (${\n              this.maxSize} vs. ${length.length}), ` +\n          'and the TensorArray is not marked as dynamically resizeable');\n    }\n\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors: Tensor[] = [];\n    tidy(() => {\n      tensor = tensor.reshape([1, totalLength, elementPerRow]);\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = slice(tensor, indices, sizes).reshape(this.elementShape);\n      }\n      return tensors;\n    });\n    const indices = [];\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n    this.writeMany(indices, tensors);\n  }\n\n  /**\n   * This differs from util.assertShapesMatch in that it allows values of\n   * negative one, an undefined size of a dimensinon, in a shape to match\n   * anything.\n   */\n  private assertShapesMatchAllowUndefinedSize(\n      shapeA: number[], shapeB: number[], errorMessagePrefix = ''): void {\n    util.assert(\n        this.shapesEqualAllowUndefinedSize(shapeA, shapeB),\n        () =>\n            errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  }\n\n  private shapesEqualAllowUndefinedSize(n1: number[], n2: number[]) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== -1 && n2[i] !== -1 && n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {scalar} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {TensorArray} from '../../executor/tensor_array';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<tfc.Tensor[]> => {\n  switch (node.op) {\n    case 'LoopCond':\n      return [\n        (getParamValue('pred', node, tensorMap, context) as tfc.Tensor).clone()\n      ];\n    case 'Switch': {\n      const pred =\n          getParamValue('pred', node, tensorMap, context) as tfc.Tensor;\n      const data =\n          getParamValue('data', node, tensorMap, context) as tfc.Tensor;\n      // Outputs nodes :0 => false, :1 => true\n      return (await pred.data())[0] ? [undefined, data.clone()] :\n                                      [data.clone(), undefined];\n    }\n    case 'Merge':\n      const inputName = node.inputNames.find(\n          name => getTensor(name, tensorMap, context) !== undefined);\n      return inputName ? [getTensor(inputName, tensorMap, context).clone()] :\n                         undefined;\n\n    case 'Enter':\n      const frameId =\n          getParamValue('frameName', node, tensorMap, context) as string;\n      const data =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.enterFrame(frameId);\n      return [data.clone()];\n\n    case 'Exit':\n      const tensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.exitFrame();\n      return [tensor.clone()];\n\n    case 'NextIteration':\n      const input =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.nextIteration();\n      return [input.clone()];\n\n    case 'TensorArrayV3':\n      const size = getParamValue('size', node, tensorMap, context) as number;\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const dynamicSize =\n          getParamValue('dynamicSize', node, tensorMap, context) as boolean;\n      const clearAfterRead =\n          getParamValue('clearAfterRead', node, tensorMap, context) as boolean;\n      const identicalElementShapes =\n          getParamValue('identicalElementShapes', node, tensorMap, context) as\n          boolean;\n      const name = getParamValue('name', node, tensorMap, context) as string;\n      const tensorArray = new TensorArray(\n          name, dtype, size, elementShape, identicalElementShapes, dynamicSize,\n          clearAfterRead);\n      context.addTensorArray(tensorArray);\n      return [scalar(tensorArray.id), scalar(1.0)];\n\n    case 'TensorArrayWriteV3':\n      const id =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const writeTensorArray = context.getTensorArray(id);\n      writeTensorArray.write(index, writeTensor);\n      return [scalar(1.0)];\n\n    case 'TensorArrayReadV3':\n      const readId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const readTensorArray = context.getTensorArray(readId);\n      return [readTensorArray.read(readIndex)];\n\n    case 'TensorArrayGatherV3':\n      const gatherId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const gatherDtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const gatherTensorArray = context.getTensorArray(gatherId);\n      return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n\n    case 'TensorArrayScatterV3':\n      const scatterId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const scatterTensorArray = context.getTensorArray(scatterId);\n      scatterTensorArray.scatter(scatterIndices, scatterTensor);\n      return [scalar(1.0)];\n\n    case 'TensorArrayConcatV3':\n      const concatId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const concatTensorArray = context.getTensorArray(concatId);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      return [concatTensorArray.concat(concatDtype)];\n\n    case 'TensorArraySplitV3':\n      const splitId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n      const splitTensorArray = context.getTensorArray(splitId);\n      splitTensorArray.split(lengths, splitTensor);\n      return [scalar(1.0)];\n\n    case 'TensorArraySizeV3':\n      const sizeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const sizeTensorArray = context.getTensorArray(sizeId);\n      return [scalar(sizeTensorArray.size(), 'int32')];\n\n    case 'TensorArrayCloseV3':\n      const closeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const closeTensorArray = context.getTensorArray(closeId);\n      closeTensorArray.clearAndClose();\n      return [scalar(0)];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'control';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): tfc.Tensor[] => {\n      switch (node.op) {\n        case 'Conv1D': {\n          const stride =\n              getParamValue('stride', node, tensorMap, context) as number;\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilation =\n              getParamValue('dilation', node, tensorMap, context) as number;\n          return [tfc.conv1d(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D,\n              getParamValue('filter', node, tensorMap, context) as tfc.Tensor3D,\n              stride, pad as 'valid' | 'same', dataFormat as 'NWC' | 'NCW',\n              dilation)];\n        }\n        case 'Conv2D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [tfc.conv2d(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n        }\n        case '_FusedConv2D':\n        case 'FusedDepthwiseConv2dNative': {\n          const [extraOp, activationFunc] =\n              (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n          const isBiasAdd = extraOp === 'biasadd';\n          const isPrelu = activationFunc === 'prelu';\n          const isBatchNorm = extraOp === 'fusedbatchnorm';\n\n          const numArgs =\n              (getParamValue('numArgs', node, tensorMap, context) as number);\n          if (isBiasAdd) {\n            if (isPrelu && numArgs !== 2) {\n              throw new Error(\n                  'FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' +\n                  'must have two extra arguments: bias and alpha.');\n            }\n            if (!isPrelu && numArgs !== 1) {\n              throw new Error(\n                  'FusedConv2d and DepthwiseConv2d with BiasAdd must have ' +\n                  'one extra argument: bias.');\n            }\n          }\n          if (isBatchNorm) {\n            throw new Error(\n                'FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported.');\n          }\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          const [biasArg, preluArg] =\n              getParamValue('args', node, tensorMap, context) as tfc.Tensor[];\n          const kernelMethod = node.op === '_FusedConv2D' ?\n              tfc.fused.conv2d :\n              tfc.fused.depthwiseConv2d;\n          return [kernelMethod({\n            x: getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n                tfc.Tensor4D,\n            filter: getParamValue('filter', node, tensorMap, context) as\n                tfc.Tensor4D,\n            strides: [stride[1], stride[2]],\n            pad: pad as 'valid' | 'same',\n            dataFormat: dataFormat as 'NHWC' | 'NCHW',\n            dilations: [dilations[1], dilations[2]],\n            bias: biasArg,\n            activation: activationFunc as tfc.fused.Activation,\n            preluActivationWeights: preluArg\n          })];\n        }\n        case 'Conv2DBackpropInput':\n        case 'Conv2dTranspose': {\n          const shape = getParamValue(\n                            'outputShape', node, tensorMap,\n                            context) as [number, number, number] |\n              [number, number, number, number];\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          return [tfc.conv2dTranspose(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n              shape, [stride[1], stride[2]], pad as 'valid' | 'same')];\n        }\n        case 'DepthwiseConv2dNative':\n        case 'DepthwiseConv2d': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n\n          return [tfc.depthwiseConv2d(\n              getParamValue('input', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n        }\n        case 'Conv3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [tfc.conv3d(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor4D |\n                  tfc.Tensor<tfc.Rank.R5>,\n              getParamValue('filter', node, tensorMap, context) as\n                  tfc.Tensor<tfc.Rank.R5>,\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same',\n              dataFormat as 'NDHWC' | 'NCDHW',\n              [dilations[1], dilations[2], dilations[3]])];\n        }\n\n        case 'AvgPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfc.avgPool(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n\n        case 'MaxPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfc.maxPool(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n\n        case 'AvgPool3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfc.avgPool3d(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor5D,\n              [kernelSize[1], kernelSize[2], kernelSize[3]],\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n        }\n\n        case 'MaxPool3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfc.maxPool3d(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor5D,\n              [kernelSize[1], kernelSize[2], kernelSize[3]],\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n        }\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'convolution';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Fill': {\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const value = getParamValue('value', node, tensorMap, context) as number;\n      return [tfc.fill(shape, value, dtype)];\n    }\n    case 'LinSpace': {\n      const start = getParamValue('start', node, tensorMap, context) as number;\n      const stop = getParamValue('stop', node, tensorMap, context) as number;\n      const num = getParamValue('num', node, tensorMap, context) as number;\n      return [tfc.linspace(start, stop, num)];\n    }\n    case 'Multinomial': {\n      const logits =\n          getParamValue('logits', node, tensorMap, context) as tfc.Tensor1D;\n      const numSamples =\n          getParamValue('numSamples', node, tensorMap, context) as number;\n      const seed = getParamValue('seed', node, tensorMap, context) as number;\n      return [tfc.multinomial(logits, numSamples, seed)];\n    }\n    case 'OneHot': {\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor1D;\n      const depth = getParamValue('depth', node, tensorMap, context) as number;\n      const onValue =\n          getParamValue('onValue', node, tensorMap, context) as number;\n      const offValue =\n          getParamValue('offValue', node, tensorMap, context) as number;\n      return [tfc.oneHot(indices, depth, onValue, offValue)];\n    }\n    case 'Ones': {\n      return [tfc.ones(\n          getParamValue('shape', node, tensorMap, context) as number[],\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'OnesLike': {\n      return [tfc.onesLike(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'RandomUniform': {\n      return [tfc.randomUniform(\n          // tslint:disable-next-line:no-any\n          getParamValue('shape', node, tensorMap, context) as any,\n          getParamValue('minval', node, tensorMap, context) as number,\n          getParamValue('maxval', node, tensorMap, context) as number,\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'Range': {\n      const start = getParamValue('start', node, tensorMap, context) as number;\n      const stop = getParamValue('stop', node, tensorMap, context) as number;\n      const step = getParamValue('step', node, tensorMap, context) as number;\n      return [tfc.range(\n          start, stop, step,\n          getParamValue('dtype', node, tensorMap, context) as 'float32' |\n              'int32')];\n    }\n    case 'TruncatedNormal': {\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      const mean = getParamValue('mean', node, tensorMap, context) as number;\n      const stdDev =\n          getParamValue('stdDev', node, tensorMap, context) as number;\n      const seed = getParamValue('seed', node, tensorMap, context) as number;\n      return [tfc.truncatedNormal(\n          shape, mean, stdDev,\n          getParamValue('dtype', node, tensorMap, context) as 'float32' |\n              'int32',\n          seed)];\n    }\n    case 'Zeros': {\n      return [tfc.zeros(\n          getParamValue('shape', node, tensorMap, context) as number[],\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'ZerosLike': {\n      return [tfc.zerosLike(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'creation';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<tfc.Tensor[]> => {\n  switch (node.op) {\n    case 'NonMaxSuppressionV5':\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2': {\n      const boxes =\n          getParamValue('boxes', node, tensorMap, context) as tfc.Tensor;\n      const scores =\n          getParamValue('scores', node, tensorMap, context) as tfc.Tensor;\n      const maxOutputSize =\n          getParamValue('maxOutputSize', node, tensorMap, context) as number;\n      const iouThreshold =\n          getParamValue('iouThreshold', node, tensorMap, context) as number;\n      const scoreThreshold =\n          getParamValue('scoreThreshold', node, tensorMap, context) as number;\n\n      if (node.op === 'NonMaxSuppressionV5') {\n        const softNmsSigma =\n            getParamValue('softNmsSigma', node, tensorMap, context) as number;\n\n        const result = await tfc.image.nonMaxSuppressionWithScoreAsync(\n            boxes as tfc.Tensor2D, scores as tfc.Tensor1D, maxOutputSize,\n            iouThreshold, scoreThreshold, softNmsSigma);\n\n        return [result.selectedIndices, result.selectedScores];\n      }\n\n      return [await tfc.image.nonMaxSuppressionAsync(\n          boxes as tfc.Tensor2D, scores as tfc.Tensor1D, maxOutputSize,\n          iouThreshold, scoreThreshold)];\n    }\n    case 'Where': {\n      const condition =\n          (getParamValue('condition', node, tensorMap, context) as tfc.Tensor)\n              .asType('bool');\n      const result = [await tfc.whereAsync(condition)];\n      condition.dispose();\n      return result;\n    }\n    case 'ListDiff': {\n      return tfc.setdiff1dAsync(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('y', node, tensorMap, context) as tfc.Tensor);\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'dynamic';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): tfc.Tensor[] => {\n      switch (node.op) {\n        case 'TopKV2': {\n          const x = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n          const k = getParamValue('k', node, tensorMap, context) as number;\n          const sorted =\n              getParamValue('sorted', node, tensorMap, context) as boolean;\n          const result = tfc.topk(x, k, sorted);\n          return [result.values, result.indices];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'evaluation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Const': {\n      return tensorMap[node.name];\n    }\n    case 'PlaceholderWithDefault':\n      const def =\n          getParamValue('default', node, tensorMap, context) as tfc.Tensor;\n      return [getTensor(node.name, tensorMap, context) || def];\n    case 'Placeholder':\n      return [getTensor(node.name, tensorMap, context)];\n    case 'Identity':\n    case 'StopGradient':\n    case 'FakeQuantWithMinMaxVars':  // This op is currently ignored.\n      return [\n        (getParamValue('x', node, tensorMap, context) as tfc.Tensor).clone()\n      ];\n    case 'IdentityN':\n      return (getParamValue('x', node, tensorMap, context) as tfc.Tensor[])\n          .map((t: tfc.Tensor) => t.clone());\n    case 'Snapshot':\n      const snapshot =\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor);\n      return [snapshot.clone()];\n    case 'Shape':\n      return [tfc.tensor1d(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).shape,\n          'int32')];\n    case 'ShapeN':\n      return (getParamValue('x', node, tensorMap, context) as tfc.Tensor[])\n          .map((t: tfc.Tensor) => tfc.tensor1d(t.shape));\n    case 'Size':\n      return [tfc.scalar(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).size,\n          'int32')];\n    case 'Rank':\n      return [tfc.scalar(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).rank,\n          'int32')];\n    case 'NoOp':\n      return [tfc.scalar(1)];\n    case 'Print':\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const data =\n          getParamValue('data', node, tensorMap, context) as tfc.Tensor[];\n      const message =\n          getParamValue('message', node, tensorMap, context) as string;\n      const summarize =\n          getParamValue('summarize', node, tensorMap, context) as number;\n      console.warn(\n          'The graph has a tf.print() operation,' +\n          'usually used for debugging, which slows down performance.');\n      console.log(message);\n      for (let i = 0; i < data.length; i++) {\n        console.log(\n            Array.prototype.slice.call(data[i].dataSync()).slice(0, summarize));\n      }\n      return [input];\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'graph';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'ResizeBilinear': {\n      const images =\n          getParamValue('images', node, tensorMap, context) as tfc.Tensor;\n      const size = getParamValue('size', node, tensorMap, context) as number[];\n      const alignCorners =\n          getParamValue('alignCorners', node, tensorMap, context) as boolean;\n      return [tfc.image.resizeBilinear(\n          images as tfc.Tensor3D | tfc.Tensor4D, [size[0], size[1]],\n          alignCorners)];\n    }\n    case 'ResizeNearestNeighbor': {\n      const images =\n          getParamValue('images', node, tensorMap, context) as tfc.Tensor;\n      const size = getParamValue('size', node, tensorMap, context) as number[];\n      const alignCorners =\n          getParamValue('alignCorners', node, tensorMap, context) as boolean;\n      return [tfc.image.resizeNearestNeighbor(\n          images as tfc.Tensor3D | tfc.Tensor4D, [size[0], size[1]],\n          alignCorners)];\n    }\n    case 'CropAndResize': {\n      const image =\n          getParamValue('image', node, tensorMap, context) as tfc.Tensor;\n      const boxes =\n          getParamValue('boxes', node, tensorMap, context) as tfc.Tensor;\n      const boxInd =\n          getParamValue('boxInd', node, tensorMap, context) as tfc.Tensor;\n      const cropSize =\n          getParamValue('cropSize', node, tensorMap, context) as number[];\n      const method =\n          getParamValue('method', node, tensorMap, context) as string;\n      const extrapolationValue =\n          getParamValue('extrapolationValue', node, tensorMap, context) as\n          number;\n      return [tfc.image.cropAndResize(\n          image as tfc.Tensor4D, boxes as tfc.Tensor2D, boxInd as tfc.Tensor1D,\n          cropSize as [number, number], method as 'bilinear' | 'nearest',\n          extrapolationValue)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'image';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Equal': {\n      return [tfc.equal(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'NotEqual': {\n      return [tfc.notEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Greater': {\n      return [tfc.greater(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'GreaterEqual': {\n      return [tfc.greaterEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Less': {\n      return [tfc.less(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LessEqual': {\n      return [tfc.lessEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalAnd': {\n      return [tfc.logicalAnd(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalNot': {\n      return [tfc.logicalNot(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalOr': {\n      return [tfc.logicalOr(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Select': {\n      return [tfc.where(\n          getParamValue('condition', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'logical';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'BatchMatMul':\n    case 'BatchMatMulV2':\n    case 'MatMul':\n      return [tfc.matMul(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor2D,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor2D,\n          getParamValue('transposeA', node, tensorMap, context) as boolean,\n          getParamValue('transposeB', node, tensorMap, context) as boolean)];\n\n    case 'Transpose':\n      return [tfc.transpose(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('perm', node, tensorMap, context) as number[])];\n\n    case '_FusedMatMul':\n      const [extraOp, activationFunc] =\n          (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n      const isBiasAdd = extraOp === 'biasadd';\n      const isPrelu = activationFunc === 'prelu';\n\n      const numArgs =\n          (getParamValue('numArgs', node, tensorMap, context) as number);\n      if (isBiasAdd) {\n        if (isPrelu && numArgs !== 2) {\n          throw new Error(\n              'Fused MatMul with BiasAdd and Prelu must have two ' +\n              'extra arguments: bias and alpha.');\n        }\n        if (!isPrelu && numArgs !== 1) {\n          throw new Error(\n              'Fused MatMul with BiasAdd must have one extra argument: bias.');\n        }\n      }\n      const [biasArg, preluArg] =\n          getParamValue('args', node, tensorMap, context) as tfc.Tensor[];\n      return [tfc.fused.matMul({\n        a: getParamValue('a', node, tensorMap, context) as tfc.Tensor2D,\n        b: getParamValue('b', node, tensorMap, context) as tfc.Tensor2D,\n        transposeA: getParamValue('transposeA', node, tensorMap, context) as\n            boolean,\n        transposeB: getParamValue('transposeB', node, tensorMap, context) as\n            boolean,\n        bias: biasArg,\n        activation: activationFunc as tfc.fused.Activation,\n        preluActivationWeights: preluArg\n      })];\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'matrices';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'FusedBatchNorm':\n    case 'FusedBatchNormV2': {\n      return [tfc.batchNorm(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('mean', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('variance', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('offset', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('scale', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('epsilon', node, tensorMap, context) as number)];\n    }\n    case 'FusedBatchNormV3': {\n      return [tfc.batchNorm(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('mean', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('variance', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('offset', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('scale', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('epsilon', node, tensorMap, context) as number)];\n    }\n    case 'LRN': {\n      return [tfc.localResponseNormalization(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          getParamValue('radius', node, tensorMap, context) as number,\n          getParamValue('bias', node, tensorMap, context) as number,\n          getParamValue('alpha', node, tensorMap, context) as number,\n          getParamValue('beta', node, tensorMap, context) as number)];\n    }\n    case 'Softmax': {\n      return [tfc.softmax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogSoftmax': {\n      return [tfc.logSoftmax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'SparseToDense': {\n      return [tfc.sparseToDense(\n          getParamValue('sparseIndices', node, tensorMap, context) as\n              tfc.Tensor,\n          getParamValue('outputShape', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('sparseValues', node, tensorMap, context) as number[],\n          getParamValue('defaultValue', node, tensorMap, context) as\n              tfc.Scalar)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'normalization';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Max': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.max(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Mean': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.mean(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Min': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.min(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Sum': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.sum(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'All': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.all(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Any': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.any(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'ArgMax': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.argMax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'ArgMin': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.argMin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'Prod': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.prod(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'reduction';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'ConcatV2':\n    case 'Concat': {\n      const n = getParamValue('n', node, tensorMap, context) as number;\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      let inputs =\n          getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[];\n      inputs = inputs.slice(0, n);\n      return [tfc.concat(inputs, axis)];\n    }\n    case 'GatherV2':\n    case 'Gather': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor1D;\n      return [tfc.gather(input, indices.asType('int32'), axis)];\n    }\n    case 'ReverseV2':\n    case 'Reverse': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      return [tfc.reverse(input, axis)];\n    }\n    case 'Slice': {\n      // tslint:disable-next-line:no-any\n      const begin = getParamValue('begin', node, tensorMap, context) as any;\n      // tslint:disable-next-line:no-any\n      const size = getParamValue('size', node, tensorMap, context) as any;\n      return [tfc.slice(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, begin,\n          size)];\n    }\n    case 'StridedSlice': {\n      const begin =\n          getParamValue('begin', node, tensorMap, context) as number[];\n      const end = getParamValue('end', node, tensorMap, context) as number[];\n      const strides =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const beginMask =\n          getParamValue('beginMask', node, tensorMap, context) as number;\n      const endMask =\n          getParamValue('endMask', node, tensorMap, context) as number;\n      const ellipsisMask =\n          getParamValue('ellipsisMask', node, tensorMap, context) as number;\n      const newAxisMask =\n          getParamValue('newAxisMask', node, tensorMap, context) as number;\n      const shrinkAxisMask =\n          getParamValue('shrinkAxisMask', node, tensorMap, context) as number;\n      const tensor = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      if (begin.length === 1 && tensor.shape.length > 1) {\n        for (let i = 1; i < tensor.shape.length; i++) {\n          begin.push(0);\n          end.push(tensor.shape[i]);\n          strides.push(strides[0]);\n        }\n      }\n      return [tfc.stridedSlice(\n          tensor, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask)];\n    }\n    case 'Pack': {\n      return tfc.tidy(() => {\n        const axis = getParamValue('axis', node, tensorMap, context) as number;\n        const tensors =\n            getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[];\n        // Reshape the tensors to the first tensor's shape if they don't match.\n        const shape = tensors[0].shape;\n        const squeezedShape = tensors[0].squeeze().shape;\n        const mapped = tensors.map(tensor => {\n          const sameShape = tfc.util.arraysEqual(tensor.shape, shape);\n          if (!sameShape &&\n              !tfc.util.arraysEqual(tensor.squeeze().shape, squeezedShape)) {\n            throw new Error('the input tensors shape does not match');\n          }\n          return sameShape ? tensor : tensor.reshape(shape);\n        });\n        return [tfc.stack(mapped, axis)];\n      });\n    }\n    case 'Unpack': {\n      return tfc.tidy(() => {\n        const axis = getParamValue('axis', node, tensorMap, context) as number;\n        const tensor =\n            getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n        return tfc.unstack(tensor, axis);\n      });\n    }\n    case 'Tile': {\n      const reps = getParamValue('reps', node, tensorMap, context) as number[];\n      return [tfc.tile(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, reps)];\n    }\n    case 'Split':\n    case 'SplitV': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const numOrSizeSplits =\n          getParamValue('numOrSizeSplits', node, tensorMap, context) as number |\n          number[];\n      return tfc.split(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          numOrSizeSplits, axis);\n    }\n    case 'ScatterNd': {\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor;\n      const values =\n          getParamValue('values', node, tensorMap, context) as tfc.Tensor;\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      return [tfc.scatterND(indices, values, shape)];\n    }\n    case 'GatherNd': {\n      const x = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor;\n      return [tfc.gatherND(x, indices)];\n    }\n    case 'SparseToDense': {\n      const indices =\n          getParamValue('sparseIndices', node, tensorMap, context) as\n          tfc.Tensor;\n      const shape =\n          getParamValue('outputShape', node, tensorMap, context) as number[];\n      const sparseValues =\n          getParamValue('sparseValues', node, tensorMap, context) as tfc.Tensor;\n      const defaultValue =\n          getParamValue('defaultValue', node, tensorMap, context) as tfc.Scalar;\n      return [tfc.sparseToDense(\n          indices, sparseValues, shape,\n          sparseValues.dtype === defaultValue.dtype ?\n              defaultValue :\n              defaultValue.asType(sparseValues.dtype))];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'slice_join';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): tfc.Tensor[] => {\n      switch (node.op) {\n        case 'FFT': {\n          return [tfc.fft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'IFFT': {\n          return [tfc.ifft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'RFFT': {\n          return [tfc.rfft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'IRFFT': {\n          return [tfc.irfft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'spectral';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, split} from './utils';\n\nexport const executeOp: InternalOpExecutor = (node: Node,\n                                            tensorMap: NamedTensorsMap,\n                                            context: ExecutionContext):\n                                               tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Cast': {\n      return [tfc.cast(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('dtype', node, tensorMap, context) as 'int32' |\n              'float32' | 'bool')];\n    }\n    case 'ExpandDims': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.expandDims(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'Squeeze': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      return [tfc.squeeze(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n\n    case 'Reshape': {\n      return [tfc.reshape(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('shape', node, tensorMap, context) as number[])];\n    }\n    case 'PadV2':\n    case 'Pad': {\n      return [tfc.pad(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          split(\n              getParamValue('padding', node, tensorMap, context) as number[],\n              2) as Array<[number, number]>,\n          getParamValue('constantValue', node, tensorMap, context) as number)];\n    }\n    case 'SpaceToBatchND': {\n      const blockShape =\n          getParamValue('blockShape', node, tensorMap, context) as number[];\n      const paddings = split(\n          getParamValue('paddings', node, tensorMap, context) as number[], 2);\n      return [tfc.spaceToBatchND(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          blockShape, paddings)];\n    }\n    case 'BatchToSpaceND': {\n      const blockShape =\n          getParamValue('blockShape', node, tensorMap, context) as number[];\n      const crops = split(\n          getParamValue('crops', node, tensorMap, context) as number[], 2);\n      return [tfc.batchToSpaceND(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          blockShape, crops)];\n    }\n    case 'DepthToSpace': {\n      const blockSize =\n          getParamValue('blockSize', node, tensorMap, context) as number;\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as\n           string).toUpperCase() as 'NHWC' |\n          'NCHW';\n      return [tfc.depthToSpace(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor4D,\n          blockSize, dataFormat)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'transformation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {ExecutionContext} from '../executor/execution_context';\n\nimport {NodeValueImpl} from './custom_op/node_value_impl';\nimport {getRegisteredOp} from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as transformation from './executors/transformation_executor';\nimport {Node} from './types';\n\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n */\nexport function executeOp(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor[]|Promise<tfc.Tensor[]> {\n  const value =\n      ((node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) => {\n        switch (node.category) {\n          case 'arithmetic':\n            return tfc.tidy(\n                () => arithmetic.executeOp(node, tensorMap, context));\n          case 'basic_math':\n            return tfc.tidy(\n                () => basicMath.executeOp(node, tensorMap, context));\n          case 'control':\n            return control.executeOp(node, tensorMap, context);\n          case 'convolution':\n            return tfc.tidy(\n                () => convolution.executeOp(node, tensorMap, context));\n          case 'creation':\n            return tfc.tidy(() => creation.executeOp(node, tensorMap, context));\n          case 'dynamic':\n            return dynamic.executeOp(node, tensorMap, context);\n          case 'evaluation':\n            return tfc.tidy(\n                () => evaluation.executeOp(node, tensorMap, context));\n          case 'image':\n            return tfc.tidy(() => image.executeOp(node, tensorMap, context));\n          case 'graph':\n            return tfc.tidy(() => graph.executeOp(node, tensorMap, context));\n          case 'logical':\n            return tfc.tidy(() => logical.executeOp(node, tensorMap, context));\n          case 'matrices':\n            return tfc.tidy(() => matrices.executeOp(node, tensorMap, context));\n          case 'normalization':\n            return tfc.tidy(\n                () => normalization.executeOp(node, tensorMap, context));\n          case 'reduction':\n            return tfc.tidy(\n                () => reduction.executeOp(node, tensorMap, context));\n          case 'slice_join':\n            return tfc.tidy(\n                () => sliceJoin.executeOp(node, tensorMap, context));\n          case 'spectral':\n            return tfc.tidy(() => spectral.executeOp(node, tensorMap, context));\n          case 'transformation':\n            return tfc.tidy(\n                () => transformation.executeOp(node, tensorMap, context));\n          case 'custom':\n            const opMapper = getRegisteredOp(node.op);\n            if (opMapper && opMapper.customExecutor) {\n              return opMapper.customExecutor(\n                  new NodeValueImpl(node, tensorMap, context));\n            } else {\n              throw TypeError(`Custom op ${node.op} is not registered.`);\n            }\n          default:\n            throw TypeError(\n                `Unknown op '${node.op}'. File an issue at ` +\n                `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                `, or register a custom execution with tf.registerOp()`);\n        }\n      })(node, tensorMap, context);\n  if (value instanceof Promise) {\n    return value.then((data) => [].concat(data));\n  }\n  return [].concat(value);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap, TensorArrayMap} from '../data/types';\n\nimport {TensorArray} from './tensor_array';\n\nexport interface ExecutionContextInfo {\n  id: number;           // the unique id of the context info\n  frameName: string;    // The frame name of the loop, this comes from\n                        // the TensorFlow NodeDef.\n  iterationId: number;  // The iteration id of the loop\n}\n\n/**\n * ExecutionContext captures the runtime environment of the node. It keeps\n * track of the current frame and iteration for the control flow ops.\n *\n * For example, typical Dynamic RNN model may contain loops, for which\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\n * current execution frame, and NextIteration Nodes for iteration id increment.\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\n */\nexport class ExecutionContext {\n  private rootContext = {id: 0, frameName: '', iterationId: 0};\n  private contexts: ExecutionContextInfo[] = [this.rootContext];\n  private lastId = 0;\n  private _currentContextIds: string[];\n\n  constructor(\n      public readonly weightMap: NamedTensorsMap,\n      public readonly tensorArrayMap: TensorArrayMap) {\n    this.generateCurrentContextIds();\n  }\n\n  private newFrame(id: number, frameName: string) {\n    return {id, frameName, iterationId: 0};\n  }\n\n  /**\n   * Set the current context\n   * @param contexts: ExecutionContextInfo[] the current path of execution\n   * frames\n   */\n  set currentContext(contexts: ExecutionContextInfo[]) {\n    if (this.contexts !== contexts) {\n      this.contexts = contexts;\n      this.generateCurrentContextIds();\n    }\n  }\n\n  get currentContext(): ExecutionContextInfo[] {\n    return this.contexts;\n  }\n\n  /**\n   * Returns the current context in string format.\n   */\n  get currentContextId(): string {\n    return this._currentContextIds[0];\n  }\n\n  /**\n   * Returns the current context and all parent contexts in string format.\n   * This allow access to the nodes in the current and parent frames.\n   */\n  get currentContextIds(): string[] {\n    return this._currentContextIds;\n  }\n\n  private generateCurrentContextIds() {\n    const names = [];\n    for (let i = 0; i < this.contexts.length - 1; i++) {\n      const contexts = this.contexts.slice(0, this.contexts.length - i);\n      names.push(this.contextIdforContexts(contexts));\n    }\n    names.push('');\n    this._currentContextIds = names;\n  }\n\n  private contextIdforContexts(contexts: ExecutionContextInfo[]) {\n    return contexts ?\n        contexts\n            .map(\n                context => (context.id === 0 && context.iterationId === 0) ?\n                    '' :\n                    `${context.frameName}-${context.iterationId}`)\n            .join('/') :\n        '';\n  }\n\n  /**\n   * Enter a new frame, a new context is pushed on the current context list.\n   * @param frameId new frame id\n   */\n  enterFrame(frameId: string) {\n    if (this.contexts) {\n      this.lastId++;\n      this.contexts = this.contexts.slice();\n      this.contexts.push(this.newFrame(this.lastId, frameId));\n      this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n    }\n  }\n\n  /**\n   * Exit the current frame, the last context is removed from the current\n   * context list.\n   */\n  exitFrame() {\n    if (this.contexts && this.contexts.length > 1) {\n      this.contexts = this.contexts.slice();\n      this.contexts.splice(-1);\n      this.currentContextIds.shift();\n    } else {\n      throw new Error('Cannot exit frame, the context is empty');\n    }\n  }\n\n  /**\n   * Enter the next iteration of a loop, the iteration id of last context is\n   * increased.\n   */\n  nextIteration() {\n    if (this.contexts && this.contexts.length > 0) {\n      this.contexts = this.contexts.slice();\n      this.lastId++;\n      const context =\n          Object.assign({}, this.contexts[this.contexts.length - 1]);\n      context.iterationId += 1;\n      context.id = this.lastId;\n      this.contexts.splice(-1, 1, context);\n      this._currentContextIds.splice(\n          0, 1, this.contextIdforContexts(this.contexts));\n    } else {\n      throw new Error('Cannot increase frame iteration, the context is empty');\n    }\n  }\n\n  getWeight(name: string): Tensor[] {\n    return this.weightMap[name];\n  }\n\n  addTensorArray(tensorArray: TensorArray) {\n    this.tensorArrayMap[tensorArray.id] = tensorArray;\n  }\n\n  getTensorArray(id: number): TensorArray {\n    return this.tensorArrayMap[id];\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NamedTensorMap} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {parseNodeName} from '../operations/executors/utils';\nimport {Graph, Node} from '../operations/types';\n\nexport interface ExecutionInfo {\n  inputs: NamedTensorMap;\n  outputs: Node[];\n  usedNodes: Set<string>;\n  missingInputs: string[];\n  dynamicNode: Node;\n  syncInputs: string[];\n}\n\n/**\n * Given graph inputs and desired outputs, find the minimal set of nodes\n * to execute in order to compute the outputs. In addition return other useful\n * info such:\n * - Missing inputs needed to compute the output.\n * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).\n * - Alternative inputs in order to avoid async (dynamic op) execution.\n */\nexport function getExecutionSubgraph(\n    inputs: NamedTensorMap, outputs: Node[],\n    weightMap: NamedTensorsMap): ExecutionInfo {\n  const usedNodes = new Set<string>();\n  const missingInputs: string[] = [];\n  let dynamicNode: Node = null;\n  let syncInputs: string[] = null;\n\n  // Start with the outputs, going backwards and find all the nodes that are\n  // needed to compute those outputs.\n  const seen = new Set<string>();\n  const inputNodeNames =\n      Object.keys(inputs).map(name => parseNodeName(name)[0]);\n  const frontier = [...outputs];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    if (isControlFlow(node) || isDynamicShape(node)) {\n      if (dynamicNode == null) {\n        dynamicNode = node;\n        syncInputs = dynamicNode.children.map(child => child.name)\n                         .filter(name => usedNodes.has(name));\n      }\n    }\n    usedNodes.add(node.name);\n\n    // Weights are dead end since we already have their values.\n    if (weightMap[node.name] != null) {\n      continue;\n    }\n    // This node is a dead end since it's one of the user-provided inputs.\n\n    if (inputNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    }\n    if (node.inputs.length === 0) {\n      missingInputs.push(node.name);\n      continue;\n    }\n    node.inputs.forEach(input => {\n      // Don't add to the frontier if it is already there.\n      if (seen.has(input.name)) {\n        return;\n      }\n      seen.add(input.name);\n      frontier.push(input);\n    });\n  }\n  return {inputs, outputs, usedNodes, missingInputs, dynamicNode, syncInputs};\n}\n\n/**\n * Given the execution info, return a list of nodes in topological order that\n * need to be executed to compute the output.\n */\nexport function getNodesInTopologicalOrder(\n    graph: Graph, weightMap: NamedTensorsMap,\n    executionInfo: ExecutionInfo): Node[] {\n  const {usedNodes, inputs} = executionInfo;\n  const frontier: Node[] = [];\n  const inputNodes = Object.keys(inputs)\n                         .map(name => parseNodeName(name)[0])\n                         .map(name => graph.nodes[name]);\n  inputNodes.forEach(input => {\n    if (usedNodes.has(input.name)) {\n      frontier.push(input);\n    }\n  });\n  graph.weights.forEach(weight => {\n    if (usedNodes.has(weight.name)) {\n      frontier.push(weight);\n    }\n  });\n  const seen = new Set<string>();\n  const orderedNodes: Node[] = [];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    seen.add(node.name);\n    if (!weightMap[node.name]) {\n      orderedNodes.push(node);\n    }\n    node.children.forEach(child => {\n      if (!seen.has(child.name) && usedNodes.has(child.name) &&\n          child.inputs.every(input => seen.has(input.name))) {\n        frontier.push(child);\n      }\n    });\n  }\n  return orderedNodes;\n}\n\nconst CONTROL_FLOW_OPS = ['Switch', 'Merge', 'Enter', 'Exit', 'NextIteration'];\nconst DYNAMIC_SHAPE_OPS = [\n  'NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where'\n];\n\nexport function isControlFlow(node: Node) {\n  return CONTROL_FLOW_OPS.indexOf(node.op) >= 0;\n}\n\nexport function isDynamicShape(node: Node) {\n  return DYNAMIC_SHAPE_OPS.indexOf(node.op) >= 0;\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NamedTensorMap, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\nimport {ISignatureDef} from '../data/compiled_api';\nimport {NamedTensorsMap, TensorArrayMap, TensorInfo} from '../data/types';\nimport {getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContenxt, parseNodeName} from '../operations/executors/utils';\nimport {executeOp} from '../operations/operation_executor';\nimport {Graph, Node} from '../operations/types';\n\nimport {ExecutionContext, ExecutionContextInfo} from './execution_context';\nimport {getExecutionSubgraph, getNodesInTopologicalOrder, isControlFlow} from './model_analysis';\n\ninterface NodeWithContexts {\n  contexts: ExecutionContextInfo[];\n  node: Node;\n}\n\nexport class GraphExecutor {\n  private compiledMap: Map<string, Node[]> = new Map();\n  private _weightMap: NamedTensorsMap = {};\n  private weightIds: number[];\n  private _signature: ISignatureDef;\n  private _inputs: Node[];\n  private _outputs: Node[];\n  private SEPERATOR = ',';\n  get weightMap(): NamedTensorsMap {\n    return this._weightMap;\n  }\n  set weightMap(weightMap: NamedTensorsMap) {\n    const weightIds = Object.keys(weightMap).map(\n        key => weightMap[key].map(tensor => tensor.id));\n    this.weightIds = [].concat(...weightIds);\n    this._weightMap = weightMap;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this._inputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get outputs(): TensorInfo[] {\n    return this._outputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get inputNodes(): string[] {\n    return this._inputs.map(node => node.signatureKey || node.name);\n  }\n\n  get outputNodes(): string[] {\n    return this._outputs.map(node => node.signatureKey || node.name);\n  }\n\n  constructor(private graph: Graph) {\n    this._outputs = graph.outputs;\n    this._inputs = graph.inputs;\n    this._signature = graph.signature;\n  }\n\n  private getCompilationKey(inputs: Node[], outputs: Node[]): string {\n    const sortedInputs = inputs.map(node => node.name).sort();\n    const sortedOutputs = outputs.map(node => node.name).sort();\n    return sortedInputs.join(this.SEPERATOR) + '--' +\n        sortedOutputs.join(this.SEPERATOR);\n  }\n\n  /**\n   * Compiles the inference graph and returns the minimal set of nodes that are\n   * required for execution, in the correct execution order.\n   */\n  private compile(inputs: NamedTensorMap, outputs: Node[]): Node[] {\n    const executionInfo = getExecutionSubgraph(inputs, outputs, this.weightMap);\n    const {missingInputs, dynamicNode, syncInputs} = executionInfo;\n    if (dynamicNode != null) {\n      throw new Error(\n          `This execution contains the node '${dynamicNode.name}', which has ` +\n          `the dynamic op '${dynamicNode.op}'. Please use ` +\n          `model.executeAsync() instead. Alternatively, to avoid the ` +\n          `dynamic ops, specify the inputs [${syncInputs}]`);\n    }\n\n    if (missingInputs.length > 0) {\n      const outNames = outputs.map(n => n.name);\n      const inNames = Object.keys(inputs);\n      throw new Error(\n          `Cannot compute the outputs [${outNames}] from the provided inputs ` +\n          `[${inNames}]. Missing the following inputs: [${missingInputs}]`);\n    }\n\n    return getNodesInTopologicalOrder(\n        this.graph, this.weightMap, executionInfo);\n  }\n\n  /**\n   * Executes the inference for given input tensors.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  execute(inputs: NamedTensorMap, outputs: string[]): Tensor[] {\n    inputs = this.mapInputs(inputs);\n    const names = Object.keys(inputs).sort();\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodes =\n        outputs.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const compilationKey = this.getCompilationKey(inputNodes, outputNodes);\n    // Do nothing if the compiled graph cache contains the input.\n    let orderedNodes = this.compiledMap.get(compilationKey);\n    if (orderedNodes == null) {\n      orderedNodes = this.compile(inputs, outputNodes);\n      this.compiledMap.set(compilationKey, orderedNodes);\n    }\n    const tensorArrayMap: TensorArrayMap = {};\n    return tidy(() => {\n      const context = new ExecutionContext(this._weightMap, tensorArrayMap);\n      const tensorsMap: NamedTensorsMap = {...this.weightMap};\n      Object.keys(inputs).forEach(name => {\n        const [nodeName, index] = parseNodeName(name);\n        const tensors: Tensor[] = [];\n        tensors[index] = inputs[name];\n        tensorsMap[nodeName] = tensors;\n      });\n      const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n      const intermediateTensorConsumerCount: {[key: number]: number} = {};\n      for (let i = 0; i < orderedNodes.length; i++) {\n        const node = orderedNodes[i];\n        if (!tensorsMap[node.name]) {\n          const tensors = executeOp(node, tensorsMap, context) as Tensor[];\n          if (tensors instanceof Promise) {\n            throw new Error(\n                `The execution of the op '${node.op}' returned a promise. ` +\n                `Please use model.executeAsync() instead.`);\n          }\n          tensorsMap[node.name] = tensors;\n          this.checkTensorForDisposal(\n              node.name, node, tensorsMap, context, tensorsToKeep, outputs,\n              intermediateTensorConsumerCount);\n        }\n      }\n      return outputs.map(name => getTensor(name, tensorsMap, context));\n    });\n  }\n\n  private getFrozenTensorIds(tensorMap: NamedTensorsMap): Set<number> {\n    const ids = [].concat.apply(\n        [],\n        Object.keys(tensorMap)\n            .map(key => tensorMap[key])\n            .map(tensors => tensors.map(tensor => tensor.id)));\n    return new Set(ids);\n  }\n  private checkTensorForDisposal(\n      nodeName: string, node: Node, tensorMap: NamedTensorsMap,\n      context: ExecutionContext, tensorsToKeep: Set<number>,\n      outputNames: string[],\n      intermediateTensorConsumerCount: {[key: string]: number}) {\n    // Skip output nodes and any control flow nodes, since its dependency is\n    // tricky to track correctly.\n    if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {\n      return;\n    }\n\n    tensorMap[nodeName].forEach(tensor => {\n      if (tensor != null) {\n        intermediateTensorConsumerCount[tensor.id] =\n            (intermediateTensorConsumerCount[tensor.id] || 0) +\n            node.children.length;\n      }\n    });\n    node.inputs.forEach(input => {\n      // Skip any control flow nodes, since its dependency is tricky to track\n      // correctly.\n      if (input.category !== 'control') {\n        const tensors =\n            getTensorsForCurrentContenxt(input.name, tensorMap, context);\n        if (tensors != null) {\n          tensors.forEach(tensor => {\n            if (tensor && !tensorsToKeep.has(tensor.id)) {\n              const count = intermediateTensorConsumerCount[tensor.id];\n              if (count === 1) {\n                tensor.dispose();\n                delete intermediateTensorConsumerCount[tensor.id];\n              } else if (count != null) {\n                // only intermediate nodes has count set, inputs and weights are\n                // not.\n                intermediateTensorConsumerCount[tensor.id]--;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  async executeAsync(inputs: NamedTensorMap, outputs: string[]):\n      Promise<Tensor[]> {\n    inputs = this.mapInputs(inputs);\n    this.checkInputs(inputs);\n    this.checkInputShapeAndType(inputs);\n    outputs = this.mapOutputs(outputs);\n    this.checkOutputs(outputs);\n    const tensorArrayMap: TensorArrayMap = {};\n    const context = new ExecutionContext(this._weightMap, tensorArrayMap);\n    // Graph with control flow op requires runtime evaluation of the execution\n    // order, while without control flow the execution order is pre-determined\n    // in the compile method.\n    const tensorMap =\n        await this.executeWithControlFlow(inputs, context, outputs);\n    const results = outputs.map(name => getTensor(name, tensorMap, context));\n\n    // dispose all the intermediate tensors\n    const outputIds = new Set<number>(results.map(t => t.id));\n    const inputIds =\n        new Set<number>(Object.keys(inputs).map(name => inputs[name].id));\n    Object.keys(tensorMap).forEach(key => {\n      const tensorArray = tensorMap[key];\n      tensorArray.forEach(tensor => {\n        if (tensor && !tensor.isDisposed && !outputIds.has(tensor.id) &&\n            !inputIds.has(tensor.id) &&\n            this.weightIds.indexOf(tensor.id) === -1) {\n          tensor.dispose();\n        }\n      });\n    });\n    return results;\n  }\n\n  /**\n   * When there are control flow nodes in the graph, the graph execution use\n   * ExecutionContext to keep track of the frames and loop iterators.\n   * @param inputs placeholder tensors for the graph.\n   * @param context the execution context object for current execution.\n   */\n  private async executeWithControlFlow(\n      inputs: NamedTensorMap, context: ExecutionContext,\n      outputNames: string[]): Promise<NamedTensorsMap> {\n    const names = Object.keys(inputs);\n    const inputNodes =\n        names.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const outputNodes =\n        outputNames.map(name => this.graph.nodes[parseNodeName(name)[0]]);\n    const {usedNodes, missingInputs, dynamicNode, syncInputs} =\n        getExecutionSubgraph(inputs, outputNodes, this.weightMap);\n\n    const stack: NodeWithContexts[] =\n        [...inputNodes, ...this.graph.weights].map(node => {\n          return {node, contexts: context.currentContext};\n        });\n    const tensorsMap: NamedTensorsMap = {...this.weightMap};\n    Object.keys(inputs).forEach(name => {\n      const [nodeName, index] = parseNodeName(name);\n      const tensors: Tensor[] = [];\n      tensors[index] = inputs[name];\n      tensorsMap[nodeName] = tensors;\n    });\n    const intermediateTensorConsumerCount: {[key: number]: number} = {};\n    const tensorsToKeep = this.getFrozenTensorIds(tensorsMap);\n    const added: {[key: string]: boolean} = {};\n    while (stack.length > 0) {\n      const promises = this.processStack(\n          inputNodes, stack, context, tensorsMap, added, tensorsToKeep,\n          outputNames, intermediateTensorConsumerCount, usedNodes);\n      await Promise.all(promises);\n    }\n    if (dynamicNode == null) {\n      console.warn(\n          `This model execution did not contain any nodes with control flow ` +\n          `or dynamic output shapes. You can use model.execute() instead.`);\n    }\n    const missingOutputs =\n        outputNodes\n            .filter(\n                node => !isControlFlow(node) &&\n                    !getTensor(node.name, tensorsMap, context))\n            .map(node => node.name);\n    if (missingOutputs.length > 0) {\n      let alternativeMsg = '';\n      if (dynamicNode != null) {\n        alternativeMsg =\n            `Alternatively, to avoid the dynamic ops, use model.execute() ` +\n            `and specify the inputs [${syncInputs}]`;\n      }\n      throw new Error(\n          `Cannot compute the outputs [${missingOutputs}] from the provided ` +\n          `inputs [${names}]. Consider providing the following inputs: ` +\n          `[${missingInputs}]. ${alternativeMsg}`);\n    }\n    return tensorsMap;\n  }\n\n  private processStack(\n      inputNodes: Node[], stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      tensorsToKeep: Set<number>, outputNames: string[],\n      intermediateTensorConsumerCount: {[key: number]: number},\n      usedNodes: Set<string>) {\n    const promises: Array<Promise<Tensor[]>> = [];\n    while (stack.length > 0) {\n      const item = stack.pop();\n      context.currentContext = item.contexts;\n      let nodeName = '';\n      // The tensor of the Enter op with isConstant set should be set\n      // in the parent scope, so it will be available as constant for the\n      // whole loop.\n      if (item.node.op === 'Enter' &&\n          getParamValue('isConstant', item.node, tensorMap, context)) {\n        [nodeName] = getNodeNameAndIndex(item.node.name, context);\n      }\n\n      // only process nodes that are not provided as input nodes.\n      if (inputNodes.indexOf(item.node) === -1) {\n        const tensors = executeOp(item.node, tensorMap, context);\n        if (!nodeName) {\n          [nodeName] = getNodeNameAndIndex(item.node.name, context);\n        }\n        const currentContext = context.currentContext;\n        if (tensors instanceof Promise) {\n          promises.push(tensors.then(t => {\n            tensorMap[nodeName] = t;\n            context.currentContext = currentContext;\n            this.checkTensorForDisposal(\n                nodeName, item.node, tensorMap, context, tensorsToKeep,\n                outputNames, intermediateTensorConsumerCount);\n            this.processChildNodes(\n                item.node, stack, context, tensorMap, added, usedNodes);\n            return t;\n          }));\n        } else {\n          tensorMap[nodeName] = tensors;\n          this.checkTensorForDisposal(\n              nodeName, item.node, tensorMap, context, tensorsToKeep,\n              outputNames, intermediateTensorConsumerCount);\n          this.processChildNodes(\n              item.node, stack, context, tensorMap, added, usedNodes);\n        }\n      } else {\n        this.processChildNodes(\n            item.node, stack, context, tensorMap, added, usedNodes);\n      }\n    }\n    return promises;\n  }\n\n  private processChildNodes(\n      node: Node, stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      usedNodes: Set<string>) {\n    node.children.forEach((childNode) => {\n      const [nodeName, ] = getNodeNameAndIndex(childNode.name, context);\n      if (added[nodeName] || !usedNodes.has(childNode.name)) {\n        return;\n      }\n      // Merge op can be pushed if any of its inputs has value.\n      if (childNode.op === 'Merge') {\n        if (childNode.inputNames.some(name => {\n              return !!getTensor(name, tensorMap, context);\n            })) {\n          added[nodeName] = true;\n          stack.push({contexts: context.currentContext, node: childNode});\n        }\n      } else  // Otherwise all inputs must to have value.\n          if (childNode.inputNames.every(name => {\n                return !!getTensor(name, tensorMap, context);\n              })) {\n        added[nodeName] = true;\n        stack.push({contexts: context.currentContext, node: childNode});\n      }\n    });\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  dispose() {\n    Object.keys(this.weightMap)\n        .forEach(\n            key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n  }\n\n  private checkInputShapeAndType(inputs: NamedTensorMap) {\n    Object.keys(inputs).forEach(name => {\n      const input = inputs[name];\n      const [nodeName, ] = parseNodeName(name);\n      const node = this.graph.nodes[nodeName];\n      if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n        const shape = node.attrParams['shape'].value as number[];\n        const match = shape.length === input.shape.length &&\n            input.shape.every(\n                (dim, index) => shape[index] === -1 || shape[index] === dim);\n        util.assert(\n            match,\n            () => `The shape of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be [${shape}], but was ` +\n                `[${input.shape}]`);\n      }\n      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n        util.assert(\n            input.dtype === node.attrParams['dtype'].value as string,\n            () => `The dtype of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be ` +\n                `${node.attrParams['dtype'].value}, but was ${input.dtype}`);\n      }\n    });\n  }\n\n  private mapInputs(inputs: NamedTensorMap) {\n    const result: NamedTensorMap = {};\n    for (const inputName in inputs) {\n      if (this._signature != null && this._signature.inputs != null &&\n          this._signature.inputs[inputName] != null) {\n        const tensor = this._signature.inputs[inputName];\n        result[tensor.name] = inputs[inputName];\n      } else {\n        result[inputName] = inputs[inputName];\n      }\n    }\n    return result;\n  }\n\n  private checkInputs(inputs: NamedTensorMap) {\n    const notInGraph = Object.keys(inputs).filter(name => {\n      const [nodeName] = parseNodeName(name);\n      return this.graph.nodes[nodeName] == null;\n    });\n    if (notInGraph.length > 0) {\n      throw new Error(\n          `The dict provided in model.execute(dict) has ` +\n          `keys: [${notInGraph}] that are not part of graph`);\n    }\n  }\n\n  private mapOutputs(outputs: string[]) {\n    return outputs.map(name => {\n      if (this._signature != null && this._signature.outputs != null &&\n          this._signature.outputs[name] != null) {\n        const tensor = this._signature.outputs[name];\n        return tensor.name;\n      }\n      return name;\n    }, {});\n  }\n  private checkOutputs(outputs: string[]): void {\n    outputs.forEach(name => {\n      const [normalizedName] = parseNodeName(name);\n      if (!this.graph.nodes[normalizedName]) {\n        throw new Error(`The output '${name}' is not found in the graph`);\n      }\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {InferenceModel, io, ModelPredictConfig, NamedTensorMap, Tensor} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {NamedTensorsMap, TensorInfo} from '../data/types';\nimport {OperationMapper} from '../operations/operation_mapper';\n\nimport {GraphExecutor} from './graph_executor';\n\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\n/**\n * A `tf.GraphModel` is a directed, acyclic graph of built from\n * SavedModel GraphDef and allows inference exeuction.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n */\n/** @doc {heading: 'Models', subheading: 'Classes'} */\nexport class GraphModel implements InferenceModel {\n  private executor: GraphExecutor;\n  private version = 'n/a';\n  private handler: io.IOHandler;\n  private artifacts: io.ModelArtifacts;\n  // Returns the version information for the tensorflow model GraphDef.\n  get modelVersion(): string {\n    return this.version;\n  }\n\n  get inputNodes(): string[] {\n    return this.executor.inputNodes;\n  }\n\n  get outputNodes(): string[] {\n    return this.executor.outputNodes;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this.executor.inputs;\n  }\n\n  get outputs(): TensorInfo[] {\n    return this.executor.outputs;\n  }\n\n  get weights(): NamedTensorsMap {\n    return this.executor.weightMap;\n  }\n\n  /**\n   * @param modelUrl url for the model, or an `io.IOHandler`.\n   * @param weightManifestUrl url for the weight file generated by\n   * scripts/convert.py script.\n   * @param requestOption options for Request, which allows to send credentials\n   * and custom headers.\n   * @param onProgress Optional, progress callback function, fired periodically\n   * before the load is completed.\n   */\n  constructor(\n      private modelUrl: string|io.IOHandler,\n      private loadOptions: io.LoadOptions = {}) {\n    if (loadOptions == null) {\n      this.loadOptions = {};\n    }\n  }\n\n  private findIOHandler() {\n    const path = this.modelUrl;\n    if ((path as io.IOHandler).load != null) {\n      // Path is an IO Handler.\n      this.handler = path as io.IOHandler;\n    } else if (this.loadOptions.requestInit != null) {\n      this.handler = io.browserHTTPRequest(path as string, this.loadOptions);\n    } else {\n      const handlers =\n          io.getLoadHandlers(path as string, this.loadOptions.onProgress);\n      if (handlers.length === 0) {\n        // For backward compatibility: if no load handler can be found,\n        // assume it is a relative http path.\n        handlers.push(io.browserHTTPRequest(path as string, this.loadOptions));\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) load handlers for ` +\n            `URL '${[path]}'`);\n      }\n      this.handler = handlers[0];\n    }\n  }\n\n  /**\n   * Loads the model and weight files, construct the in memory weight map and\n   * compile the inference graph.\n   */\n  async load(): Promise<boolean> {\n    this.findIOHandler();\n    if (this.handler.load == null) {\n      throw new Error(\n          'Cannot proceed with model loading because the IOHandler provided ' +\n          'does not have the `load` method implemented.');\n    }\n    this.artifacts = await this.handler.load();\n    const graph = this.artifacts.modelTopology as tensorflow.IGraphDef;\n    let signature = {};\n    if (this.artifacts.userDefinedMetadata != null) {\n      signature =  // tslint:disable-next-line:no-any\n          (this.artifacts.userDefinedMetadata as any).signature as\n          tensorflow.ISignatureDef;\n    }\n\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    const weightMap =\n        io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);\n    this.executor = new GraphExecutor(\n        OperationMapper.Instance.transformGraph(graph, signature));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n    return true;\n  }\n\n  /**\n   * Save the configuration and/or weights of the GraphModel.\n   *\n   * An `IOHandler` is an object that has a `save` method of the proper\n   * signature defined. The `save` method manages the storing or\n   * transmission of serialized data (\"artifacts\") that represent the\n   * model's topology and weights onto or via a specific medium, such as\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\n   * requests to a server. TensorFlow.js provides `IOHandler`\n   * implementations for a number of frequently used saving mediums, such as\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n   * for more details.\n   *\n   * This method also allows you to refer to certain types of `IOHandler`s\n   * as URL-like string shortcuts, such as 'localstorage://' and\n   * 'indexeddb://'.\n   *\n   * Example 1: Save `model`'s topology and weights to browser [local\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n   * then load it back.\n   *\n   * ```js\n   * const modelUrl =\n   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n   * const model = await tf.loadGraphModel(modelUrl);\n   * const zeros = tf.zeros([1, 224, 224, 3]);\n   * model.predict(zeros).print();\n   *\n   * const saveResults = await model.save('localstorage://my-model-1');\n   *\n   * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * model.predict(zeros).print();\n   * ```\n   *\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   */\n  /**\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  async save(handlerOrURL: io.IOHandler|string, config?: io.SaveConfig):\n      Promise<io.SaveResult> {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = io.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new Error(\n            `Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) save handlers for ` +\n            `URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new Error(\n          'GraphModel.save() cannot proceed because the IOHandler ' +\n          'provided does not have the `save` attribute defined.');\n    }\n\n    return handlerOrURL.save(this.artifacts);\n  }\n\n  /**\n   * Execute the inference for the input tensors.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    model.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size and\n   * output node names. Currently the batch size option is ignored for graph\n   * model.\n   *\n   * @returns Inference result tensors. The output would be single `tf.Tensor`\n   * if model has single output node, otherwise Tensor[] or NamedTensorMap[]\n   * will be returned for model with multiple outputs.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  predict(inputs: Tensor|Tensor[]|NamedTensorMap, config?: ModelPredictConfig):\n      Tensor|Tensor[]|NamedTensorMap {\n    return this.execute(inputs, this.outputNodes);\n  }\n\n  private normalizeInputs(inputs: Tensor|Tensor[]|\n                          NamedTensorMap): NamedTensorMap {\n    if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n      // The input is already a NamedTensorMap.\n      return inputs;\n    }\n    inputs = Array.isArray(inputs) ? inputs : [inputs];\n    if (inputs.length !== this.inputNodes.length) {\n      throw new Error(\n          'Input tensor count mismatch,' +\n          `the graph model has ${this.inputNodes.length} placeholders, ` +\n          `while there are ${inputs.length} input tensors.`);\n    }\n    return this.inputNodes.reduce((map, inputName, i) => {\n      map[inputName] = (inputs as Tensor[])[i];\n      return map;\n    }, {} as NamedTensorMap);\n  }\n\n  private normalizeOutputs(outputs: string|string[]): string[] {\n    outputs = outputs || this.outputNodes;\n    return !Array.isArray(outputs) ? [outputs] : outputs;\n  }\n\n  /**\n   * Executes inference for the model for given input tensors.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no\n   * outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   *\n   * @returns A single tensor if provided with a single output or no outputs\n   * are provided and there is only one default output, otherwise return a\n   * tensor array. The order of the tensor array is the same as the outputs\n   * if provided, otherwise the order of outputNodes attribute of the model.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  execute(inputs: Tensor|Tensor[]|NamedTensorMap, outputs?: string|string[]):\n      Tensor|Tensor[] {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = this.executor.execute(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  /**\n   * Executes inference for the model for given input tensors in async\n   * fashion, use this method when your model contains control flow ops.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   *\n   * @returns A Promise of single tensor if provided with a single output or\n   * no outputs are provided and there is only one default output, otherwise\n   * return a tensor map.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  async executeAsync(\n      inputs: Tensor|Tensor[]|NamedTensorMap,\n      outputs?: string|string[]): Promise<Tensor|Tensor[]> {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = await this.executor.executeAsync(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n\n  private convertTensorMapToTensorsMap(map: NamedTensorMap): NamedTensorsMap {\n    return Object.keys(map).reduce((newMap: NamedTensorsMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  dispose() {\n    this.executor.dispose();\n  }\n}\n\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with\n * a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send credentials\n *    and custom headers.\n */\n/** @doc {heading: 'Models', subheading: 'Loading'} */\nexport async function loadGraphModel(\n    modelUrl: string|io.IOHandler,\n    options: io.LoadOptions = {}): Promise<GraphModel> {\n  if (modelUrl == null) {\n    throw new Error(\n        'modelUrl in loadGraphModel() cannot be null. Please provide a url ' +\n        'or an IOHandler that loads the model');\n  }\n  if (options == null) {\n    options = {};\n  }\n\n  if (options.fromTFHub) {\n    if ((modelUrl as io.IOHandler).load == null) {\n      if (!(modelUrl as string).endsWith('/')) {\n        modelUrl = (modelUrl as string) + '/';\n      }\n      modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n    }\n  }\n  const model = new GraphModel(modelUrl, options);\n  await model.load();\n  return model;\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '1.7.0';\nexport {version};\n"],"names":["DataType","SaverDef","CheckpointFormatVersion","CUSTOM_OPS","getRegisteredOp","name","getParamValue","paramName","node","tensorMap","context","inputParam","inputParams","undefined","inputIndexStart","start","end","inputIndexEnd","type","getTensor","inputNames","slice","map","data","Array","prototype","call","dataSync","attrParam","attrParams","value","tensorsMap","_a","nodeName","index","contextId","currentContextIds","find","getNodeNameWithContextId","getNodeNameAndIndex","inputName","currentContextId","parseNodeName","lastIndexOf","substring","Number","split","arr","size","res","i","length","push","tfOpName","category","inputs","attrs","tfName","notSupported","defaultValue","tfDeprecatedName","ops","arithmetic","basicMath","control","convolution","creation","dynamic","evaluation","logical","image","graph","matrices","normalization","reduction","sliceJoin","spectral","transformation","mappersJson","concat","op","json","this","opMappers","reduce","mapper","Object","OperationMapper","_instance","signature","placeholders","weights","nodes","_this","mapNode","startsWith","outputs","inputNodeNameToKey","outputNodeNameToKey","mapSignatureEntries","allNodes","keys","forEach","key","children","signatureKey","entries","prev","curr","attr","newNode","input","substr","rawAttrs","param","getStringParam","getStringArrayParam","getNumberParam","getNumericArrayParam","getBoolParam","getBoolArrayParam","getTensorShapeParam","getTensorShapeArrayParam","getDtypeParam","getDtypeArrayParam","Error","parseStringParam","s","keepCase","isArray","String","fromCharCode","apply","text","global","env","atob","Buffer","toString","decodeBase64","toLowerCase","def","b","parseInt","parseDtypeParam","tensorflow.DataType","DT_FLOAT","DT_INT32","DT_INT64","DT_BOOL","DT_DOUBLE","DT_STRING","list","v","parseTensorShapeParam","shape","unknownRank","dim","f","getInput","getAttr","NodeValueImpl","tensor","executeOp","tfc.add","tfc.addN","tfc.mod","tfc.mul","tfc.div","tfc.divNoNan","tfc.floorDiv","tfc.sub","tfc.minimum","tfc.maximum","tfc.pow","tfc.squaredDifference","TypeError","tfc.abs","tfc.acos","tfc.acosh","tfc.asin","tfc.asinh","tfc.atan","tfc.atan2","tfc.atanh","tfc.ceil","tfc.complex","tfc.cos","tfc.cosh","tfc.elu","tfc.erf","tfc.exp","tfc.expm1","tfc.floor","tfc.log","tfc.log1p","tfc.imag","tfc.neg","tfc.reciprocal","tfc.real","tfc.relu","tfc.round","tfc.selu","tfc.sigmoid","tfc.sin","tfc.sign","tfc.sinh","tfc.softplus","tfc.sqrt","tfc.square","tfc.tanh","tfc.tan","tfc.clipByValue","tfc.rsqrt","tfc.prod","tfc.leakyRelu","tfc.prelu","dtype","maxSize","elementShape","identicalElementShapes","dynamicSize","clearAfterRead","id","TensorArray","nextId","closed_","tensors","dispose","tensorWithState","cleared","read","indices","t","assertShapesMatchAllowUndefinedSize","written","write","readMany","stack","maxIndex","Math","max","writeMany","unstack","totalLength","cumulativeLengths","len","elementPerRow","tidy","reshape","indices_1","sizes","shapeA","shapeB","errorMessagePrefix","util","assert","shapesEqualAllowUndefinedSize","n1","n2","clone","pred","data_1","_b","frameId","enterFrame","exitFrame","nextIteration","name_1","tensorArray","addTensorArray","scalar","writeTensor","getTensorArray","readId","readIndex","gatherId","gatherIndices","gatherDtype","gather","scatterId","scatterIndices","scatterTensor","scatter","concatId","concatTensorArray","concatDtype","splitId","splitTensor","lengths","sizeId","sizeTensorArray","closeId","clearAndClose","stride","pad","dataFormat","toUpperCase","dilation","tfc.conv1d","dilations","tfc.conv2d","extraOp","activationFunc","isBiasAdd","isPrelu","isBatchNorm","numArgs","biasArg","preluArg","tfc.fused","conv2d","depthwiseConv2d","x","filter","strides","bias","activation","preluActivationWeights","tfc.conv2dTranspose","tfc.depthwiseConv2d","tfc.conv3d","kernelSize","tfc.avgPool","tfc.maxPool","tfc.avgPool3d","tfc.maxPool3d","tfc.fill","stop_1","num","tfc.linspace","logits","numSamples","seed","tfc.multinomial","depth","onValue","offValue","tfc.oneHot","tfc.ones","tfc.onesLike","tfc.randomUniform","stop_2","step","tfc.range","mean","stdDev","tfc.truncatedNormal","tfc.zeros","tfc.zerosLike","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","tfc.image","nonMaxSuppressionWithScoreAsync","result","selectedIndices","selectedScores","nonMaxSuppressionAsync","condition","asType","tfc.whereAsync","tfc.setdiff1dAsync","k","sorted","tfc.topk","values","tfc.tensor1d","tfc.scalar","rank","message","summarize","console","warn","log","images","alignCorners","resizeBilinear","resizeNearestNeighbor","boxInd","cropSize","method","extrapolationValue","cropAndResize","tfc.equal","tfc.notEqual","tfc.greater","tfc.greaterEqual","tfc.less","tfc.lessEqual","tfc.logicalAnd","tfc.logicalNot","tfc.logicalOr","tfc.where","tfc.matMul","tfc.transpose","matMul","a","transposeA","transposeB","tfc.batchNorm","tfc.localResponseNormalization","tfc.softmax","tfc.logSoftmax","tfc.sparseToDense","axis","keepDims","tfc.max","tfc.mean","tfc.min","tfc.sum","tfc.all","tfc.any","tfc.argMax","tfc.argMin","n","tfc.concat","tfc.gather","tfc.reverse","begin","tfc.slice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","tfc.stridedSlice","tfc.tidy","squeezedShape","squeeze","mapped","sameShape","tfc.util","arraysEqual","tfc.stack","tfc.unstack","reps","tfc.tile","numOrSizeSplits","tfc.split","tfc.scatterND","tfc.gatherND","sparseValues","tfc.fft","tfc.ifft","tfc.rfft","tfc.irfft","tfc.cast","tfc.expandDims","tfc.squeeze","tfc.reshape","tfc.pad","blockShape","paddings","tfc.spaceToBatchND","crops","tfc.batchToSpaceND","blockSize","tfc.depthToSpace","arithmetic.executeOp","basicMath.executeOp","control.executeOp","convolution.executeOp","creation.executeOp","dynamic.executeOp","evaluation.executeOp","image.executeOp","graph.executeOp","logical.executeOp","matrices.executeOp","normalization.executeOp","reduction.executeOp","sliceJoin.executeOp","spectral.executeOp","transformation.executeOp","opMapper","customExecutor","Promise","then","weightMap","tensorArrayMap","frameName","iterationId","rootContext","generateCurrentContextIds","ExecutionContext","contexts","_currentContextIds","names","contextIdforContexts","join","lastId","newFrame","unshift","splice","shift","assign","getExecutionSubgraph","usedNodes","Set","missingInputs","dynamicNode","syncInputs","seen","inputNodeNames","frontier","pop","isControlFlow","isDynamicShape","child","has","add","indexOf","CONTROL_FLOW_OPS","DYNAMIC_SHAPE_OPS","Map","_outputs","_inputs","_signature","GraphExecutor","_weightMap","weightIds","sortedInputs","sort","sortedOutputs","SEPERATOR","executionInfo","outNames","inNames","weight","orderedNodes","every","getNodesInTopologicalOrder","mapInputs","checkInputs","checkInputShapeAndType","mapOutputs","checkOutputs","inputNodes","outputNodes","compilationKey","getCompilationKey","compiledMap","get","compile","set","tensorsToKeep","getFrozenTensorIds","intermediateTensorConsumerCount","checkTensorForDisposal","ids","outputNames","getTensorsForCurrentContenxt","count","executeWithControlFlow","results","outputIds","inputIds","isDisposed","currentContext","added","promises","processStack","all","missingOutputs","alternativeMsg","item","currentContext_1","processChildNodes","this_1","childNode","some","shape_1","match","notInGraph","normalizedName","TFHUB_SEARCH_PARAM","DEFAULT_MODEL_NAME","modelUrl","loadOptions","GraphModel","version","executor","path","load","handler","requestInit","io","browserHTTPRequest","handlers","getLoadHandlers","onProgress","findIOHandler","artifacts","modelTopology","userDefinedMetadata","versions","producer","minConsumer","decodeWeights","weightData","weightSpecs","Instance","transformGraph","convertTensorMapToTensorsMap","handlerOrURL","config","getSaveHandlers","save","execute","Tensor","normalizeInputs","normalizeOutputs","executeAsync","newMap","options","fromTFHub","endsWith","model","opFunc"],"mappings":"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"}