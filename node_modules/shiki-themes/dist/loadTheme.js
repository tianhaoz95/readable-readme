"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadTheme = void 0;
var fs = require("fs");
var path = require("path");
var plist_1 = require("./plist");
var JSON5 = require("json5");
function loadJSONTheme(themePath) {
    var fileContents = fs.readFileSync(themePath, 'utf-8');
    return JSON5.parse(fileContents);
}
function loadPListTheme(themePath) {
    var fileContents = fs.readFileSync(themePath, 'utf-8');
    return plist_1.parse(fileContents);
}
function toShikiTheme(rawTheme) {
    var shikiTheme = __assign(__assign({}, rawTheme), getThemeDefaultColors(rawTheme));
    if (rawTheme.include) {
        shikiTheme.include = rawTheme.include;
    }
    if (rawTheme.tokenColors) {
        shikiTheme.settings = rawTheme.tokenColors;
    }
    return shikiTheme;
}
/**
 * @param themePath Absolute path to theme.json / theme.tmTheme
 */
function loadTheme(themePath) {
    var theme;
    if (/\.json$/.test(themePath)) {
        theme = loadJSONTheme(themePath);
    }
    else {
        theme = loadPListTheme(themePath);
    }
    var shikiTheme = toShikiTheme(theme);
    if (shikiTheme.include) {
        var includedThemePath = path.resolve(themePath, '..', shikiTheme.include);
        var includedTheme = loadTheme(includedThemePath);
        if (includedTheme.settings) {
            shikiTheme.settings = shikiTheme.settings.concat(includedTheme.settings);
        }
        if (includedTheme.bg && !shikiTheme.bg) {
            shikiTheme.bg = includedTheme.bg;
        }
    }
    return shikiTheme;
}
exports.loadTheme = loadTheme;
/**
 * https://github.com/microsoft/vscode/blob/f7f05dee53fb33fe023db2e06e30a89d3094488f/src/vs/platform/theme/common/colorRegistry.ts#L258-L268
 */
var VSCODE_FALLBACK_EDITOR_FG = { light: '#333333', dark: '#bbbbbb' };
var VSCODE_FALLBACK_EDITOR_BG = { light: '#fffffe', dark: '#1e1e1e' };
function getThemeDefaultColors(theme) {
    var _a, _b, _c, _d;
    var fg, bg;
    /**
     * First try:
     * Theme might contain a global `tokenColor` without `name` or `scope`
     * Used as default value for foreground/background
     */
    var settings = theme.settings ? theme.settings : theme.tokenColors;
    var globalSetting = settings
        ? settings.find(function (s) {
            return !s.name && !s.scope;
        })
        : undefined;
    if ((_a = globalSetting === null || globalSetting === void 0 ? void 0 : globalSetting.settings) === null || _a === void 0 ? void 0 : _a.foreground) {
        fg = globalSetting.settings.foreground;
    }
    if ((_b = globalSetting === null || globalSetting === void 0 ? void 0 : globalSetting.settings) === null || _b === void 0 ? void 0 : _b.background) {
        bg = globalSetting.settings.background;
    }
    /**
     * Second try:
     * If there's no global `tokenColor` without `name` or `scope`
     * Use `editor.foreground` and `editor.background`
     */
    if (!fg && ((_c = theme) === null || _c === void 0 ? void 0 : _c.colors['editor.foreground'])) {
        fg = theme.colors['editor.foreground'];
    }
    if (!bg && ((_d = theme) === null || _d === void 0 ? void 0 : _d.colors['editor.background'])) {
        bg = theme.colors['editor.background'];
    }
    /**
     * Last try:
     * If there's no fg/bg color specified in theme, use default
     */
    if (!fg) {
        fg = theme.type === 'light' ? VSCODE_FALLBACK_EDITOR_FG.light : VSCODE_FALLBACK_EDITOR_FG.dark;
    }
    if (!bg) {
        bg = theme.type === 'light' ? VSCODE_FALLBACK_EDITOR_BG.light : VSCODE_FALLBACK_EDITOR_BG.dark;
    }
    return {
        fg: fg,
        bg: bg
    };
}
//# sourceMappingURL=loadTheme.js.map